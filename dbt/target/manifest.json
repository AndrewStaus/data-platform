{"child_map":{},"disabled":{},"docs":{"doc.dbt_core.accounts_db__account_email":{"name":"accounts_db__account_email","package_name":"dbt_core","path":"models\\staging\\accounts_db\\_docs.md","original_file_path":"models\\staging\\accounts_db\\_docs.md","unique_id":"doc.dbt_core.accounts_db__account_email","block_contents":"{% docs accounts_db__account_email %}\r\ntest\r\n{% enddocs %}"},"doc.dbt_core.accounts_db__account_first_name":{"name":"accounts_db__account_first_name","package_name":"dbt_core","path":"models\\staging\\accounts_db\\_docs.md","original_file_path":"models\\staging\\accounts_db\\_docs.md","unique_id":"doc.dbt_core.accounts_db__account_first_name","block_contents":"{% docs accounts_db__account_first_name %}\r\ntest\r\n{% enddocs %}"},"doc.dbt_core.accounts_db__account_id":{"name":"accounts_db__account_id","package_name":"dbt_core","path":"models\\staging\\accounts_db\\_docs.md","original_file_path":"models\\staging\\accounts_db\\_docs.md","unique_id":"doc.dbt_core.accounts_db__account_id","block_contents":"{% docs accounts_db__account_id %}\r\ntest\r\n{% enddocs %}"},"doc.dbt_core.accounts_db__account_last_name":{"name":"accounts_db__account_last_name","package_name":"dbt_core","path":"models\\staging\\accounts_db\\_docs.md","original_file_path":"models\\staging\\accounts_db\\_docs.md","unique_id":"doc.dbt_core.accounts_db__account_last_name","block_contents":"{% docs accounts_db__account_last_name %}\r\ntest\r\n{% enddocs %}"},"doc.dbt_core.accounts_db__updated_at":{"name":"accounts_db__updated_at","package_name":"dbt_core","path":"models\\staging\\accounts_db\\_docs.md","original_file_path":"models\\staging\\accounts_db\\_docs.md","unique_id":"doc.dbt_core.accounts_db__updated_at","block_contents":"{% docs accounts_db__updated_at %}\r\ntest\r\n{% enddocs %}"},"doc.dbt_core.individual_id":{"name":"individual_id","package_name":"dbt_core","path":"models\\staging\\entity_resolution\\_docs.md","original_file_path":"models\\staging\\entity_resolution\\_docs.md","unique_id":"doc.dbt_core.individual_id","block_contents":"{% docs individual_id %}\r\n\r\nRepresents an individual as understood by the entity resolution system.\r\nA single individual will have multiple party keys, however they will all resolve to the\r\nsame entity id.\r\n\r\n*Example*:\r\n``` sql\r\nselect\r\n    e.individual_id,\r\n    sum(t.revenue) revenue,\r\n    count(distinct visit_id) visits \r\n\r\nfrom transactions t\r\nleft join individual_entity e\r\n    on t.individual_party_key = e.individual_party_key\r\nleft join site_visits v\r\n    on v.individual_party_key = e.individual_party_key\r\ngroup by e.individual_entity_id\r\n```\r\n\r\n{% enddocs %}"},"doc.dbt_core.individual_party_key":{"name":"individual_party_key","package_name":"dbt_core","path":"models\\staging\\entity_resolution\\_docs.md","original_file_path":"models\\staging\\entity_resolution\\_docs.md","unique_id":"doc.dbt_core.individual_party_key","block_contents":"{% docs individual_party_key %}\r\n\r\nRepresents an individual as understood by the system of record as of the\r\ntime the interaction with the individual took place.  This is used in conjunction\r\nwith an individual_id to connect across multiple systems to understand\r\na single entity.\r\n\r\nRecords from seperate systems should use the non-unique party key to join to the\r\nindividual entity table, and then be agregated to on the entity id to understand\r\ninteactions of the same customer.\r\n\r\n*Example*:\r\n``` sql\r\nselect\r\n    e.individual_id,\r\n    sum(t.revenue) revenue,\r\n    count(distinct visit_id) visits \r\n\r\nfrom transactions t\r\nleft join individual_entity e\r\n    on t.individual_party_key = e.individual_party_key\r\nleft join site_visits v\r\n    on v.individual_party_key = e.individual_party_key\r\ngroup by e.individual_entity_id\r\n```\r\n\r\n{% enddocs %}"}},"exposures":{},"group_map":{},"groups":{},"macros":{"macro.dbt._bigquery__get_matching_schemata":{"name":"_bigquery__get_matching_schemata","package_name":"dbt","path":"macros\\relations\\get_relations_by_pattern_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\get_relations_by_pattern_sql.sql","unique_id":"macro.dbt._bigquery__get_matching_schemata","macro_sql":"{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string) -> string","args":[{"name":"schema_pattern","is_optional":false},{"name":"database","is_optional":false}],"resource_type":"macro"},"macro.dbt._split_part_negative":{"name":"_split_part_negative","package_name":"dbt","path":"macros\\utils\\split_part.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\split_part.sql","unique_id":"macro.dbt._split_part_negative","macro_sql":"{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, int) -> string","args":[{"name":"string_text","is_optional":false},{"name":"delimiter_text","is_optional":false},{"name":"part_number","is_optional":false}],"resource_type":"macro"},"macro.dbt.after_commit":{"name":"after_commit","package_name":"dbt","path":"macros\\materializations\\hooks.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\hooks.sql","unique_id":"macro.dbt.after_commit","macro_sql":"{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.alter_column_comment":{"name":"alter_column_comment","package_name":"dbt","path":"macros\\adapters\\persist_docs.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\persist_docs.sql","unique_id":"macro.dbt.alter_column_comment","macro_sql":"{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, dict[string, api.column]) -> string","args":[{"name":"relation","is_optional":false},{"name":"column_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.alter_column_type":{"name":"alter_column_type","package_name":"dbt","path":"macros\\adapters\\columns.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\columns.sql","unique_id":"macro.dbt.alter_column_type","macro_sql":"{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"column_name","is_optional":false},{"name":"new_column_type","is_optional":false}],"resource_type":"macro"},"macro.dbt.alter_relation_add_remove_columns":{"name":"alter_relation_add_remove_columns","package_name":"dbt","path":"macros\\adapters\\columns.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\columns.sql","unique_id":"macro.dbt.alter_relation_add_remove_columns","macro_sql":"{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, optional[list[base_column]], optional[list[base_column]]) -> string","args":[{"name":"relation","is_optional":false},{"name":"add_columns","is_optional":true},{"name":"remove_columns","is_optional":true}],"resource_type":"macro"},"macro.dbt.alter_relation_comment":{"name":"alter_relation_comment","package_name":"dbt","path":"macros\\adapters\\persist_docs.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\persist_docs.sql","unique_id":"macro.dbt.alter_relation_comment","macro_sql":"{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"relation_comment","is_optional":false}],"resource_type":"macro"},"macro.dbt.any_value":{"name":"any_value","package_name":"dbt","path":"macros\\utils\\any_value.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\any_value.sql","unique_id":"macro.dbt.any_value","macro_sql":"{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"expression","is_optional":false}],"resource_type":"macro"},"macro.dbt.apply_grants":{"name":"apply_grants","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.apply_grants","macro_sql":"{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, optional[dict[string, list[string]]], bool) -> string","args":[{"name":"relation","is_optional":false},{"name":"grant_config","is_optional":false},{"name":"should_revoke","is_optional":false}],"resource_type":"macro"},"macro.dbt.array_append":{"name":"array_append","package_name":"dbt","path":"macros\\utils\\array_append.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\array_append.sql","unique_id":"macro.dbt.array_append","macro_sql":"{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[any], any) -> list[any]","args":[{"name":"array","is_optional":false},{"name":"new_element","is_optional":false}],"resource_type":"macro"},"macro.dbt.array_concat":{"name":"array_concat","package_name":"dbt","path":"macros\\utils\\array_concat.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\array_concat.sql","unique_id":"macro.dbt.array_concat","macro_sql":"{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[any], list[any]) -> list[any]","args":[{"name":"array_1","is_optional":false},{"name":"array_2","is_optional":false}],"resource_type":"macro"},"macro.dbt.array_construct":{"name":"array_construct","package_name":"dbt","path":"macros\\utils\\array_construct.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\array_construct.sql","unique_id":"macro.dbt.array_construct","macro_sql":"{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[any], string) -> list[any]","args":[{"name":"inputs","is_optional":true},{"name":"data_type","is_optional":true}],"resource_type":"macro"},"macro.dbt.assert_columns_equivalent":{"name":"assert_columns_equivalent","package_name":"dbt","path":"macros\\relations\\column\\columns_spec_ddl.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\column\\columns_spec_ddl.sql","unique_id":"macro.dbt.assert_columns_equivalent","macro_sql":"{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.before_begin":{"name":"before_begin","package_name":"dbt","path":"macros\\materializations\\hooks.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\hooks.sql","unique_id":"macro.dbt.before_begin","macro_sql":"{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.bigquery__get_tables_by_pattern_sql":{"name":"bigquery__get_tables_by_pattern_sql","package_name":"dbt","path":"macros\\relations\\get_relations_by_pattern_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\get_relations_by_pattern_sql.sql","unique_id":"macro.dbt.bigquery__get_tables_by_pattern_sql","macro_sql":"{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=_bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ adapter.dispatch('get_table_types_sql')() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string, string) -> string","args":[{"name":"schema_pattern","is_optional":false},{"name":"table_pattern","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true}],"resource_type":"macro"},"macro.dbt.bigquery__t_database_name":{"name":"bigquery__t_database_name","package_name":"dbt","path":"macros\\internal\\test\\names.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\internal\\test\\names.sql","unique_id":"macro.dbt.bigquery__t_database_name","macro_sql":"{% macro bigquery__t_database_name() %}\n  {{ return(env_var('GOOGLE_CLOUD_PROJECT')) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.bool_or":{"name":"bool_or","package_name":"dbt","path":"macros\\utils\\bool_or.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\bool_or.sql","unique_id":"macro.dbt.bool_or","macro_sql":"{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"expression","is_optional":false}],"resource_type":"macro"},"macro.dbt.build_config_dict":{"name":"build_config_dict","package_name":"dbt","path":"macros\\python_model\\python.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\python_model\\python.sql","unique_id":"macro.dbt.build_config_dict","macro_sql":"{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false}],"resource_type":"macro"},"macro.dbt.build_ref_function":{"name":"build_ref_function","package_name":"dbt","path":"macros\\python_model\\python.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\python_model\\python.sql","unique_id":"macro.dbt.build_ref_function","macro_sql":"{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(model) -> string","args":[{"name":"model","is_optional":false}],"resource_type":"macro"},"macro.dbt.build_snapshot_staging_table":{"name":"build_snapshot_staging_table","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.build_snapshot_staging_table","macro_sql":"{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(strategy, string, relation) -> relation","args":[{"name":"strategy","is_optional":false},{"name":"sql","is_optional":false},{"name":"target_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.build_snapshot_table":{"name":"build_snapshot_table","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.build_snapshot_table","macro_sql":"{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(strategy, string) -> string","args":[{"name":"strategy","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.build_source_function":{"name":"build_source_function","package_name":"dbt","path":"macros\\python_model\\python.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\python_model\\python.sql","unique_id":"macro.dbt.build_source_function","macro_sql":"{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false}],"resource_type":"macro"},"macro.dbt.call_dcl_statements":{"name":"call_dcl_statements","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.call_dcl_statements","macro_sql":"{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[string]) -> string","args":[{"name":"dcl_statement_list","is_optional":false}],"resource_type":"macro"},"macro.dbt.can_clone_table":{"name":"can_clone_table","package_name":"dbt","path":"macros\\materializations\\models\\clone\\can_clone_table.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\clone\\can_clone_table.sql","unique_id":"macro.dbt.can_clone_table","macro_sql":"{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> bool","resource_type":"macro"},"macro.dbt.cast":{"name":"cast","package_name":"dbt","path":"macros\\utils\\cast.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\cast.sql","unique_id":"macro.dbt.cast","macro_sql":"{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string) -> string","args":[{"name":"field","is_optional":false},{"name":"type","is_optional":false}],"resource_type":"macro"},"macro.dbt.cast_bool_to_text":{"name":"cast_bool_to_text","package_name":"dbt","path":"macros\\utils\\cast_bool_to_text.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\cast_bool_to_text.sql","unique_id":"macro.dbt.cast_bool_to_text","macro_sql":"{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field","is_optional":false}],"resource_type":"macro"},"macro.dbt.check_for_schema_changes":{"name":"check_for_schema_changes","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\on_schema_change.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\on_schema_change.sql","unique_id":"macro.dbt.check_for_schema_changes","macro_sql":"{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, relation) -> struct{schema_changed: bool, source_not_in_target: list[base_column], target_not_in_source: list[base_column], source_columns: list[base_column], target_columns: list[base_column], new_target_types: list[dict[string, string]]}","args":[{"name":"source_relation","is_optional":false},{"name":"target_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.check_schema_exists":{"name":"check_schema_exists","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.check_schema_exists","macro_sql":"{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(information_schema, string) -> agate_table","args":[{"name":"information_schema","is_optional":false},{"name":"schema","is_optional":false}],"resource_type":"macro"},"macro.dbt.check_time_data_types":{"name":"check_time_data_types","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.check_time_data_types","macro_sql":"{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.collect_freshness":{"name":"collect_freshness","package_name":"dbt","path":"macros\\adapters\\freshness.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\freshness.sql","unique_id":"macro.dbt.collect_freshness","macro_sql":"{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, optional[string]) -> any","args":[{"name":"source","is_optional":false},{"name":"loaded_at_field","is_optional":false},{"name":"filter","is_optional":false}],"resource_type":"macro"},"macro.dbt.collect_freshness_custom_sql":{"name":"collect_freshness_custom_sql","package_name":"dbt","path":"macros\\adapters\\freshness.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\freshness.sql","unique_id":"macro.dbt.collect_freshness_custom_sql","macro_sql":"{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string) -> any","args":[{"name":"source","is_optional":false},{"name":"loaded_at_query","is_optional":false}],"resource_type":"macro"},"macro.dbt.concat":{"name":"concat","package_name":"dbt","path":"macros\\utils\\concat.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\concat.sql","unique_id":"macro.dbt.concat","macro_sql":"{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"fields","is_optional":false}],"resource_type":"macro"},"macro.dbt.convert_datetime":{"name":"convert_datetime","package_name":"dbt","path":"macros\\etc\\datetime.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\etc\\datetime.sql","unique_id":"macro.dbt.convert_datetime","macro_sql":"{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string) -> timestamp","args":[{"name":"date_str","is_optional":false},{"name":"date_fmt","is_optional":false}],"resource_type":"macro"},"macro.dbt.copy_grants":{"name":"copy_grants","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.copy_grants","macro_sql":"{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> bool","resource_type":"macro"},"macro.dbt.create_columns":{"name":"create_columns","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.create_columns","macro_sql":"{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, list[base_column]) -> string","args":[{"name":"relation","is_optional":false},{"name":"columns","is_optional":false}],"resource_type":"macro"},"macro.dbt.create_csv_table":{"name":"create_csv_table","package_name":"dbt","path":"macros\\materializations\\seeds\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\seeds\\helpers.sql","unique_id":"macro.dbt.create_csv_table","macro_sql":"{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(model, agate_table) -> string","args":[{"name":"model","is_optional":false},{"name":"agate_table","is_optional":false}],"resource_type":"macro"},"macro.dbt.create_indexes":{"name":"create_indexes","package_name":"dbt","path":"macros\\adapters\\indexes.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\indexes.sql","unique_id":"macro.dbt.create_indexes","macro_sql":"{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.create_or_replace_clone":{"name":"create_or_replace_clone","package_name":"dbt","path":"macros\\materializations\\models\\clone\\create_or_replace_clone.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\clone\\create_or_replace_clone.sql","unique_id":"macro.dbt.create_or_replace_clone","macro_sql":"{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, relation) -> string","args":[{"name":"this_relation","is_optional":false},{"name":"defer_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.create_or_replace_view":{"name":"create_or_replace_view","package_name":"dbt","path":"macros\\relations\\view\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\view\\replace.sql","unique_id":"macro.dbt.create_or_replace_view","macro_sql":"{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.create_schema":{"name":"create_schema","package_name":"dbt","path":"macros\\adapters\\schema.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\schema.sql","unique_id":"macro.dbt.create_schema","macro_sql":"{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.create_table_as":{"name":"create_table_as","package_name":"dbt","path":"macros\\relations\\table\\create.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\table\\create.sql","unique_id":"macro.dbt.create_table_as","macro_sql":"{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(bool, relation, string, optional[string]) -> string","args":[{"name":"temporary","is_optional":false},{"name":"relation","is_optional":false},{"name":"compiled_code","is_optional":false},{"name":"language","is_optional":true}],"resource_type":"macro"},"macro.dbt.create_view_as":{"name":"create_view_as","package_name":"dbt","path":"macros\\relations\\view\\create.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\view\\create.sql","unique_id":"macro.dbt.create_view_as","macro_sql":"{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.current_timestamp":{"name":"current_timestamp","package_name":"dbt","path":"macros\\adapters\\timestamps.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\timestamps.sql","unique_id":"macro.dbt.current_timestamp","macro_sql":"{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.current_timestamp_backcompat":{"name":"current_timestamp_backcompat","package_name":"dbt","path":"macros\\adapters\\timestamps.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\timestamps.sql","unique_id":"macro.dbt.current_timestamp_backcompat","macro_sql":"{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.current_timestamp_in_utc_backcompat":{"name":"current_timestamp_in_utc_backcompat","package_name":"dbt","path":"macros\\adapters\\timestamps.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\timestamps.sql","unique_id":"macro.dbt.current_timestamp_in_utc_backcompat","macro_sql":"{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.databricks__get_table_types_sql":{"name":"databricks__get_table_types_sql","package_name":"dbt","path":"macros\\relations\\get_table_types_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\get_table_types_sql.sql","unique_id":"macro.dbt.databricks__get_table_types_sql","macro_sql":"{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.databricks__t_database_name":{"name":"databricks__t_database_name","package_name":"dbt","path":"macros\\internal\\test\\names.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\internal\\test\\names.sql","unique_id":"macro.dbt.databricks__t_database_name","macro_sql":"{% macro databricks__t_database_name() %}\n  {{ return(env_var('DATABRICKS_CATALOG')) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.date":{"name":"date","package_name":"dbt","path":"macros\\utils\\date.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\date.sql","unique_id":"macro.dbt.date","macro_sql":"{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"year","is_optional":false},{"name":"month","is_optional":false},{"name":"day","is_optional":false}],"resource_type":"macro"},"macro.dbt.date_spine":{"name":"date_spine","package_name":"dbt","path":"macros\\utils\\date_spine.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\date_spine.sql","unique_id":"macro.dbt.date_spine","macro_sql":"{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"datepart","is_optional":false},{"name":"start_date","is_optional":false},{"name":"end_date","is_optional":false}],"resource_type":"macro"},"macro.dbt.date_trunc":{"name":"date_trunc","package_name":"dbt","path":"macros\\utils\\date_trunc.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\date_trunc.sql","unique_id":"macro.dbt.date_trunc","macro_sql":"{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"datepart","is_optional":false},{"name":"date","is_optional":false}],"resource_type":"macro"},"macro.dbt.dateadd":{"name":"dateadd","package_name":"dbt","path":"macros\\utils\\dateadd.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\dateadd.sql","unique_id":"macro.dbt.dateadd","macro_sql":"{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"datepart","is_optional":false},{"name":"interval","is_optional":false},{"name":"from_date_or_timestamp","is_optional":false}],"resource_type":"macro"},"macro.dbt.datediff":{"name":"datediff","package_name":"dbt","path":"macros\\utils\\datediff.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\datediff.sql","unique_id":"macro.dbt.datediff","macro_sql":"{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"first_date","is_optional":false},{"name":"second_date","is_optional":false},{"name":"datepart","is_optional":false}],"resource_type":"macro"},"macro.dbt.dates_in_range":{"name":"dates_in_range","package_name":"dbt","path":"macros\\etc\\datetime.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\etc\\datetime.sql","unique_id":"macro.dbt.dates_in_range","macro_sql":"{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, optional[string], optional[string], optional[string]) -> list[timestamp]","args":[{"name":"start_date_str","is_optional":false},{"name":"end_date_str","is_optional":true},{"name":"in_fmt","is_optional":true},{"name":"out_fmt","is_optional":true}],"resource_type":"macro"},"macro.dbt.default__alter_column_comment":{"name":"default__alter_column_comment","package_name":"dbt","path":"macros\\adapters\\persist_docs.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\persist_docs.sql","unique_id":"macro.dbt.default__alter_column_comment","macro_sql":"{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, dict[string, api.column]) -> string","args":[{"name":"relation","is_optional":false},{"name":"column_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__alter_column_type":{"name":"default__alter_column_type","package_name":"dbt","path":"macros\\adapters\\columns.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\columns.sql","unique_id":"macro.dbt.default__alter_column_type","macro_sql":"{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"column_name","is_optional":false},{"name":"new_column_type","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__alter_relation_add_remove_columns":{"name":"default__alter_relation_add_remove_columns","package_name":"dbt","path":"macros\\adapters\\columns.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\columns.sql","unique_id":"macro.dbt.default__alter_relation_add_remove_columns","macro_sql":"{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, optional[list[base_column]], optional[list[base_column]]) -> string","args":[{"name":"relation","is_optional":false},{"name":"add_columns","is_optional":false},{"name":"remove_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__alter_relation_comment":{"name":"default__alter_relation_comment","package_name":"dbt","path":"macros\\adapters\\persist_docs.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\persist_docs.sql","unique_id":"macro.dbt.default__alter_relation_comment","macro_sql":"{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"relation_comment","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__any_value":{"name":"default__any_value","package_name":"dbt","path":"macros\\utils\\any_value.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\any_value.sql","unique_id":"macro.dbt.default__any_value","macro_sql":"{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"expression","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__apply_grants":{"name":"default__apply_grants","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.default__apply_grants","macro_sql":"{% macro default__apply_grants(relation, grant_config, should_revoke) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, optional[dict[string, list[string]]], bool) -> string","args":[{"name":"relation","is_optional":false},{"name":"grant_config","is_optional":false},{"name":"should_revoke","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__array_append":{"name":"default__array_append","package_name":"dbt","path":"macros\\utils\\array_append.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\array_append.sql","unique_id":"macro.dbt.default__array_append","macro_sql":"{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[any], any) -> list[any]","args":[{"name":"array","is_optional":false},{"name":"new_element","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__array_concat":{"name":"default__array_concat","package_name":"dbt","path":"macros\\utils\\array_concat.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\array_concat.sql","unique_id":"macro.dbt.default__array_concat","macro_sql":"{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[any], list[any]) -> list[any]","args":[{"name":"array_1","is_optional":false},{"name":"array_2","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__array_construct":{"name":"default__array_construct","package_name":"dbt","path":"macros\\utils\\array_construct.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\array_construct.sql","unique_id":"macro.dbt.default__array_construct","macro_sql":"{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[any], string) -> list[any]","args":[{"name":"inputs","is_optional":false},{"name":"data_type","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__bool_or":{"name":"default__bool_or","package_name":"dbt","path":"macros\\utils\\bool_or.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\bool_or.sql","unique_id":"macro.dbt.default__bool_or","macro_sql":"{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"expression","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__build_snapshot_table":{"name":"default__build_snapshot_table","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.default__build_snapshot_table","macro_sql":"{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(strategy, string) -> string","args":[{"name":"strategy","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__call_dcl_statements":{"name":"default__call_dcl_statements","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.default__call_dcl_statements","macro_sql":"{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[string]) -> string","args":[{"name":"dcl_statement_list","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__can_clone_table":{"name":"default__can_clone_table","package_name":"dbt","path":"macros\\materializations\\models\\clone\\can_clone_table.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\clone\\can_clone_table.sql","unique_id":"macro.dbt.default__can_clone_table","macro_sql":"{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> bool","resource_type":"macro"},"macro.dbt.default__cast":{"name":"default__cast","package_name":"dbt","path":"macros\\utils\\cast.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\cast.sql","unique_id":"macro.dbt.default__cast","macro_sql":"{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string) -> string","args":[{"name":"field","is_optional":false},{"name":"type","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__cast_bool_to_text":{"name":"default__cast_bool_to_text","package_name":"dbt","path":"macros\\utils\\cast_bool_to_text.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\cast_bool_to_text.sql","unique_id":"macro.dbt.default__cast_bool_to_text","macro_sql":"{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__check_schema_exists":{"name":"default__check_schema_exists","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.default__check_schema_exists","macro_sql":"{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(information_schema, string) -> agate_table","args":[{"name":"information_schema","is_optional":false},{"name":"schema","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__collect_freshness":{"name":"default__collect_freshness","package_name":"dbt","path":"macros\\adapters\\freshness.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\freshness.sql","unique_id":"macro.dbt.default__collect_freshness","macro_sql":"{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, optional[string]) -> any","args":[{"name":"source","is_optional":false},{"name":"loaded_at_field","is_optional":false},{"name":"filter","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__collect_freshness_custom_sql":{"name":"default__collect_freshness_custom_sql","package_name":"dbt","path":"macros\\adapters\\freshness.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\freshness.sql","unique_id":"macro.dbt.default__collect_freshness_custom_sql","macro_sql":"{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string) -> any","args":[{"name":"source","is_optional":false},{"name":"loaded_at_query","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__concat":{"name":"default__concat","package_name":"dbt","path":"macros\\utils\\concat.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\concat.sql","unique_id":"macro.dbt.default__concat","macro_sql":"{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"fields","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__copy_grants":{"name":"default__copy_grants","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.default__copy_grants","macro_sql":"{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> bool","resource_type":"macro"},"macro.dbt.default__create_columns":{"name":"default__create_columns","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.default__create_columns","macro_sql":"{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, list[base_column]) -> string","args":[{"name":"relation","is_optional":false},{"name":"columns","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__create_csv_table":{"name":"default__create_csv_table","package_name":"dbt","path":"macros\\materializations\\seeds\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\seeds\\helpers.sql","unique_id":"macro.dbt.default__create_csv_table","macro_sql":"{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(model, agate_table) -> string","args":[{"name":"model","is_optional":false},{"name":"agate_table","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__create_indexes":{"name":"default__create_indexes","package_name":"dbt","path":"macros\\adapters\\indexes.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\indexes.sql","unique_id":"macro.dbt.default__create_indexes","macro_sql":"{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__create_or_replace_clone":{"name":"default__create_or_replace_clone","package_name":"dbt","path":"macros\\materializations\\models\\clone\\create_or_replace_clone.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\clone\\create_or_replace_clone.sql","unique_id":"macro.dbt.default__create_or_replace_clone","macro_sql":"{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, relation) -> string","args":[{"name":"this_relation","is_optional":false},{"name":"defer_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__create_schema":{"name":"default__create_schema","package_name":"dbt","path":"macros\\adapters\\schema.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\schema.sql","unique_id":"macro.dbt.default__create_schema","macro_sql":"{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__create_table_as":{"name":"default__create_table_as","package_name":"dbt","path":"macros\\relations\\table\\create.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\table\\create.sql","unique_id":"macro.dbt.default__create_table_as","macro_sql":"{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(bool, relation, string) -> string","args":[{"name":"temporary","is_optional":false},{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__create_view_as":{"name":"default__create_view_as","package_name":"dbt","path":"macros\\relations\\view\\create.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\view\\create.sql","unique_id":"macro.dbt.default__create_view_as","macro_sql":"{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__current_timestamp":{"name":"default__current_timestamp","package_name":"dbt","path":"macros\\adapters\\timestamps.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\timestamps.sql","unique_id":"macro.dbt.default__current_timestamp","macro_sql":"{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.default__current_timestamp_backcompat":{"name":"default__current_timestamp_backcompat","package_name":"dbt","path":"macros\\adapters\\timestamps.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\timestamps.sql","unique_id":"macro.dbt.default__current_timestamp_backcompat","macro_sql":"{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.default__current_timestamp_in_utc_backcompat":{"name":"default__current_timestamp_in_utc_backcompat","package_name":"dbt","path":"macros\\adapters\\timestamps.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\timestamps.sql","unique_id":"macro.dbt.default__current_timestamp_in_utc_backcompat","macro_sql":"{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.default__date":{"name":"default__date","package_name":"dbt","path":"macros\\utils\\date.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\date.sql","unique_id":"macro.dbt.default__date","macro_sql":"{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"year","is_optional":false},{"name":"month","is_optional":false},{"name":"day","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__date_spine":{"name":"default__date_spine","package_name":"dbt","path":"macros\\utils\\date_spine.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\date_spine.sql","unique_id":"macro.dbt.default__date_spine","macro_sql":"{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"datepart","is_optional":false},{"name":"start_date","is_optional":false},{"name":"end_date","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__date_trunc":{"name":"default__date_trunc","package_name":"dbt","path":"macros\\utils\\date_trunc.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\date_trunc.sql","unique_id":"macro.dbt.default__date_trunc","macro_sql":"{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"datepart","is_optional":false},{"name":"date","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__dateadd":{"name":"default__dateadd","package_name":"dbt","path":"macros\\utils\\dateadd.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\dateadd.sql","unique_id":"macro.dbt.default__dateadd","macro_sql":"{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"datepart","is_optional":false},{"name":"interval","is_optional":false},{"name":"from_date_or_timestamp","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__datediff":{"name":"default__datediff","package_name":"dbt","path":"macros\\utils\\datediff.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\datediff.sql","unique_id":"macro.dbt.default__datediff","macro_sql":"{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"first_date","is_optional":false},{"name":"second_date","is_optional":false},{"name":"datepart","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__drop_materialized_view":{"name":"default__drop_materialized_view","package_name":"dbt","path":"macros\\relations\\materialized_view\\drop.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\materialized_view\\drop.sql","unique_id":"macro.dbt.default__drop_materialized_view","macro_sql":"{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__drop_relation":{"name":"default__drop_relation","package_name":"dbt","path":"macros\\relations\\drop.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\drop.sql","unique_id":"macro.dbt.default__drop_relation","macro_sql":"{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__drop_schema":{"name":"default__drop_schema","package_name":"dbt","path":"macros\\adapters\\schema.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\schema.sql","unique_id":"macro.dbt.default__drop_schema","macro_sql":"{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__drop_schema_named":{"name":"default__drop_schema_named","package_name":"dbt","path":"macros\\relations\\schema.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\schema.sql","unique_id":"macro.dbt.default__drop_schema_named","macro_sql":"{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"schema_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__drop_table":{"name":"default__drop_table","package_name":"dbt","path":"macros\\relations\\table\\drop.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\table\\drop.sql","unique_id":"macro.dbt.default__drop_table","macro_sql":"{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__drop_view":{"name":"default__drop_view","package_name":"dbt","path":"macros\\relations\\view\\drop.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\view\\drop.sql","unique_id":"macro.dbt.default__drop_view","macro_sql":"{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__equals":{"name":"default__equals","package_name":"dbt","path":"macros\\utils\\equals.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\equals.sql","unique_id":"macro.dbt.default__equals","macro_sql":"{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string) -> string","args":[{"name":"expr1","is_optional":false},{"name":"expr2","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__escape_single_quotes":{"name":"default__escape_single_quotes","package_name":"dbt","path":"macros\\utils\\escape_single_quotes.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\escape_single_quotes.sql","unique_id":"macro.dbt.default__escape_single_quotes","macro_sql":"{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"expression","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__except":{"name":"default__except","package_name":"dbt","path":"macros\\utils\\except.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\except.sql","unique_id":"macro.dbt.default__except","macro_sql":"{% macro default__except() %}\n\n    except\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.default__format_column":{"name":"default__format_column","package_name":"dbt","path":"macros\\relations\\column\\columns_spec_ddl.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\column\\columns_spec_ddl.sql","unique_id":"macro.dbt.default__format_column","macro_sql":"{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(base_column) -> struct {name: string, data_type: string, formatted: string}","args":[{"name":"column","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__generate_alias_name":{"name":"default__generate_alias_name","package_name":"dbt","path":"macros\\get_custom_name\\get_custom_alias.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\get_custom_name\\get_custom_alias.sql","unique_id":"macro.dbt.default__generate_alias_name","macro_sql":"{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node -%}\n\n        {% if node.version -%}\n            {{ node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\")) }}\n        {%- else -%}\n            {{ node.name }}\n        {%- endif -%}\n    \n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[string], optional[node]) -> string","args":[{"name":"custom_alias_name","is_optional":true},{"name":"node","is_optional":true}],"resource_type":"macro"},"macro.dbt.default__generate_database_name":{"name":"default__generate_database_name","package_name":"dbt","path":"macros\\get_custom_name\\get_custom_database.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\get_custom_name\\get_custom_database.sql","unique_id":"macro.dbt.default__generate_database_name","macro_sql":"{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[string], optional[node]) -> string","args":[{"name":"custom_database_name","is_optional":true},{"name":"node","is_optional":true}],"resource_type":"macro"},"macro.dbt.default__generate_schema_name":{"name":"default__generate_schema_name","package_name":"dbt","path":"macros\\get_custom_name\\get_custom_schema.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\get_custom_name\\get_custom_schema.sql","unique_id":"macro.dbt.default__generate_schema_name","macro_sql":"{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[string], optional[node]) -> string","args":[{"name":"custom_schema_name","is_optional":false},{"name":"node","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__generate_series":{"name":"default__generate_series","package_name":"dbt","path":"macros\\utils\\generate_series.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\generate_series.sql","unique_id":"macro.dbt.default__generate_series","macro_sql":"{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"upper_bound","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_alter_materialized_view_as_sql":{"name":"default__get_alter_materialized_view_as_sql","package_name":"dbt","path":"macros\\relations\\materialized_view\\alter.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\materialized_view\\alter.sql","unique_id":"macro.dbt.default__get_alter_materialized_view_as_sql","macro_sql":"{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string, string, relation, relation, relation) -> string","args":[{"name":"relation","is_optional":false},{"name":"configuration_changes","is_optional":false},{"name":"sql","is_optional":false},{"name":"existing_relation","is_optional":false},{"name":"backup_relation","is_optional":false},{"name":"intermediate_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_assert_columns_equivalent":{"name":"default__get_assert_columns_equivalent","package_name":"dbt","path":"macros\\relations\\column\\columns_spec_ddl.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\column\\columns_spec_ddl.sql","unique_id":"macro.dbt.default__get_assert_columns_equivalent","macro_sql":"{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_batch_size":{"name":"default__get_batch_size","package_name":"dbt","path":"macros\\materializations\\seeds\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\seeds\\helpers.sql","unique_id":"macro.dbt.default__get_batch_size","macro_sql":"{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> integer","resource_type":"macro"},"macro.dbt.default__get_binding_char":{"name":"default__get_binding_char","package_name":"dbt","path":"macros\\materializations\\seeds\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\seeds\\helpers.sql","unique_id":"macro.dbt.default__get_binding_char","macro_sql":"{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.default__get_catalog":{"name":"default__get_catalog","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.default__get_catalog","macro_sql":"{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, list[string]) -> agate_table","args":[{"name":"information_schema","is_optional":false},{"name":"schemas","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_catalog_for_single_relation":{"name":"default__get_catalog_for_single_relation","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.default__get_catalog_for_single_relation","macro_sql":"{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> agate_table","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_catalog_relations":{"name":"default__get_catalog_relations","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.default__get_catalog_relations","macro_sql":"{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, list[relation]) -> list[relation]","args":[{"name":"information_schema","is_optional":false},{"name":"relations","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_column_names":{"name":"default__get_column_names","package_name":"dbt","path":"macros\\relations\\table\\create.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\table\\create.sql","unique_id":"macro.dbt.default__get_column_names","macro_sql":"{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.default__get_columns_in_query":{"name":"default__get_columns_in_query","package_name":"dbt","path":"macros\\adapters\\columns.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\columns.sql","unique_id":"macro.dbt.default__get_columns_in_query","macro_sql":"{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> list[string]","args":[{"name":"select_sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_columns_in_relation":{"name":"default__get_columns_in_relation","package_name":"dbt","path":"macros\\adapters\\columns.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\columns.sql","unique_id":"macro.dbt.default__get_columns_in_relation","macro_sql":"{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> optional[agate_table]","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_create_backup_sql":{"name":"default__get_create_backup_sql","package_name":"dbt","path":"macros\\relations\\create_backup.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\create_backup.sql","unique_id":"macro.dbt.default__get_create_backup_sql","macro_sql":"{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_create_index_sql":{"name":"default__get_create_index_sql","package_name":"dbt","path":"macros\\adapters\\indexes.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\indexes.sql","unique_id":"macro.dbt.default__get_create_index_sql","macro_sql":"{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, dict[string, string]) -> optional[string]","args":[{"name":"relation","is_optional":false},{"name":"index_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_create_intermediate_sql":{"name":"default__get_create_intermediate_sql","package_name":"dbt","path":"macros\\relations\\create_intermediate.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\create_intermediate.sql","unique_id":"macro.dbt.default__get_create_intermediate_sql","macro_sql":"{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_create_materialized_view_as_sql":{"name":"default__get_create_materialized_view_as_sql","package_name":"dbt","path":"macros\\relations\\materialized_view\\create.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\materialized_view\\create.sql","unique_id":"macro.dbt.default__get_create_materialized_view_as_sql","macro_sql":"{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[relation], string) -> string","args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_create_sql":{"name":"default__get_create_sql","package_name":"dbt","path":"macros\\relations\\create.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\create.sql","unique_id":"macro.dbt.default__get_create_sql","macro_sql":"{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_create_table_as_sql":{"name":"default__get_create_table_as_sql","package_name":"dbt","path":"macros\\relations\\table\\create.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\table\\create.sql","unique_id":"macro.dbt.default__get_create_table_as_sql","macro_sql":"{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(bool, relation, string) -> string","args":[{"name":"temporary","is_optional":false},{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_create_view_as_sql":{"name":"default__get_create_view_as_sql","package_name":"dbt","path":"macros\\relations\\view\\create.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\view\\create.sql","unique_id":"macro.dbt.default__get_create_view_as_sql","macro_sql":"{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_csv_sql":{"name":"default__get_csv_sql","package_name":"dbt","path":"macros\\materializations\\seeds\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\seeds\\helpers.sql","unique_id":"macro.dbt.default__get_csv_sql","macro_sql":"{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string) -> string","args":[{"name":"create_or_truncate_sql","is_optional":false},{"name":"insert_sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_dcl_statement_list":{"name":"default__get_dcl_statement_list","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.default__get_dcl_statement_list","macro_sql":"{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, dict[string, list[string]], (relation, string, list[string]) -> string) -> list[string]","args":[{"name":"relation","is_optional":false},{"name":"grant_config","is_optional":false},{"name":"get_dcl_macro","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_delete_insert_merge_sql":{"name":"default__get_delete_insert_merge_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\merge.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\merge.sql","unique_id":"macro.dbt.default__get_delete_insert_merge_sql","macro_sql":"{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string|list[string]|none, list[base_column], optional[list[string]]) -> string","args":[{"name":"target","is_optional":false},{"name":"source","is_optional":false},{"name":"unique_key","is_optional":false},{"name":"dest_columns","is_optional":false},{"name":"incremental_predicates","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_drop_backup_sql":{"name":"default__get_drop_backup_sql","package_name":"dbt","path":"macros\\relations\\drop_backup.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\drop_backup.sql","unique_id":"macro.dbt.default__get_drop_backup_sql","macro_sql":"{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_drop_index_sql":{"name":"default__get_drop_index_sql","package_name":"dbt","path":"macros\\adapters\\indexes.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\indexes.sql","unique_id":"macro.dbt.default__get_drop_index_sql","macro_sql":"{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"index_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_drop_sql":{"name":"default__get_drop_sql","package_name":"dbt","path":"macros\\relations\\drop.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\drop.sql","unique_id":"macro.dbt.default__get_drop_sql","macro_sql":"{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_empty_schema_sql":{"name":"default__get_empty_schema_sql","package_name":"dbt","path":"macros\\adapters\\columns.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\columns.sql","unique_id":"macro.dbt.default__get_empty_schema_sql","macro_sql":"{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {#-- TYPE CHECK: col['data_type'] is optional[string] but user have this constraint --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(dict[string, api.column]) -> string","args":[{"name":"columns","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_empty_subquery_sql":{"name":"default__get_empty_subquery_sql","package_name":"dbt","path":"macros\\adapters\\columns.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\columns.sql","unique_id":"macro.dbt.default__get_empty_subquery_sql","macro_sql":"{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, optional[string]) -> string","args":[{"name":"select_sql","is_optional":false},{"name":"select_sql_header","is_optional":true}],"resource_type":"macro"},"macro.dbt.default__get_grant_sql":{"name":"default__get_grant_sql","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.default__get_grant_sql","macro_sql":"{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string, list[string]) -> string","args":[{"name":"relation","is_optional":false},{"name":"privilege","is_optional":false},{"name":"grantees","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_incremental_append_sql":{"name":"default__get_incremental_append_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\strategies.sql","unique_id":"macro.dbt.default__get_incremental_append_sql","macro_sql":"{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(struct{target_relation: string, temp_relation: string, dest_columns: list[base_column], unique_key: string, incremental_predicates: optional[list[string]]}) -> string","args":[{"name":"arg_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_incremental_default_sql":{"name":"default__get_incremental_default_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\strategies.sql","unique_id":"macro.dbt.default__get_incremental_default_sql","macro_sql":"{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(struct{target_relation: string, temp_relation: string, dest_columns: list[base_column], unique_key: string, incremental_predicates: optional[list[string]]}) -> string","args":[{"name":"arg_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_incremental_delete_insert_sql":{"name":"default__get_incremental_delete_insert_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\strategies.sql","unique_id":"macro.dbt.default__get_incremental_delete_insert_sql","macro_sql":"{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(struct{target_relation: string, temp_relation: string, dest_columns: list[base_column], unique_key: string, incremental_predicates: optional[list[string]]}) -> string","args":[{"name":"arg_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_incremental_insert_overwrite_sql":{"name":"default__get_incremental_insert_overwrite_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\strategies.sql","unique_id":"macro.dbt.default__get_incremental_insert_overwrite_sql","macro_sql":"{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(struct{target_relation: string, temp_relation: string, dest_columns: list[base_column], unique_key: string, incremental_predicates: optional[list[string]]}) -> string","args":[{"name":"arg_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_incremental_merge_sql":{"name":"default__get_incremental_merge_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\strategies.sql","unique_id":"macro.dbt.default__get_incremental_merge_sql","macro_sql":"{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(struct{target_relation: string, temp_relation: string, dest_columns: list[base_column], unique_key: string, incremental_predicates: optional[list[string]]}) -> string","args":[{"name":"arg_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_incremental_microbatch_sql":{"name":"default__get_incremental_microbatch_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\strategies.sql","unique_id":"macro.dbt.default__get_incremental_microbatch_sql","macro_sql":"{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(struct{target_relation: string, temp_relation: string, dest_columns: list[base_column], unique_key: string, incremental_predicates: optional[list[string]]}) -> string","args":[{"name":"arg_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_insert_overwrite_merge_sql":{"name":"default__get_insert_overwrite_merge_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\merge.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\merge.sql","unique_id":"macro.dbt.default__get_insert_overwrite_merge_sql","macro_sql":"{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, list[base_column], optional[list[string]], optional[bool]) -> string","args":[{"name":"target","is_optional":false},{"name":"source","is_optional":false},{"name":"dest_columns","is_optional":false},{"name":"predicates","is_optional":false},{"name":"include_sql_header","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_intervals_between":{"name":"default__get_intervals_between","package_name":"dbt","path":"macros\\utils\\date_spine.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\date_spine.sql","unique_id":"macro.dbt.default__get_intervals_between","macro_sql":"{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"start_date","is_optional":false},{"name":"end_date","is_optional":false},{"name":"datepart","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_limit_sql":{"name":"default__get_limit_sql","package_name":"dbt","path":"macros\\adapters\\show.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\show.sql","unique_id":"macro.dbt.default__get_limit_sql","macro_sql":"{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, optional[integer]) -> string","args":[{"name":"sql","is_optional":false},{"name":"limit","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_materialized_view_configuration_changes":{"name":"default__get_materialized_view_configuration_changes","package_name":"dbt","path":"macros\\relations\\materialized_view\\alter.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\materialized_view\\alter.sql","unique_id":"macro.dbt.default__get_materialized_view_configuration_changes","macro_sql":"{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, config) -> string","args":[{"name":"existing_relation","is_optional":false},{"name":"new_config","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_merge_sql":{"name":"default__get_merge_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\merge.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\merge.sql","unique_id":"macro.dbt.default__get_merge_sql","macro_sql":"{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string|list[string]|none, list[base_column], optional[list[string]]) -> string","args":[{"name":"target","is_optional":false},{"name":"source","is_optional":false},{"name":"unique_key","is_optional":false},{"name":"dest_columns","is_optional":false},{"name":"incremental_predicates","is_optional":true}],"resource_type":"macro"},"macro.dbt.default__get_merge_update_columns":{"name":"default__get_merge_update_columns","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\column_helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\column_helpers.sql","unique_id":"macro.dbt.default__get_merge_update_columns","macro_sql":"{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[list[string]], optional[list[string]], list[base_column]) -> list[string]","args":[{"name":"merge_update_columns","is_optional":false},{"name":"merge_exclude_columns","is_optional":false},{"name":"dest_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_or_create_relation":{"name":"default__get_or_create_relation","package_name":"dbt","path":"macros\\adapters\\relation.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\relation.sql","unique_id":"macro.dbt.default__get_or_create_relation","macro_sql":"{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return((true, target_relation)) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return((false, new_relation)) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string, string) -> tuple[bool, relation]","args":[{"name":"database","is_optional":false},{"name":"schema","is_optional":false},{"name":"identifier","is_optional":false},{"name":"type","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_powers_of_two":{"name":"default__get_powers_of_two","package_name":"dbt","path":"macros\\utils\\generate_series.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\generate_series.sql","unique_id":"macro.dbt.default__get_powers_of_two","macro_sql":"{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"upper_bound","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_relation_last_modified":{"name":"default__get_relation_last_modified","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.default__get_relation_last_modified","macro_sql":"{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(information_schema, list[relation]) -> agate_table","args":[{"name":"information_schema","is_optional":false},{"name":"relations","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_relations":{"name":"default__get_relations","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.default__get_relations","macro_sql":"{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> list[relation]","resource_type":"macro"},"macro.dbt.default__get_relations_by_pattern_internal":{"name":"default__get_relations_by_pattern_internal","package_name":"dbt","path":"macros\\relations\\get_relations_by_pattern.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\get_relations_by_pattern.sql","unique_id":"macro.dbt.default__get_relations_by_pattern_internal","macro_sql":"{% macro default__get_relations_by_pattern_internal(schema_pattern, table_pattern, exclude='', database=target.database, quote_table=False, excluded_schemas=[]) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        {{ adapter.dispatch('get_tables_by_pattern_sql')(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {% if row.table_schema not in excluded_schemas %}\n                {% if quote_table %}\n                {% set table_name = '\"' ~ row.table_name ~ '\"' %}\n                {% else %}\n                {% set table_name = row.table_name %}\n                {% endif %}\n                {%- set tbl_relation = api.Relation.create(\n                    database=database,\n                    schema=row.table_schema,\n                    identifier=table_name,\n                    type=row.table_type\n                ) -%}\n                {%- do tbl_relations.append(tbl_relation) -%}\n            {% endif %}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string, string, boolean, list[ANY]) -> list[ANY]","args":[{"name":"schema_pattern","is_optional":false},{"name":"table_pattern","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true},{"name":"quote_table","is_optional":true},{"name":"excluded_schemas","is_optional":true}],"resource_type":"macro"},"macro.dbt.default__get_rename_intermediate_sql":{"name":"default__get_rename_intermediate_sql","package_name":"dbt","path":"macros\\relations\\rename_intermediate.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\rename_intermediate.sql","unique_id":"macro.dbt.default__get_rename_intermediate_sql","macro_sql":"{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_rename_materialized_view_sql":{"name":"default__get_rename_materialized_view_sql","package_name":"dbt","path":"macros\\relations\\materialized_view\\rename.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\materialized_view\\rename.sql","unique_id":"macro.dbt.default__get_rename_materialized_view_sql","macro_sql":"{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"new_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_rename_sql":{"name":"default__get_rename_sql","package_name":"dbt","path":"macros\\relations\\rename.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\rename.sql","unique_id":"macro.dbt.default__get_rename_sql","macro_sql":"{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, relation) -> string","args":[{"name":"relation","is_optional":false},{"name":"new_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_rename_table_sql":{"name":"default__get_rename_table_sql","package_name":"dbt","path":"macros\\relations\\table\\rename.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\table\\rename.sql","unique_id":"macro.dbt.default__get_rename_table_sql","macro_sql":"{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"new_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_rename_view_sql":{"name":"default__get_rename_view_sql","package_name":"dbt","path":"macros\\relations\\view\\rename.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\view\\rename.sql","unique_id":"macro.dbt.default__get_rename_view_sql","macro_sql":"{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"new_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_replace_materialized_view_sql":{"name":"default__get_replace_materialized_view_sql","package_name":"dbt","path":"macros\\relations\\materialized_view\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\materialized_view\\replace.sql","unique_id":"macro.dbt.default__get_replace_materialized_view_sql","macro_sql":"{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_replace_sql":{"name":"default__get_replace_sql","package_name":"dbt","path":"macros\\relations\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\replace.sql","unique_id":"macro.dbt.default__get_replace_sql","macro_sql":"{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, relation, string) -> string","args":[{"name":"existing_relation","is_optional":false},{"name":"target_relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_replace_table_sql":{"name":"default__get_replace_table_sql","package_name":"dbt","path":"macros\\relations\\table\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\table\\replace.sql","unique_id":"macro.dbt.default__get_replace_table_sql","macro_sql":"{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_replace_view_sql":{"name":"default__get_replace_view_sql","package_name":"dbt","path":"macros\\relations\\view\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\view\\replace.sql","unique_id":"macro.dbt.default__get_replace_view_sql","macro_sql":"{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_revoke_sql":{"name":"default__get_revoke_sql","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.default__get_revoke_sql","macro_sql":"{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string, list[string]) -> string","args":[{"name":"relation","is_optional":false},{"name":"privilege","is_optional":false},{"name":"grantees","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_select_subquery":{"name":"default__get_select_subquery","package_name":"dbt","path":"macros\\relations\\table\\create.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\table\\create.sql","unique_id":"macro.dbt.default__get_select_subquery","macro_sql":"{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_show_grant_sql":{"name":"default__get_show_grant_sql","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.default__get_show_grant_sql","macro_sql":"{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_show_indexes_sql":{"name":"default__get_show_indexes_sql","package_name":"dbt","path":"macros\\adapters\\indexes.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\indexes.sql","unique_id":"macro.dbt.default__get_show_indexes_sql","macro_sql":"{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_table_columns_and_constraints":{"name":"default__get_table_columns_and_constraints","package_name":"dbt","path":"macros\\relations\\column\\columns_spec_ddl.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\column\\columns_spec_ddl.sql","unique_id":"macro.dbt.default__get_table_columns_and_constraints","macro_sql":"{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.default__get_table_types_sql":{"name":"default__get_table_types_sql","package_name":"dbt","path":"macros\\relations\\get_table_types_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\get_table_types_sql.sql","unique_id":"macro.dbt.default__get_table_types_sql","macro_sql":"{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.default__get_tables_by_pattern_sql":{"name":"default__get_tables_by_pattern_sql","package_name":"dbt","path":"macros\\relations\\get_relations_by_pattern_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\get_relations_by_pattern_sql.sql","unique_id":"macro.dbt.default__get_tables_by_pattern_sql","macro_sql":"{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ adapter.dispatch('get_table_types_sql')() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string, string) -> string","args":[{"name":"schema_pattern","is_optional":false},{"name":"table_pattern","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true}],"resource_type":"macro"},"macro.dbt.default__get_test_sql":{"name":"default__get_test_sql","package_name":"dbt","path":"macros\\materializations\\tests\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\tests\\helpers.sql","unique_id":"macro.dbt.default__get_test_sql","macro_sql":"{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string, string, optional[integer]) -> string","args":[{"name":"main_sql","is_optional":false},{"name":"fail_calc","is_optional":false},{"name":"warn_if","is_optional":false},{"name":"error_if","is_optional":false},{"name":"limit","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_true_sql":{"name":"default__get_true_sql","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.default__get_true_sql","macro_sql":"{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.default__get_unit_test_sql":{"name":"default__get_unit_test_sql","package_name":"dbt","path":"macros\\materializations\\tests\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\tests\\helpers.sql","unique_id":"macro.dbt.default__get_unit_test_sql","macro_sql":"{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, list[string]) -> string","args":[{"name":"main_sql","is_optional":false},{"name":"expected_fixture_sql","is_optional":false},{"name":"expected_column_names","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__get_where_subquery":{"name":"default__get_where_subquery","package_name":"dbt","path":"macros\\materializations\\tests\\where_subquery.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\tests\\where_subquery.sql","unique_id":"macro.dbt.default__get_where_subquery","macro_sql":"{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__handle_existing_table":{"name":"default__handle_existing_table","package_name":"dbt","path":"macros\\relations\\view\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\view\\replace.sql","unique_id":"macro.dbt.default__handle_existing_table","macro_sql":"{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"full_refresh","is_optional":false},{"name":"old_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__hash":{"name":"default__hash","package_name":"dbt","path":"macros\\utils\\hash.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\hash.sql","unique_id":"macro.dbt.default__hash","macro_sql":"{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__information_schema_name":{"name":"default__information_schema_name","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.default__information_schema_name","macro_sql":"{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"database","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__intersect":{"name":"default__intersect","package_name":"dbt","path":"macros\\utils\\intersect.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\intersect.sql","unique_id":"macro.dbt.default__intersect","macro_sql":"{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.default__last_day":{"name":"default__last_day","package_name":"dbt","path":"macros\\utils\\last_day.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\last_day.sql","unique_id":"macro.dbt.default__last_day","macro_sql":"{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"date","is_optional":false},{"name":"datepart","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__length":{"name":"default__length","package_name":"dbt","path":"macros\\utils\\length.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\length.sql","unique_id":"macro.dbt.default__length","macro_sql":"{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"expression","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__list_relations_without_caching":{"name":"default__list_relations_without_caching","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.default__list_relations_without_caching","macro_sql":"{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> list[relation]","args":[{"name":"schema_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__list_schemas":{"name":"default__list_schemas","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.default__list_schemas","macro_sql":"{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> agate_table","args":[{"name":"database","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__listagg":{"name":"default__listagg","package_name":"dbt","path":"macros\\utils\\listagg.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\listagg.sql","unique_id":"macro.dbt.default__listagg","macro_sql":"{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"measure","is_optional":false},{"name":"delimiter_text","is_optional":false},{"name":"order_by_clause","is_optional":false},{"name":"limit_num","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__load_csv_rows":{"name":"default__load_csv_rows","package_name":"dbt","path":"macros\\materializations\\seeds\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\seeds\\helpers.sql","unique_id":"macro.dbt.default__load_csv_rows","macro_sql":"{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(model, agate_table) -> string","args":[{"name":"model","is_optional":false},{"name":"agate_table","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__make_backup_relation":{"name":"default__make_backup_relation","package_name":"dbt","path":"macros\\adapters\\relation.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\relation.sql","unique_id":"macro.dbt.default__make_backup_relation","macro_sql":"{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string, string) -> relation","args":[{"name":"base_relation","is_optional":false},{"name":"backup_relation_type","is_optional":false},{"name":"suffix","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__make_intermediate_relation":{"name":"default__make_intermediate_relation","package_name":"dbt","path":"macros\\adapters\\relation.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\relation.sql","unique_id":"macro.dbt.default__make_intermediate_relation","macro_sql":"{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> relation","args":[{"name":"base_relation","is_optional":false},{"name":"suffix","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__make_temp_relation":{"name":"default__make_temp_relation","package_name":"dbt","path":"macros\\adapters\\relation.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\relation.sql","unique_id":"macro.dbt.default__make_temp_relation","macro_sql":"{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> relation","args":[{"name":"base_relation","is_optional":false},{"name":"suffix","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__persist_docs":{"name":"default__persist_docs","package_name":"dbt","path":"macros\\adapters\\persist_docs.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\persist_docs.sql","unique_id":"macro.dbt.default__persist_docs","macro_sql":"{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, model, optional[bool], optional[bool]) -> string","args":[{"name":"relation","is_optional":false},{"name":"model","is_optional":false},{"name":"for_relation","is_optional":false},{"name":"for_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__position":{"name":"default__position","package_name":"dbt","path":"macros\\utils\\position.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\position.sql","unique_id":"macro.dbt.default__position","macro_sql":"{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"substring_text","is_optional":false},{"name":"string_text","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__post_snapshot":{"name":"default__post_snapshot","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.default__post_snapshot","macro_sql":"{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"staging_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__refresh_materialized_view":{"name":"default__refresh_materialized_view","package_name":"dbt","path":"macros\\relations\\materialized_view\\refresh.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\materialized_view\\refresh.sql","unique_id":"macro.dbt.default__refresh_materialized_view","macro_sql":"{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__rename_relation":{"name":"default__rename_relation","package_name":"dbt","path":"macros\\relations\\rename.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\rename.sql","unique_id":"macro.dbt.default__rename_relation","macro_sql":"{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, relation) -> string","args":[{"name":"from_relation","is_optional":false},{"name":"to_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__replace":{"name":"default__replace","package_name":"dbt","path":"macros\\utils\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\replace.sql","unique_id":"macro.dbt.default__replace","macro_sql":"{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field","is_optional":false},{"name":"old_chars","is_optional":false},{"name":"new_chars","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__reset_csv_table":{"name":"default__reset_csv_table","package_name":"dbt","path":"macros\\materializations\\seeds\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\seeds\\helpers.sql","unique_id":"macro.dbt.default__reset_csv_table","macro_sql":"{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(model, bool, relation, agate_table) -> string","args":[{"name":"model","is_optional":false},{"name":"full_refresh","is_optional":false},{"name":"old_relation","is_optional":false},{"name":"agate_table","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__resolve_model_name":{"name":"default__resolve_model_name","package_name":"dbt","path":"macros\\python_model\\python.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\python_model\\python.sql","unique_id":"macro.dbt.default__resolve_model_name","macro_sql":"{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"input_model_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__right":{"name":"default__right","package_name":"dbt","path":"macros\\utils\\right.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\right.sql","unique_id":"macro.dbt.default__right","macro_sql":"{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"string_text","is_optional":false},{"name":"length_expression","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__safe_cast":{"name":"default__safe_cast","package_name":"dbt","path":"macros\\utils\\safe_cast.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\safe_cast.sql","unique_id":"macro.dbt.default__safe_cast","macro_sql":"{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string) -> string","args":[{"name":"field","is_optional":false},{"name":"type","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__snapshot_get_time":{"name":"default__snapshot_get_time","package_name":"dbt","path":"macros\\adapters\\timestamps.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\timestamps.sql","unique_id":"macro.dbt.default__snapshot_get_time","macro_sql":"{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.default__snapshot_hash_arguments":{"name":"default__snapshot_hash_arguments","package_name":"dbt","path":"macros\\materializations\\snapshots\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\strategies.sql","unique_id":"macro.dbt.default__snapshot_hash_arguments","macro_sql":"{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[string]) -> string","args":[{"name":"args","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__snapshot_merge_sql":{"name":"default__snapshot_merge_sql","package_name":"dbt","path":"macros\\materializations\\snapshots\\snapshot_merge.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\snapshot_merge.sql","unique_id":"macro.dbt.default__snapshot_merge_sql","macro_sql":"{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string, list[string]) -> string","args":[{"name":"target","is_optional":false},{"name":"source","is_optional":false},{"name":"insert_cols","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__snapshot_staging_table":{"name":"default__snapshot_staging_table","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.default__snapshot_staging_table","macro_sql":"{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %} -- noqa: optional[string] does not support trim\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(strategy, string, relation) -> string","args":[{"name":"strategy","is_optional":false},{"name":"source_sql","is_optional":false},{"name":"target_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__snapshot_string_as_time":{"name":"default__snapshot_string_as_time","package_name":"dbt","path":"macros\\materializations\\snapshots\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\strategies.sql","unique_id":"macro.dbt.default__snapshot_string_as_time","macro_sql":"{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(timestamp) -> string","args":[{"name":"timestamp","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__split_part":{"name":"default__split_part","package_name":"dbt","path":"macros\\utils\\split_part.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\split_part.sql","unique_id":"macro.dbt.default__split_part","macro_sql":"{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, int) -> string","args":[{"name":"string_text","is_optional":false},{"name":"delimiter_text","is_optional":false},{"name":"part_number","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__string_literal":{"name":"default__string_literal","package_name":"dbt","path":"macros\\utils\\literal.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\literal.sql","unique_id":"macro.dbt.default__string_literal","macro_sql":"{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"value","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__support_multiple_grantees_per_dcl_statement":{"name":"default__support_multiple_grantees_per_dcl_statement","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.default__support_multiple_grantees_per_dcl_statement","macro_sql":"{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> bool","resource_type":"macro"},"macro.dbt.default__t_database_name":{"name":"default__t_database_name","package_name":"dbt","path":"macros\\internal\\test\\names.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\internal\\test\\names.sql","unique_id":"macro.dbt.default__t_database_name","macro_sql":"{% macro default__t_database_name() %}\n  {{ return(env_var('DBT_DB_NAME')) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.default__test_accepted_values":{"name":"default__test_accepted_values","package_name":"dbt","path":"macros\\generic_test_sql\\accepted_values.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\generic_test_sql\\accepted_values.sql","unique_id":"macro.dbt.default__test_accepted_values","macro_sql":"{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(model, string, list[string], bool) -> string","args":[{"name":"model","is_optional":false},{"name":"column_name","is_optional":false},{"name":"values","is_optional":false},{"name":"quote","is_optional":true}],"resource_type":"macro"},"macro.dbt.default__test_not_null":{"name":"default__test_not_null","package_name":"dbt","path":"macros\\generic_test_sql\\not_null.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\generic_test_sql\\not_null.sql","unique_id":"macro.dbt.default__test_not_null","macro_sql":"{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"column_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__test_relationships":{"name":"default__test_relationships","package_name":"dbt","path":"macros\\generic_test_sql\\relationships.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\generic_test_sql\\relationships.sql","unique_id":"macro.dbt.default__test_relationships","macro_sql":"{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"column_name","is_optional":false},{"name":"to","is_optional":false},{"name":"field","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__test_unique":{"name":"default__test_unique","package_name":"dbt","path":"macros\\generic_test_sql\\unique.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\generic_test_sql\\unique.sql","unique_id":"macro.dbt.default__test_unique","macro_sql":"{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"column_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__truncate_relation":{"name":"default__truncate_relation","package_name":"dbt","path":"macros\\adapters\\relation.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\relation.sql","unique_id":"macro.dbt.default__truncate_relation","macro_sql":"{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__type_bigint":{"name":"default__type_bigint","package_name":"dbt","path":"macros\\utils\\data_types.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\data_types.sql","unique_id":"macro.dbt.default__type_bigint","macro_sql":"{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.default__type_boolean":{"name":"default__type_boolean","package_name":"dbt","path":"macros\\utils\\data_types.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\data_types.sql","unique_id":"macro.dbt.default__type_boolean","macro_sql":"{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.default__type_float":{"name":"default__type_float","package_name":"dbt","path":"macros\\utils\\data_types.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\data_types.sql","unique_id":"macro.dbt.default__type_float","macro_sql":"{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.default__type_int":{"name":"default__type_int","package_name":"dbt","path":"macros\\utils\\data_types.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\data_types.sql","unique_id":"macro.dbt.default__type_int","macro_sql":"{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.default__type_numeric":{"name":"default__type_numeric","package_name":"dbt","path":"macros\\utils\\data_types.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\data_types.sql","unique_id":"macro.dbt.default__type_numeric","macro_sql":"{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }} -- noqa: this warning is in the comment\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.default__type_string":{"name":"default__type_string","package_name":"dbt","path":"macros\\utils\\data_types.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\data_types.sql","unique_id":"macro.dbt.default__type_string","macro_sql":"{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.default__type_timestamp":{"name":"default__type_timestamp","package_name":"dbt","path":"macros\\utils\\data_types.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\data_types.sql","unique_id":"macro.dbt.default__type_timestamp","macro_sql":"{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.default__validate_fixture_rows":{"name":"default__validate_fixture_rows","package_name":"dbt","path":"macros\\unit_test_sql\\get_fixture_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\unit_test_sql\\get_fixture_sql.sql","unique_id":"macro.dbt.default__validate_fixture_rows","macro_sql":"{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[list[ANY]], integer) -> string","args":[{"name":"rows","is_optional":false},{"name":"row_number","is_optional":false}],"resource_type":"macro"},"macro.dbt.default__validate_sql":{"name":"default__validate_sql","package_name":"dbt","path":"macros\\adapters\\validate_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\validate_sql.sql","unique_id":"macro.dbt.default__validate_sql","macro_sql":"{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> agate_table","args":[{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.default_last_day":{"name":"default_last_day","package_name":"dbt","path":"macros\\utils\\last_day.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\last_day.sql","unique_id":"macro.dbt.default_last_day","macro_sql":"{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"date","is_optional":false},{"name":"datepart","is_optional":false}],"resource_type":"macro"},"macro.dbt.diff_column_data_types":{"name":"diff_column_data_types","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\column_helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\column_helpers.sql","unique_id":"macro.dbt.diff_column_data_types","macro_sql":"{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[base_column], list[base_column]) -> list[dict[string, string]]","args":[{"name":"source_columns","is_optional":false},{"name":"target_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt.diff_columns":{"name":"diff_columns","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\column_helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\column_helpers.sql","unique_id":"macro.dbt.diff_columns","macro_sql":"{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[base_column], list[base_column]) -> list[base_column]","args":[{"name":"source_columns","is_optional":false},{"name":"target_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt.drop_materialized_view":{"name":"drop_materialized_view","package_name":"dbt","path":"macros\\relations\\materialized_view\\drop.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\materialized_view\\drop.sql","unique_id":"macro.dbt.drop_materialized_view","macro_sql":"{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.drop_relation":{"name":"drop_relation","package_name":"dbt","path":"macros\\relations\\drop.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\drop.sql","unique_id":"macro.dbt.drop_relation","macro_sql":"{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.drop_relation_if_exists":{"name":"drop_relation_if_exists","package_name":"dbt","path":"macros\\relations\\drop.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\drop.sql","unique_id":"macro.dbt.drop_relation_if_exists","macro_sql":"{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[relation]) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.drop_schema":{"name":"drop_schema","package_name":"dbt","path":"macros\\adapters\\schema.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\schema.sql","unique_id":"macro.dbt.drop_schema","macro_sql":"{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.drop_schema_named":{"name":"drop_schema_named","package_name":"dbt","path":"macros\\relations\\schema.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\schema.sql","unique_id":"macro.dbt.drop_schema_named","macro_sql":"{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"schema_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.drop_table":{"name":"drop_table","package_name":"dbt","path":"macros\\relations\\table\\drop.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\table\\drop.sql","unique_id":"macro.dbt.drop_table","macro_sql":"{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.drop_view":{"name":"drop_view","package_name":"dbt","path":"macros\\relations\\view\\drop.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\view\\drop.sql","unique_id":"macro.dbt.drop_view","macro_sql":"{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.equals":{"name":"equals","package_name":"dbt","path":"macros\\utils\\equals.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\equals.sql","unique_id":"macro.dbt.equals","macro_sql":"{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string) -> string","args":[{"name":"expr1","is_optional":false},{"name":"expr2","is_optional":false}],"resource_type":"macro"},"macro.dbt.escape_single_quotes":{"name":"escape_single_quotes","package_name":"dbt","path":"macros\\utils\\escape_single_quotes.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\escape_single_quotes.sql","unique_id":"macro.dbt.escape_single_quotes","macro_sql":"{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"expression","is_optional":false}],"resource_type":"macro"},"macro.dbt.except":{"name":"except","package_name":"dbt","path":"macros\\utils\\except.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\except.sql","unique_id":"macro.dbt.except","macro_sql":"{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.format_columns":{"name":"format_columns","package_name":"dbt","path":"macros\\relations\\column\\columns_spec_ddl.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\column\\columns_spec_ddl.sql","unique_id":"macro.dbt.format_columns","macro_sql":"{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[ANY]) -> list[ANY]","args":[{"name":"columns","is_optional":false}],"resource_type":"macro"},"macro.dbt.format_row":{"name":"format_row","package_name":"dbt","path":"macros\\unit_test_sql\\get_fixture_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\unit_test_sql\\get_fixture_sql.sql","unique_id":"macro.dbt.format_row","macro_sql":"{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(dict[string, string], dict[string, string]) -> dict[string, string]","args":[{"name":"row","is_optional":false},{"name":"column_name_to_data_types","is_optional":false}],"resource_type":"macro"},"macro.dbt.generate_alias_name":{"name":"generate_alias_name","package_name":"dbt","path":"macros\\get_custom_name\\get_custom_alias.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\get_custom_name\\get_custom_alias.sql","unique_id":"macro.dbt.generate_alias_name","macro_sql":"{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[string], optional[node]) -> string","args":[{"name":"custom_alias_name","is_optional":true},{"name":"node","is_optional":true}],"resource_type":"macro"},"macro.dbt.generate_database_name":{"name":"generate_database_name","package_name":"dbt","path":"macros\\get_custom_name\\get_custom_database.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\get_custom_name\\get_custom_database.sql","unique_id":"macro.dbt.generate_database_name","macro_sql":"{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[string], optional[node]) -> string","args":[{"name":"custom_database_name","is_optional":true},{"name":"node","is_optional":true}],"resource_type":"macro"},"macro.dbt.generate_schema_name":{"name":"generate_schema_name","package_name":"dbt","path":"macros\\get_custom_name\\get_custom_schema.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\get_custom_name\\get_custom_schema.sql","unique_id":"macro.dbt.generate_schema_name","macro_sql":"{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[string], optional[node]) -> string","args":[{"name":"custom_schema_name","is_optional":true},{"name":"node","is_optional":true}],"resource_type":"macro"},"macro.dbt.generate_schema_name_for_env":{"name":"generate_schema_name_for_env","package_name":"dbt","path":"macros\\get_custom_name\\get_custom_schema.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\get_custom_name\\get_custom_schema.sql","unique_id":"macro.dbt.generate_schema_name_for_env","macro_sql":"{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[string], optional[node]) -> string","args":[{"name":"custom_schema_name","is_optional":false},{"name":"node","is_optional":false}],"resource_type":"macro"},"macro.dbt.generate_series":{"name":"generate_series","package_name":"dbt","path":"macros\\utils\\generate_series.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\generate_series.sql","unique_id":"macro.dbt.generate_series","macro_sql":"{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"upper_bound","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_alter_materialized_view_as_sql":{"name":"get_alter_materialized_view_as_sql","package_name":"dbt","path":"macros\\relations\\materialized_view\\alter.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\materialized_view\\alter.sql","unique_id":"macro.dbt.get_alter_materialized_view_as_sql","macro_sql":"{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string, string, relation, relation, relation) -> string","args":[{"name":"relation","is_optional":false},{"name":"configuration_changes","is_optional":false},{"name":"sql","is_optional":false},{"name":"existing_relation","is_optional":false},{"name":"backup_relation","is_optional":false},{"name":"intermediate_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_assert_columns_equivalent":{"name":"get_assert_columns_equivalent","package_name":"dbt","path":"macros\\relations\\column\\columns_spec_ddl.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\column\\columns_spec_ddl.sql","unique_id":"macro.dbt.get_assert_columns_equivalent","macro_sql":"{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_batch_size":{"name":"get_batch_size","package_name":"dbt","path":"macros\\materializations\\seeds\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\seeds\\helpers.sql","unique_id":"macro.dbt.get_batch_size","macro_sql":"{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> integer","resource_type":"macro"},"macro.dbt.get_binding_char":{"name":"get_binding_char","package_name":"dbt","path":"macros\\materializations\\seeds\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\seeds\\helpers.sql","unique_id":"macro.dbt.get_binding_char","macro_sql":"{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.get_catalog":{"name":"get_catalog","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.get_catalog","macro_sql":"{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, list[string]) -> agate_table","args":[{"name":"information_schema","is_optional":false},{"name":"schemas","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_catalog_for_single_relation":{"name":"get_catalog_for_single_relation","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.get_catalog_for_single_relation","macro_sql":"{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> agate_table","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_catalog_relations":{"name":"get_catalog_relations","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.get_catalog_relations","macro_sql":"{% macro get_catalog_relations(database, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(database, relations)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, list[relation]) -> list[relation]","args":[{"name":"database","is_optional":false},{"name":"relations","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_column_schema_from_query":{"name":"get_column_schema_from_query","package_name":"dbt","path":"macros\\adapters\\columns.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\columns.sql","unique_id":"macro.dbt.get_column_schema_from_query","macro_sql":"{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, optional[string]) -> list[base_column]","args":[{"name":"select_sql","is_optional":false},{"name":"select_sql_header","is_optional":true}],"resource_type":"macro"},"macro.dbt.get_columns_in_query":{"name":"get_columns_in_query","package_name":"dbt","path":"macros\\adapters\\columns.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\columns.sql","unique_id":"macro.dbt.get_columns_in_query","macro_sql":"{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> list[string]","args":[{"name":"select_sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_columns_in_relation":{"name":"get_columns_in_relation","package_name":"dbt","path":"macros\\adapters\\columns.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\columns.sql","unique_id":"macro.dbt.get_columns_in_relation","macro_sql":"{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> optional[agate_table]","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_create_backup_sql":{"name":"get_create_backup_sql","package_name":"dbt","path":"macros\\relations\\create_backup.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\create_backup.sql","unique_id":"macro.dbt.get_create_backup_sql","macro_sql":"{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_create_index_sql":{"name":"get_create_index_sql","package_name":"dbt","path":"macros\\adapters\\indexes.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\indexes.sql","unique_id":"macro.dbt.get_create_index_sql","macro_sql":"{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, dict[string, string]) -> optional[string]","args":[{"name":"relation","is_optional":false},{"name":"index_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_create_intermediate_sql":{"name":"get_create_intermediate_sql","package_name":"dbt","path":"macros\\relations\\create_intermediate.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\create_intermediate.sql","unique_id":"macro.dbt.get_create_intermediate_sql","macro_sql":"{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_create_materialized_view_as_sql":{"name":"get_create_materialized_view_as_sql","package_name":"dbt","path":"macros\\relations\\materialized_view\\create.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\materialized_view\\create.sql","unique_id":"macro.dbt.get_create_materialized_view_as_sql","macro_sql":"{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[relation], string) -> string","args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_create_sql":{"name":"get_create_sql","package_name":"dbt","path":"macros\\relations\\create.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\create.sql","unique_id":"macro.dbt.get_create_sql","macro_sql":"{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_create_table_as_sql":{"name":"get_create_table_as_sql","package_name":"dbt","path":"macros\\relations\\table\\create.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\table\\create.sql","unique_id":"macro.dbt.get_create_table_as_sql","macro_sql":"{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(bool, relation, string) -> string","args":[{"name":"temporary","is_optional":false},{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_create_view_as_sql":{"name":"get_create_view_as_sql","package_name":"dbt","path":"macros\\relations\\view\\create.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\view\\create.sql","unique_id":"macro.dbt.get_create_view_as_sql","macro_sql":"{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_csv_sql":{"name":"get_csv_sql","package_name":"dbt","path":"macros\\materializations\\seeds\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\seeds\\helpers.sql","unique_id":"macro.dbt.get_csv_sql","macro_sql":"{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string) -> string","args":[{"name":"create_or_truncate_sql","is_optional":false},{"name":"insert_sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_dbt_valid_to_current":{"name":"get_dbt_valid_to_current","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.get_dbt_valid_to_current","macro_sql":"{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(strategy, list[base_column]) -> string","args":[{"name":"strategy","is_optional":false},{"name":"columns","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_dcl_statement_list":{"name":"get_dcl_statement_list","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.get_dcl_statement_list","macro_sql":"{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, dict[string, list[string]], (relation, string, list[string]) -> string) -> list[string]","args":[{"name":"relation","is_optional":false},{"name":"grant_config","is_optional":false},{"name":"get_dcl_macro","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_delete_insert_merge_sql":{"name":"get_delete_insert_merge_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\merge.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\merge.sql","unique_id":"macro.dbt.get_delete_insert_merge_sql","macro_sql":"{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string|list[string]|none, list[base_column], optional[list[string]]) -> string","args":[{"name":"target","is_optional":false},{"name":"source","is_optional":false},{"name":"unique_key","is_optional":false},{"name":"dest_columns","is_optional":false},{"name":"incremental_predicates","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_drop_backup_sql":{"name":"get_drop_backup_sql","package_name":"dbt","path":"macros\\relations\\drop_backup.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\drop_backup.sql","unique_id":"macro.dbt.get_drop_backup_sql","macro_sql":"{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_drop_index_sql":{"name":"get_drop_index_sql","package_name":"dbt","path":"macros\\adapters\\indexes.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\indexes.sql","unique_id":"macro.dbt.get_drop_index_sql","macro_sql":"{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"index_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_drop_sql":{"name":"get_drop_sql","package_name":"dbt","path":"macros\\relations\\drop.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\drop.sql","unique_id":"macro.dbt.get_drop_sql","macro_sql":"{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_empty_schema_sql":{"name":"get_empty_schema_sql","package_name":"dbt","path":"macros\\adapters\\columns.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\columns.sql","unique_id":"macro.dbt.get_empty_schema_sql","macro_sql":"{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(dict[string, api.column]) -> string","args":[{"name":"columns","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_empty_subquery_sql":{"name":"get_empty_subquery_sql","package_name":"dbt","path":"macros\\adapters\\columns.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\columns.sql","unique_id":"macro.dbt.get_empty_subquery_sql","macro_sql":"{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, optional[string]) -> string","args":[{"name":"select_sql","is_optional":false},{"name":"select_sql_header","is_optional":true}],"resource_type":"macro"},"macro.dbt.get_expected_sql":{"name":"get_expected_sql","package_name":"dbt","path":"macros\\unit_test_sql\\get_fixture_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\unit_test_sql\\get_fixture_sql.sql","unique_id":"macro.dbt.get_expected_sql","macro_sql":"{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[ANY], dict[string, string]) -> string","args":[{"name":"rows","is_optional":false},{"name":"column_name_to_data_types","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_fixture_sql":{"name":"get_fixture_sql","package_name":"dbt","path":"macros\\unit_test_sql\\get_fixture_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\unit_test_sql\\get_fixture_sql.sql","unique_id":"macro.dbt.get_fixture_sql","macro_sql":"{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[ANY], optional[dict[string, string]]) -> string","args":[{"name":"rows","is_optional":false},{"name":"column_name_to_data_types","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_grant_sql":{"name":"get_grant_sql","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.get_grant_sql","macro_sql":"{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string, list[string]) -> string","args":[{"name":"relation","is_optional":false},{"name":"privilege","is_optional":false},{"name":"grantees","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_incremental_append_sql":{"name":"get_incremental_append_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\strategies.sql","unique_id":"macro.dbt.get_incremental_append_sql","macro_sql":"{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(struct{target_relation: string, temp_relation: string, dest_columns: list[base_column], unique_key: string, incremental_predicates: optional[list[string]]}) -> string","args":[{"name":"arg_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_incremental_default_sql":{"name":"get_incremental_default_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\strategies.sql","unique_id":"macro.dbt.get_incremental_default_sql","macro_sql":"{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(struct{target_relation: string, temp_relation: string, dest_columns: list[base_column], unique_key: string, incremental_predicates: optional[list[string]]}) -> string","args":[{"name":"arg_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_incremental_delete_insert_sql":{"name":"get_incremental_delete_insert_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\strategies.sql","unique_id":"macro.dbt.get_incremental_delete_insert_sql","macro_sql":"{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(struct{target_relation: string, temp_relation: string, dest_columns: list[base_column], unique_key: string, incremental_predicates: optional[list[string]]}) -> string","args":[{"name":"arg_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_incremental_insert_overwrite_sql":{"name":"get_incremental_insert_overwrite_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\strategies.sql","unique_id":"macro.dbt.get_incremental_insert_overwrite_sql","macro_sql":"{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(struct{target_relation: string, temp_relation: string, dest_columns: list[base_column], unique_key: string, incremental_predicates: optional[list[string]]}) -> string","args":[{"name":"arg_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_incremental_merge_sql":{"name":"get_incremental_merge_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\strategies.sql","unique_id":"macro.dbt.get_incremental_merge_sql","macro_sql":"{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(struct{target_relation: string, temp_relation: string, dest_columns: list[base_column], unique_key: string, incremental_predicates: optional[list[string]]}) -> string","args":[{"name":"arg_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_incremental_microbatch_sql":{"name":"get_incremental_microbatch_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\strategies.sql","unique_id":"macro.dbt.get_incremental_microbatch_sql","macro_sql":"{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(struct{target_relation: string, temp_relation: string, dest_columns: list[base_column], unique_key: string, incremental_predicates: optional[list[string]]}) -> string","args":[{"name":"arg_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_insert_into_sql":{"name":"get_insert_into_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\strategies.sql","unique_id":"macro.dbt.get_insert_into_sql","macro_sql":"{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, list[base_column]) -> string","args":[{"name":"target_relation","is_optional":false},{"name":"temp_relation","is_optional":false},{"name":"dest_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_insert_overwrite_merge_sql":{"name":"get_insert_overwrite_merge_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\merge.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\merge.sql","unique_id":"macro.dbt.get_insert_overwrite_merge_sql","macro_sql":"{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, list[base_column], optional[list[string]], optional[bool]) -> string","args":[{"name":"target","is_optional":false},{"name":"source","is_optional":false},{"name":"dest_columns","is_optional":false},{"name":"predicates","is_optional":false},{"name":"include_sql_header","is_optional":true}],"resource_type":"macro"},"macro.dbt.get_intervals_between":{"name":"get_intervals_between","package_name":"dbt","path":"macros\\utils\\date_spine.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\date_spine.sql","unique_id":"macro.dbt.get_intervals_between","macro_sql":"{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"start_date","is_optional":false},{"name":"end_date","is_optional":false},{"name":"datepart","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_limit_subquery_sql":{"name":"get_limit_subquery_sql","package_name":"dbt","path":"macros\\adapters\\show.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\show.sql","unique_id":"macro.dbt.get_limit_subquery_sql","macro_sql":"{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, optional[integer]) -> string","args":[{"name":"sql","is_optional":false},{"name":"limit","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_materialized_view_configuration_changes":{"name":"get_materialized_view_configuration_changes","package_name":"dbt","path":"macros\\relations\\materialized_view\\alter.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\materialized_view\\alter.sql","unique_id":"macro.dbt.get_materialized_view_configuration_changes","macro_sql":"{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, config) -> string","args":[{"name":"existing_relation","is_optional":false},{"name":"new_config","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_merge_sql":{"name":"get_merge_sql","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\merge.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\merge.sql","unique_id":"macro.dbt.get_merge_sql","macro_sql":"{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string|list[string]|none, list[base_column], optional[list[string]]) -> string","args":[{"name":"target","is_optional":false},{"name":"source","is_optional":false},{"name":"unique_key","is_optional":false},{"name":"dest_columns","is_optional":false},{"name":"incremental_predicates","is_optional":true}],"resource_type":"macro"},"macro.dbt.get_merge_update_columns":{"name":"get_merge_update_columns","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\column_helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\column_helpers.sql","unique_id":"macro.dbt.get_merge_update_columns","macro_sql":"{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[list[string]], optional[list[string]], list[base_column]) -> list[string]","args":[{"name":"merge_update_columns","is_optional":false},{"name":"merge_exclude_columns","is_optional":false},{"name":"dest_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_or_create_relation":{"name":"get_or_create_relation","package_name":"dbt","path":"macros\\adapters\\relation.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\relation.sql","unique_id":"macro.dbt.get_or_create_relation","macro_sql":"{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string, string) -> tuple[bool, relation]","args":[{"name":"database","is_optional":false},{"name":"schema","is_optional":false},{"name":"identifier","is_optional":false},{"name":"type","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_powers_of_two":{"name":"get_powers_of_two","package_name":"dbt","path":"macros\\utils\\generate_series.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\generate_series.sql","unique_id":"macro.dbt.get_powers_of_two","macro_sql":"{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"upper_bound","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_quoted_csv":{"name":"get_quoted_csv","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\column_helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\column_helpers.sql","unique_id":"macro.dbt.get_quoted_csv","macro_sql":"{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[string]) -> string","args":[{"name":"column_names","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_relation_last_modified":{"name":"get_relation_last_modified","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.get_relation_last_modified","macro_sql":"{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(information_schema, list[relation]) -> agate_table","args":[{"name":"information_schema","is_optional":false},{"name":"relations","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_relations":{"name":"get_relations","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.get_relations","macro_sql":"{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> list[relation]","resource_type":"macro"},"macro.dbt.get_relations_by_pattern_internal":{"name":"get_relations_by_pattern_internal","package_name":"dbt","path":"macros\\relations\\get_relations_by_pattern.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\get_relations_by_pattern.sql","unique_id":"macro.dbt.get_relations_by_pattern_internal","macro_sql":"{% macro get_relations_by_pattern_internal(schema_pattern, table_pattern, exclude='', database=target.database, quote_table=False, excluded_schemas=[]) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern_internal')(schema_pattern, table_pattern, exclude, database, quote_table, excluded_schemas)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string, string, boolean, list[ANY]) -> list[ANY]","args":[{"name":"schema_pattern","is_optional":false},{"name":"table_pattern","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true},{"name":"quote_table","is_optional":true},{"name":"excluded_schemas","is_optional":true}],"resource_type":"macro"},"macro.dbt.get_rename_intermediate_sql":{"name":"get_rename_intermediate_sql","package_name":"dbt","path":"macros\\relations\\rename_intermediate.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\rename_intermediate.sql","unique_id":"macro.dbt.get_rename_intermediate_sql","macro_sql":"{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_rename_materialized_view_sql":{"name":"get_rename_materialized_view_sql","package_name":"dbt","path":"macros\\relations\\materialized_view\\rename.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\materialized_view\\rename.sql","unique_id":"macro.dbt.get_rename_materialized_view_sql","macro_sql":"{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"new_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_rename_sql":{"name":"get_rename_sql","package_name":"dbt","path":"macros\\relations\\rename.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\rename.sql","unique_id":"macro.dbt.get_rename_sql","macro_sql":"{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, relation) -> string","args":[{"name":"relation","is_optional":false},{"name":"new_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_rename_table_sql":{"name":"get_rename_table_sql","package_name":"dbt","path":"macros\\relations\\table\\rename.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\table\\rename.sql","unique_id":"macro.dbt.get_rename_table_sql","macro_sql":"{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"new_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_rename_view_sql":{"name":"get_rename_view_sql","package_name":"dbt","path":"macros\\relations\\view\\rename.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\view\\rename.sql","unique_id":"macro.dbt.get_rename_view_sql","macro_sql":"{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"new_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_replace_materialized_view_sql":{"name":"get_replace_materialized_view_sql","package_name":"dbt","path":"macros\\relations\\materialized_view\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\materialized_view\\replace.sql","unique_id":"macro.dbt.get_replace_materialized_view_sql","macro_sql":"{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_replace_sql":{"name":"get_replace_sql","package_name":"dbt","path":"macros\\relations\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\replace.sql","unique_id":"macro.dbt.get_replace_sql","macro_sql":"{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, relation, string) -> string","args":[{"name":"existing_relation","is_optional":false},{"name":"target_relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_replace_table_sql":{"name":"get_replace_table_sql","package_name":"dbt","path":"macros\\relations\\table\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\table\\replace.sql","unique_id":"macro.dbt.get_replace_table_sql","macro_sql":"{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_replace_view_sql":{"name":"get_replace_view_sql","package_name":"dbt","path":"macros\\relations\\view\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\view\\replace.sql","unique_id":"macro.dbt.get_replace_view_sql","macro_sql":"{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_revoke_sql":{"name":"get_revoke_sql","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.get_revoke_sql","macro_sql":"{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string, list[string]) -> string","args":[{"name":"relation","is_optional":false},{"name":"privilege","is_optional":false},{"name":"grantees","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_seed_column_quoted_csv":{"name":"get_seed_column_quoted_csv","package_name":"dbt","path":"macros\\materializations\\seeds\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\seeds\\helpers.sql","unique_id":"macro.dbt.get_seed_column_quoted_csv","macro_sql":"{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(model, list[string]) -> string","args":[{"name":"model","is_optional":false},{"name":"column_names","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_select_subquery":{"name":"get_select_subquery","package_name":"dbt","path":"macros\\relations\\table\\create.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\table\\create.sql","unique_id":"macro.dbt.get_select_subquery","macro_sql":"{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_show_grant_sql":{"name":"get_show_grant_sql","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.get_show_grant_sql","macro_sql":"{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_show_indexes_sql":{"name":"get_show_indexes_sql","package_name":"dbt","path":"macros\\adapters\\indexes.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\indexes.sql","unique_id":"macro.dbt.get_show_indexes_sql","macro_sql":"{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_show_sql":{"name":"get_show_sql","package_name":"dbt","path":"macros\\adapters\\show.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\show.sql","unique_id":"macro.dbt.get_show_sql","macro_sql":"{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, optional[integer]) -> string","args":[{"name":"compiled_code","is_optional":false},{"name":"sql_header","is_optional":false},{"name":"limit","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_snapshot_get_time_data_type":{"name":"get_snapshot_get_time_data_type","package_name":"dbt","path":"macros\\adapters\\timestamps.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\timestamps.sql","unique_id":"macro.dbt.get_snapshot_get_time_data_type","macro_sql":"{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> optional[string]","resource_type":"macro"},"macro.dbt.get_snapshot_table_column_names":{"name":"get_snapshot_table_column_names","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.get_snapshot_table_column_names","macro_sql":"{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> struct{dbt_valid_to: string, dbt_valid_from: string, dbt_scd_id: string, dbt_updated_at: string, dbt_is_deleted: string}","resource_type":"macro"},"macro.dbt.get_table_columns_and_constraints":{"name":"get_table_columns_and_constraints","package_name":"dbt","path":"macros\\relations\\column\\columns_spec_ddl.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\column\\columns_spec_ddl.sql","unique_id":"macro.dbt.get_table_columns_and_constraints","macro_sql":"{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.get_table_types_sql":{"name":"get_table_types_sql","package_name":"dbt","path":"macros\\relations\\get_table_types_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\get_table_types_sql.sql","unique_id":"macro.dbt.get_table_types_sql","macro_sql":"{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.get_tables_by_pattern_sql":{"name":"get_tables_by_pattern_sql","package_name":"dbt","path":"macros\\relations\\get_relations_by_pattern_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\get_relations_by_pattern_sql.sql","unique_id":"macro.dbt.get_tables_by_pattern_sql","macro_sql":"{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string, string) -> string","args":[{"name":"schema_pattern","is_optional":false},{"name":"table_pattern","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true}],"resource_type":"macro"},"macro.dbt.get_test_sql":{"name":"get_test_sql","package_name":"dbt","path":"macros\\materializations\\tests\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\tests\\helpers.sql","unique_id":"macro.dbt.get_test_sql","macro_sql":"{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string, string, optional[integer]) -> string","args":[{"name":"main_sql","is_optional":false},{"name":"fail_calc","is_optional":false},{"name":"warn_if","is_optional":false},{"name":"error_if","is_optional":false},{"name":"limit","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_true_sql":{"name":"get_true_sql","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.get_true_sql","macro_sql":"{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.get_unit_test_sql":{"name":"get_unit_test_sql","package_name":"dbt","path":"macros\\materializations\\tests\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\tests\\helpers.sql","unique_id":"macro.dbt.get_unit_test_sql","macro_sql":"{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, list[string]) -> string","args":[{"name":"main_sql","is_optional":false},{"name":"expected_fixture_sql","is_optional":false},{"name":"expected_column_names","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_updated_at_column_data_type":{"name":"get_updated_at_column_data_type","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.get_updated_at_column_data_type","macro_sql":"{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"snapshot_sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.get_where_subquery":{"name":"get_where_subquery","package_name":"dbt","path":"macros\\materializations\\tests\\where_subquery.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\tests\\where_subquery.sql","unique_id":"macro.dbt.get_where_subquery","macro_sql":"{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.handle_existing_table":{"name":"handle_existing_table","package_name":"dbt","path":"macros\\relations\\view\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\view\\replace.sql","unique_id":"macro.dbt.handle_existing_table","macro_sql":"{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"full_refresh","is_optional":false},{"name":"old_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.hash":{"name":"hash","package_name":"dbt","path":"macros\\utils\\hash.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\hash.sql","unique_id":"macro.dbt.hash","macro_sql":"{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field","is_optional":false}],"resource_type":"macro"},"macro.dbt.in_transaction":{"name":"in_transaction","package_name":"dbt","path":"macros\\materializations\\hooks.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\hooks.sql","unique_id":"macro.dbt.in_transaction","macro_sql":"{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.incremental_validate_on_schema_change":{"name":"incremental_validate_on_schema_change","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\on_schema_change.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\on_schema_change.sql","unique_id":"macro.dbt.incremental_validate_on_schema_change","macro_sql":"{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, optional[string]) -> string","args":[{"name":"on_schema_change","is_optional":false},{"name":"default","is_optional":true}],"resource_type":"macro"},"macro.dbt.information_schema_name":{"name":"information_schema_name","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.information_schema_name","macro_sql":"{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"database","is_optional":false}],"resource_type":"macro"},"macro.dbt.intersect":{"name":"intersect","package_name":"dbt","path":"macros\\utils\\intersect.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\intersect.sql","unique_id":"macro.dbt.intersect","macro_sql":"{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.is_incremental":{"name":"is_incremental","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\is_incremental.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\is_incremental.sql","unique_id":"macro.dbt.is_incremental","macro_sql":"{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> bool","resource_type":"macro"},"macro.dbt.last_day":{"name":"last_day","package_name":"dbt","path":"macros\\utils\\last_day.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\last_day.sql","unique_id":"macro.dbt.last_day","macro_sql":"{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"date","is_optional":false},{"name":"datepart","is_optional":false}],"resource_type":"macro"},"macro.dbt.length":{"name":"length","package_name":"dbt","path":"macros\\utils\\length.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\length.sql","unique_id":"macro.dbt.length","macro_sql":"{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"expression","is_optional":false}],"resource_type":"macro"},"macro.dbt.list_relations_without_caching":{"name":"list_relations_without_caching","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.list_relations_without_caching","macro_sql":"{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> list[relation]","args":[{"name":"schema_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.list_schemas":{"name":"list_schemas","package_name":"dbt","path":"macros\\adapters\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\metadata.sql","unique_id":"macro.dbt.list_schemas","macro_sql":"{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> agate_table","args":[{"name":"database","is_optional":false}],"resource_type":"macro"},"macro.dbt.listagg":{"name":"listagg","package_name":"dbt","path":"macros\\utils\\listagg.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\listagg.sql","unique_id":"macro.dbt.listagg","macro_sql":"{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"measure","is_optional":false},{"name":"delimiter_text","is_optional":true},{"name":"order_by_clause","is_optional":true},{"name":"limit_num","is_optional":true}],"resource_type":"macro"},"macro.dbt.load_cached_relation":{"name":"load_cached_relation","package_name":"dbt","path":"macros\\adapters\\relation.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\relation.sql","unique_id":"macro.dbt.load_cached_relation","macro_sql":"{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> optional[relation]","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.load_csv_rows":{"name":"load_csv_rows","package_name":"dbt","path":"macros\\materializations\\seeds\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\seeds\\helpers.sql","unique_id":"macro.dbt.load_csv_rows","macro_sql":"{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(model, agate_table) -> string","args":[{"name":"model","is_optional":false},{"name":"agate_table","is_optional":false}],"resource_type":"macro"},"macro.dbt.load_relation":{"name":"load_relation","package_name":"dbt","path":"macros\\adapters\\relation.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\relation.sql","unique_id":"macro.dbt.load_relation","macro_sql":"{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> optional[relation]","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.make_backup_relation":{"name":"make_backup_relation","package_name":"dbt","path":"macros\\adapters\\relation.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\relation.sql","unique_id":"macro.dbt.make_backup_relation","macro_sql":"{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string, optional[string]) -> relation","args":[{"name":"base_relation","is_optional":false},{"name":"backup_relation_type","is_optional":false},{"name":"suffix","is_optional":true}],"resource_type":"macro"},"macro.dbt.make_hook_config":{"name":"make_hook_config","package_name":"dbt","path":"macros\\materializations\\hooks.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\hooks.sql","unique_id":"macro.dbt.make_hook_config","macro_sql":"{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, bool) -> string","args":[{"name":"sql","is_optional":false},{"name":"inside_transaction","is_optional":false}],"resource_type":"macro"},"macro.dbt.make_intermediate_relation":{"name":"make_intermediate_relation","package_name":"dbt","path":"macros\\adapters\\relation.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\relation.sql","unique_id":"macro.dbt.make_intermediate_relation","macro_sql":"{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, optional[string]) -> relation","args":[{"name":"base_relation","is_optional":false},{"name":"suffix","is_optional":true}],"resource_type":"macro"},"macro.dbt.make_temp_relation":{"name":"make_temp_relation","package_name":"dbt","path":"macros\\adapters\\relation.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\relation.sql","unique_id":"macro.dbt.make_temp_relation","macro_sql":"{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {#-- TYPE CHECK: model.batch is optional --#}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, optional[string]) -> relation","args":[{"name":"base_relation","is_optional":false},{"name":"suffix","is_optional":true}],"resource_type":"macro"},"macro.dbt.materialization_clone_default":{"name":"materialization_clone_default","package_name":"dbt","path":"macros\\materializations\\models\\clone\\clone.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\clone\\clone.sql","unique_id":"macro.dbt.materialization_clone_default","macro_sql":"{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %} -- noqa: Unknown local variable 'grant_config'\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.materialization_incremental_default":{"name":"materialization_incremental_default","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\incremental.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\incremental.sql","unique_id":"macro.dbt.materialization_incremental_default","macro_sql":"{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%} -- noqa: existing_relation could be None\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%} -- noqa: incremental_validate_on_schema_change 1st parameter is not nullable\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.materialization_materialized_view_default":{"name":"materialization_materialized_view_default","package_name":"dbt","path":"macros\\materializations\\models\\materialized_view.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\materialized_view.sql","unique_id":"macro.dbt.materialization_materialized_view_default","macro_sql":"{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.materialization_seed_default":{"name":"materialization_seed_default","package_name":"dbt","path":"macros\\materializations\\seeds\\seed.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\seeds\\seed.sql","unique_id":"macro.dbt.materialization_seed_default","macro_sql":"{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }} -- noqa: optional[relation] does not support render()\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %} -- noqa: optional[relation] as arguments\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %} -- noqa: Should accept a string instead of a integer\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.materialization_snapshot_default":{"name":"materialization_snapshot_default","package_name":"dbt","path":"macros\\materializations\\snapshots\\snapshot.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\snapshot.sql","unique_id":"macro.dbt.materialization_snapshot_default","macro_sql":"{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n\n  \n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.materialization_table_default":{"name":"materialization_table_default","package_name":"dbt","path":"macros\\materializations\\models\\table.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\table.sql","unique_id":"macro.dbt.materialization_table_default","macro_sql":"{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.materialization_test_default":{"name":"materialization_test_default","package_name":"dbt","path":"macros\\materializations\\tests\\test.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\tests\\test.sql","unique_id":"macro.dbt.materialization_test_default","macro_sql":"{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.materialization_unit_default":{"name":"materialization_unit_default","package_name":"dbt","path":"macros\\materializations\\tests\\unit.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\tests\\unit.sql","unique_id":"macro.dbt.materialization_unit_default","macro_sql":"{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %} -- noqa: operations may fail as expected_rows may be none\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.materialization_view_default":{"name":"materialization_view_default","package_name":"dbt","path":"macros\\materializations\\models\\view.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\view.sql","unique_id":"macro.dbt.materialization_view_default","macro_sql":"{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.materialized_view_execute_build_sql":{"name":"materialized_view_execute_build_sql","package_name":"dbt","path":"macros\\materializations\\models\\materialized_view.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\materialized_view.sql","unique_id":"macro.dbt.materialized_view_execute_build_sql","macro_sql":"{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, optional[relation], relation, list[hook]) -> string","args":[{"name":"build_sql","is_optional":false},{"name":"existing_relation","is_optional":false},{"name":"target_relation","is_optional":false},{"name":"post_hooks","is_optional":false}],"resource_type":"macro"},"macro.dbt.materialized_view_execute_no_op":{"name":"materialized_view_execute_no_op","package_name":"dbt","path":"macros\\materializations\\models\\materialized_view.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\materialized_view.sql","unique_id":"macro.dbt.materialized_view_execute_no_op","macro_sql":"{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"target_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.materialized_view_get_build_sql":{"name":"materialized_view_get_build_sql","package_name":"dbt","path":"macros\\materializations\\models\\materialized_view.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\materialized_view.sql","unique_id":"macro.dbt.materialized_view_get_build_sql","macro_sql":"{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change', 'apply') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[relation], relation, relation, relation) -> string","args":[{"name":"existing_relation","is_optional":false},{"name":"target_relation","is_optional":false},{"name":"backup_relation","is_optional":false},{"name":"intermediate_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.materialized_view_setup":{"name":"materialized_view_setup","package_name":"dbt","path":"macros\\materializations\\models\\materialized_view.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\materialized_view.sql","unique_id":"macro.dbt.materialized_view_setup","macro_sql":"{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, relation, list[hook]) -> string","args":[{"name":"backup_relation","is_optional":false},{"name":"intermediate_relation","is_optional":false},{"name":"pre_hooks","is_optional":false}],"resource_type":"macro"},"macro.dbt.materialized_view_teardown":{"name":"materialized_view_teardown","package_name":"dbt","path":"macros\\materializations\\models\\materialized_view.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\materialized_view.sql","unique_id":"macro.dbt.materialized_view_teardown","macro_sql":"{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[relation], optional[relation], list[hook]) -> string","args":[{"name":"backup_relation","is_optional":false},{"name":"intermediate_relation","is_optional":false},{"name":"post_hooks","is_optional":false}],"resource_type":"macro"},"macro.dbt.noop_statement":{"name":"noop_statement","package_name":"dbt","path":"macros\\etc\\statement.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\etc\\statement.sql","unique_id":"macro.dbt.noop_statement","macro_sql":"{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[string], optional[string], optional[string], optional[string], optional[agate_table]) -> string","args":[{"name":"name","is_optional":true},{"name":"message","is_optional":true},{"name":"code","is_optional":true},{"name":"rows_affected","is_optional":true},{"name":"res","is_optional":true}],"resource_type":"macro"},"macro.dbt.partition_range":{"name":"partition_range","package_name":"dbt","path":"macros\\etc\\datetime.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\etc\\datetime.sql","unique_id":"macro.dbt.partition_range","macro_sql":"{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, optional[string]) -> list[timestamp]","args":[{"name":"raw_partition_date","is_optional":false},{"name":"date_fmt","is_optional":true}],"resource_type":"macro"},"macro.dbt.persist_docs":{"name":"persist_docs","package_name":"dbt","path":"macros\\adapters\\persist_docs.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\persist_docs.sql","unique_id":"macro.dbt.persist_docs","macro_sql":"{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, model, optional[bool], optional[bool]) -> string","args":[{"name":"relation","is_optional":false},{"name":"model","is_optional":false},{"name":"for_relation","is_optional":true},{"name":"for_columns","is_optional":true}],"resource_type":"macro"},"macro.dbt.position":{"name":"position","package_name":"dbt","path":"macros\\utils\\position.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\position.sql","unique_id":"macro.dbt.position","macro_sql":"{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"substring_text","is_optional":false},{"name":"string_text","is_optional":false}],"resource_type":"macro"},"macro.dbt.post_snapshot":{"name":"post_snapshot","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.post_snapshot","macro_sql":"{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"staging_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.postgres__get_table_types_sql":{"name":"postgres__get_table_types_sql","package_name":"dbt","path":"macros\\relations\\get_table_types_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\get_table_types_sql.sql","unique_id":"macro.dbt.postgres__get_table_types_sql","macro_sql":"{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.process_schema_changes":{"name":"process_schema_changes","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\on_schema_change.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\on_schema_change.sql","unique_id":"macro.dbt.process_schema_changes","macro_sql":"{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }} -- noqa: return value should be list[base_column]\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, relation, relation) -> list[base_column]","args":[{"name":"on_schema_change","is_optional":false},{"name":"source_relation","is_optional":false},{"name":"target_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.py_current_timestring":{"name":"py_current_timestring","package_name":"dbt","path":"macros\\etc\\datetime.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\etc\\datetime.sql","unique_id":"macro.dbt.py_current_timestring","macro_sql":"{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.py_script_comment":{"name":"py_script_comment","package_name":"dbt","path":"macros\\python_model\\python.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\python_model\\python.sql","unique_id":"macro.dbt.py_script_comment","macro_sql":"{%macro py_script_comment()%}\n{%endmacro%}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.py_script_postfix":{"name":"py_script_postfix","package_name":"dbt","path":"macros\\python_model\\python.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\python_model\\python.sql","unique_id":"macro.dbt.py_script_postfix","macro_sql":"{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> string:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false}],"resource_type":"macro"},"macro.dbt.redshift__get_tables_by_pattern_sql":{"name":"redshift__get_tables_by_pattern_sql","package_name":"dbt","path":"macros\\relations\\get_relations_by_pattern_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\get_relations_by_pattern_sql.sql","unique_id":"macro.dbt.redshift__get_tables_by_pattern_sql","macro_sql":"{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ adapter.dispatch('get_table_types_sql')() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string, string) -> string","args":[{"name":"schema_pattern","is_optional":false},{"name":"table_pattern","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true}],"resource_type":"macro"},"macro.dbt.redshift__t_database_name":{"name":"redshift__t_database_name","package_name":"dbt","path":"macros\\internal\\test\\names.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\internal\\test\\names.sql","unique_id":"macro.dbt.redshift__t_database_name","macro_sql":"{% macro redshift__t_database_name() %}\n  {{ return(env_var('REDSHIFT_DATABASE')) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.refresh_materialized_view":{"name":"refresh_materialized_view","package_name":"dbt","path":"macros\\relations\\materialized_view\\refresh.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\materialized_view\\refresh.sql","unique_id":"macro.dbt.refresh_materialized_view","macro_sql":"{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.rename_relation":{"name":"rename_relation","package_name":"dbt","path":"macros\\relations\\rename.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\rename.sql","unique_id":"macro.dbt.rename_relation","macro_sql":"{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, relation) -> string","args":[{"name":"from_relation","is_optional":false},{"name":"to_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.replace":{"name":"replace","package_name":"dbt","path":"macros\\utils\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\replace.sql","unique_id":"macro.dbt.replace","macro_sql":"{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field","is_optional":false},{"name":"old_chars","is_optional":false},{"name":"new_chars","is_optional":false}],"resource_type":"macro"},"macro.dbt.reset_csv_table":{"name":"reset_csv_table","package_name":"dbt","path":"macros\\materializations\\seeds\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\seeds\\helpers.sql","unique_id":"macro.dbt.reset_csv_table","macro_sql":"{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(model, bool, relation, agate_table) -> string","args":[{"name":"model","is_optional":false},{"name":"full_refresh","is_optional":false},{"name":"old_relation","is_optional":false},{"name":"agate_table","is_optional":false}],"resource_type":"macro"},"macro.dbt.resolve_model_name":{"name":"resolve_model_name","package_name":"dbt","path":"macros\\python_model\\python.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\python_model\\python.sql","unique_id":"macro.dbt.resolve_model_name","macro_sql":"{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"input_model_name","is_optional":false}],"resource_type":"macro"},"macro.dbt.right":{"name":"right","package_name":"dbt","path":"macros\\utils\\right.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\right.sql","unique_id":"macro.dbt.right","macro_sql":"{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"string_text","is_optional":false},{"name":"length_expression","is_optional":false}],"resource_type":"macro"},"macro.dbt.run_hooks":{"name":"run_hooks","package_name":"dbt","path":"macros\\materializations\\hooks.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\hooks.sql","unique_id":"macro.dbt.run_hooks","macro_sql":"{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[hook], optional[bool]) -> string","args":[{"name":"hooks","is_optional":false},{"name":"inside_transaction","is_optional":true}],"resource_type":"macro"},"macro.dbt.run_query":{"name":"run_query","package_name":"dbt","path":"macros\\etc\\statement.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\etc\\statement.sql","unique_id":"macro.dbt.run_query","macro_sql":"{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> agate_table","args":[{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt.safe_cast":{"name":"safe_cast","package_name":"dbt","path":"macros\\utils\\safe_cast.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\safe_cast.sql","unique_id":"macro.dbt.safe_cast","macro_sql":"{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string) -> string","args":[{"name":"field","is_optional":false},{"name":"type","is_optional":false}],"resource_type":"macro"},"macro.dbt.set_sql_header":{"name":"set_sql_header","package_name":"dbt","path":"macros\\materializations\\configs.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\configs.sql","unique_id":"macro.dbt.set_sql_header","macro_sql":"{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(config) -> string","args":[{"name":"config","is_optional":false}],"resource_type":"macro"},"macro.dbt.should_full_refresh":{"name":"should_full_refresh","package_name":"dbt","path":"macros\\materializations\\configs.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\configs.sql","unique_id":"macro.dbt.should_full_refresh","macro_sql":"{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> bool","resource_type":"macro"},"macro.dbt.should_revoke":{"name":"should_revoke","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.should_revoke","macro_sql":"{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[relation], optional[bool]) -> bool","args":[{"name":"existing_relation","is_optional":false},{"name":"full_refresh_mode","is_optional":true}],"resource_type":"macro"},"macro.dbt.should_store_failures":{"name":"should_store_failures","package_name":"dbt","path":"macros\\materializations\\configs.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\configs.sql","unique_id":"macro.dbt.should_store_failures","macro_sql":"{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> bool","resource_type":"macro"},"macro.dbt.snapshot_check_all_get_existing_columns":{"name":"snapshot_check_all_get_existing_columns","package_name":"dbt","path":"macros\\materializations\\snapshots\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\strategies.sql","unique_id":"macro.dbt.snapshot_check_all_get_existing_columns","macro_sql":"{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%} -- noqa: should be a relation instead of an optional[string]\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(model, bool, list[string]|string) -> tuple[bool, list[base_column]]","args":[{"name":"node","is_optional":false},{"name":"target_exists","is_optional":false},{"name":"check_cols_config","is_optional":false}],"resource_type":"macro"},"macro.dbt.snapshot_check_strategy":{"name":"snapshot_check_strategy","package_name":"dbt","path":"macros\\materializations\\snapshots\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\strategies.sql","unique_id":"macro.dbt.snapshot_check_strategy","macro_sql":"{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %} -- noqa: check_cols_config is a string|list[string]|none\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %} -- noqa: primary_key is a string|list[string]|none\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(model, string, string, config, bool) -> struct{unique_key: list[string]|string|none, updated_at: string, row_changed: string, scd_id: string, invalidate_hard_deletes: bool, hard_deletes: string}","args":[{"name":"node","is_optional":false},{"name":"snapshotted_rel","is_optional":false},{"name":"current_rel","is_optional":false},{"name":"model_config","is_optional":false},{"name":"target_exists","is_optional":false}],"resource_type":"macro"},"macro.dbt.snapshot_get_time":{"name":"snapshot_get_time","package_name":"dbt","path":"macros\\adapters\\timestamps.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\timestamps.sql","unique_id":"macro.dbt.snapshot_get_time","macro_sql":"{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.snapshot_hash_arguments":{"name":"snapshot_hash_arguments","package_name":"dbt","path":"macros\\materializations\\snapshots\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\strategies.sql","unique_id":"macro.dbt.snapshot_hash_arguments","macro_sql":"{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[string]) -> string","args":[{"name":"args","is_optional":false}],"resource_type":"macro"},"macro.dbt.snapshot_merge_sql":{"name":"snapshot_merge_sql","package_name":"dbt","path":"macros\\materializations\\snapshots\\snapshot_merge.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\snapshot_merge.sql","unique_id":"macro.dbt.snapshot_merge_sql","macro_sql":"{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string, list[string]) -> string","args":[{"name":"target","is_optional":false},{"name":"source","is_optional":false},{"name":"insert_cols","is_optional":false}],"resource_type":"macro"},"macro.dbt.snapshot_staging_table":{"name":"snapshot_staging_table","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.snapshot_staging_table","macro_sql":"{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(strategy, string, relation) -> string","args":[{"name":"strategy","is_optional":false},{"name":"source_sql","is_optional":false},{"name":"target_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.snapshot_string_as_time":{"name":"snapshot_string_as_time","package_name":"dbt","path":"macros\\materializations\\snapshots\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\strategies.sql","unique_id":"macro.dbt.snapshot_string_as_time","macro_sql":"{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(timestamp) -> string","args":[{"name":"timestamp","is_optional":false}],"resource_type":"macro"},"macro.dbt.snapshot_timestamp_strategy":{"name":"snapshot_timestamp_strategy","package_name":"dbt","path":"macros\\materializations\\snapshots\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\strategies.sql","unique_id":"macro.dbt.snapshot_timestamp_strategy","macro_sql":"{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %} -- noqa: updated_at should be a string\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"node","is_optional":false},{"name":"snapshotted_rel","is_optional":false},{"name":"current_rel","is_optional":false},{"name":"model_config","is_optional":false},{"name":"target_exists","is_optional":false}],"resource_type":"macro"},"macro.dbt.split_part":{"name":"split_part","package_name":"dbt","path":"macros\\utils\\split_part.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\split_part.sql","unique_id":"macro.dbt.split_part","macro_sql":"{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, int) -> string","args":[{"name":"string_text","is_optional":false},{"name":"delimiter_text","is_optional":false},{"name":"part_number","is_optional":false}],"resource_type":"macro"},"macro.dbt.sql_convert_columns_in_relation":{"name":"sql_convert_columns_in_relation","package_name":"dbt","path":"macros\\adapters\\columns.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\columns.sql","unique_id":"macro.dbt.sql_convert_columns_in_relation","macro_sql":"{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(agate_table) -> list[api.column]","args":[{"name":"table","is_optional":false}],"resource_type":"macro"},"macro.dbt.statement":{"name":"statement","package_name":"dbt","path":"macros\\etc\\statement.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\etc\\statement.sql","unique_id":"macro.dbt.statement","macro_sql":"{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[string], optional[bool], optional[bool], optional[string]) -> string","args":[{"name":"name","is_optional":true},{"name":"fetch_result","is_optional":true},{"name":"auto_begin","is_optional":true},{"name":"language","is_optional":true}],"resource_type":"macro"},"macro.dbt.strategy_dispatch":{"name":"strategy_dispatch","package_name":"dbt","path":"macros\\materializations\\snapshots\\strategies.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\strategies.sql","unique_id":"macro.dbt.strategy_dispatch","macro_sql":"{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> (model, string, string, model.config, bool) -> strategy","args":[{"name":"name","is_optional":false}],"resource_type":"macro"},"macro.dbt.string_literal":{"name":"string_literal","package_name":"dbt","path":"macros\\utils\\literal.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\literal.sql","unique_id":"macro.dbt.string_literal","macro_sql":"{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"value","is_optional":false}],"resource_type":"macro"},"macro.dbt.support_multiple_grantees_per_dcl_statement":{"name":"support_multiple_grantees_per_dcl_statement","package_name":"dbt","path":"macros\\adapters\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\apply_grants.sql","unique_id":"macro.dbt.support_multiple_grantees_per_dcl_statement","macro_sql":"{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> bool","resource_type":"macro"},"macro.dbt.sync_column_schemas":{"name":"sync_column_schemas","package_name":"dbt","path":"macros\\materializations\\models\\incremental\\on_schema_change.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\models\\incremental\\on_schema_change.sql","unique_id":"macro.dbt.sync_column_schemas","macro_sql":"{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, relation, struct{schema_changed: bool, source_not_in_target: list[base_column], target_not_in_source: list[base_column], source_columns: list[base_column], target_columns: list[base_column], new_target_types: list[dict[string, string]]}) -> string","args":[{"name":"on_schema_change","is_optional":false},{"name":"target_relation","is_optional":false},{"name":"schema_changes_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt.t_database_name":{"name":"t_database_name","package_name":"dbt","path":"macros\\internal\\test\\names.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\internal\\test\\names.sql","unique_id":"macro.dbt.t_database_name","macro_sql":"{% macro t_database_name() %}\n  {{ return (adapter.dispatch(\"t_database_name\")()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.t_schema_name":{"name":"t_schema_name","package_name":"dbt","path":"macros\\internal\\test\\names.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\internal\\test\\names.sql","unique_id":"macro.dbt.t_schema_name","macro_sql":"{% macro t_schema_name() %}\n  {{ return(target.schema) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.table_columns_and_constraints":{"name":"table_columns_and_constraints","package_name":"dbt","path":"macros\\relations\\column\\columns_spec_ddl.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\relations\\column\\columns_spec_ddl.sql","unique_id":"macro.dbt.table_columns_and_constraints","macro_sql":"{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.test_accepted_values":{"name":"test_accepted_values","package_name":"dbt","path":"tests\\generic\\builtin.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\tests\\generic\\builtin.sql","unique_id":"macro.dbt.test_accepted_values","macro_sql":"{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.test_not_null":{"name":"test_not_null","package_name":"dbt","path":"tests\\generic\\builtin.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\tests\\generic\\builtin.sql","unique_id":"macro.dbt.test_not_null","macro_sql":"{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.test_relationships":{"name":"test_relationships","package_name":"dbt","path":"tests\\generic\\builtin.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\tests\\generic\\builtin.sql","unique_id":"macro.dbt.test_relationships","macro_sql":"{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.test_unique":{"name":"test_unique","package_name":"dbt","path":"tests\\generic\\builtin.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\tests\\generic\\builtin.sql","unique_id":"macro.dbt.test_unique","macro_sql":"{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.truncate_relation":{"name":"truncate_relation","package_name":"dbt","path":"macros\\adapters\\relation.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\relation.sql","unique_id":"macro.dbt.truncate_relation","macro_sql":"{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt.type_bigint":{"name":"type_bigint","package_name":"dbt","path":"macros\\utils\\data_types.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\data_types.sql","unique_id":"macro.dbt.type_bigint","macro_sql":"{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.type_boolean":{"name":"type_boolean","package_name":"dbt","path":"macros\\utils\\data_types.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\data_types.sql","unique_id":"macro.dbt.type_boolean","macro_sql":"{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.type_float":{"name":"type_float","package_name":"dbt","path":"macros\\utils\\data_types.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\data_types.sql","unique_id":"macro.dbt.type_float","macro_sql":"{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.type_int":{"name":"type_int","package_name":"dbt","path":"macros\\utils\\data_types.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\data_types.sql","unique_id":"macro.dbt.type_int","macro_sql":"{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.type_numeric":{"name":"type_numeric","package_name":"dbt","path":"macros\\utils\\data_types.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\data_types.sql","unique_id":"macro.dbt.type_numeric","macro_sql":"{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt.type_string":{"name":"type_string","package_name":"dbt","path":"macros\\utils\\data_types.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\data_types.sql","unique_id":"macro.dbt.type_string","macro_sql":"{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.type_timestamp":{"name":"type_timestamp","package_name":"dbt","path":"macros\\utils\\data_types.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\utils\\data_types.sql","unique_id":"macro.dbt.type_timestamp","macro_sql":"{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt.unique_key_fields":{"name":"unique_key_fields","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.unique_key_fields","macro_sql":"{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string|list[string]|none) -> string","args":[{"name":"unique_key","is_optional":false}],"resource_type":"macro"},"macro.dbt.unique_key_is_not_null":{"name":"unique_key_is_not_null","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.unique_key_is_not_null","macro_sql":"{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string|list[string]|none, string) -> string","args":[{"name":"unique_key","is_optional":false},{"name":"identifier","is_optional":false}],"resource_type":"macro"},"macro.dbt.unique_key_is_null":{"name":"unique_key_is_null","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.unique_key_is_null","macro_sql":"{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string|list[string]|none, string) -> string","args":[{"name":"unique_key","is_optional":false},{"name":"identifier","is_optional":false}],"resource_type":"macro"},"macro.dbt.unique_key_join_on":{"name":"unique_key_join_on","package_name":"dbt","path":"macros\\materializations\\snapshots\\helpers.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\materializations\\snapshots\\helpers.sql","unique_id":"macro.dbt.unique_key_join_on","macro_sql":"{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string|list[string]|none, string, string) -> string","args":[{"name":"unique_key","is_optional":false},{"name":"identifier","is_optional":false},{"name":"from_identifier","is_optional":false}],"resource_type":"macro"},"macro.dbt.validate_fixture_rows":{"name":"validate_fixture_rows","package_name":"dbt","path":"macros\\unit_test_sql\\get_fixture_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\unit_test_sql\\get_fixture_sql.sql","unique_id":"macro.dbt.validate_fixture_rows","macro_sql":"{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[list[ANY]], integer) -> string","args":[{"name":"rows","is_optional":false},{"name":"row_number","is_optional":false}],"resource_type":"macro"},"macro.dbt.validate_sql":{"name":"validate_sql","package_name":"dbt","path":"macros\\adapters\\validate_sql.sql","original_file_path":"dbt_internal_packages\\dbt-adapters\\macros\\adapters\\validate_sql.sql","unique_id":"macro.dbt.validate_sql","macro_sql":"{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> agate_table","args":[{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.adapter_supports_rely_norely":{"name":"adapter_supports_rely_norely","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.adapter_supports_rely_norely","macro_sql":"{%- macro adapter_supports_rely_norely(test_name) -%}\n    {{ return(adapter.dispatch('adapter_supports_rely_norely', 'dbt_constraints')(test_name)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"test_name","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.bigquery__create_foreign_key":{"name":"bigquery__create_foreign_key","package_name":"dbt_constraints","path":"macros\\bigquery__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\bigquery__create_constraints.sql","unique_id":"macro.dbt_constraints.bigquery__create_foreign_key","macro_sql":"{%- macro bigquery__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- set query -%}\n                --Note: ON DELETE not supported in Bigquery\n                ALTER TABLE {{ fk_table_relation }} ADD FOREIGN KEY({{ fk_columns_csv }} ) REFERENCES {{ pk_table_relation }}( {{ pk_columns_csv }} ) NOT ENFORCED\n                 {%- endset -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"pk_table_relation","is_optional":false},{"name":"pk_column_names","is_optional":false},{"name":"fk_table_relation","is_optional":false},{"name":"fk_column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.bigquery__create_not_null":{"name":"bigquery__create_not_null","package_name":"dbt_constraints","path":"macros\\bigquery__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\bigquery__create_constraints.sql","unique_id":"macro.dbt_constraints.bigquery__create_not_null","macro_sql":"{%- macro bigquery__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because ALTER COLUMN SET NOT NULL is not supported\", info=true) -%}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.bigquery__create_primary_key":{"name":"bigquery__create_primary_key","package_name":"dbt_constraints","path":"macros\\bigquery__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\bigquery__create_constraints.sql","unique_id":"macro.dbt_constraints.bigquery__create_primary_key","macro_sql":"{%- macro bigquery__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{ table_relation }} ADD PRIMARY KEY ( {{ columns_csv }} ) NOT ENFORCED\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.bigquery__create_unique_key":{"name":"bigquery__create_unique_key","package_name":"dbt_constraints","path":"macros\\bigquery__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\bigquery__create_constraints.sql","unique_id":"macro.dbt_constraints.bigquery__create_unique_key","macro_sql":"{%- macro bigquery__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- do log(\"Skipping unique constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because ALTER COLUMN SET UNIQUE is not supported\", info=true) -%}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.bigquery__drop_referential_constraints":{"name":"bigquery__drop_referential_constraints","package_name":"dbt_constraints","path":"macros\\bigquery__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\bigquery__create_constraints.sql","unique_id":"macro.dbt_constraints.bigquery__drop_referential_constraints","macro_sql":"{% macro bigquery__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from {{table_relation.schema}}.INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- set query -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT \"{{constraint_name}}\"\n        {%- endset -%}\n        {%- do run_query(query) -%}\n    {% endfor %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.bigquery__drop_relation":{"name":"bigquery__drop_relation","package_name":"dbt_constraints","path":"macros\\bigquery__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\bigquery__create_constraints.sql","unique_id":"macro.dbt_constraints.bigquery__drop_relation","macro_sql":"{% macro bigquery__drop_relation(relation) -%}\n    {{ bigquery__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.bigquery__foreign_key_exists":{"name":"bigquery__foreign_key_exists","package_name":"dbt_constraints","path":"macros\\bigquery__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\bigquery__create_constraints.sql","unique_id":"macro.dbt_constraints.bigquery__foreign_key_exists","macro_sql":"{%- macro bigquery__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name fk_name\n        , lower(kc.column_name) as fk_column_name\n    FROM {{table_relation.schema}}.INFORMATION_SCHEMA.KEY_COLUMN_USAGE kc\n        JOIN {{table_relation.schema}}.INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type='FOREIGN KEY'\n        AND kc.table_schema like '{{table_relation.schema}}'\n        AND kc.table_name like '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.bigquery__have_ownership_priv":{"name":"bigquery__have_ownership_priv","package_name":"dbt_constraints","path":"macros\\bigquery__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\bigquery__create_constraints.sql","unique_id":"macro.dbt_constraints.bigquery__have_ownership_priv","macro_sql":"{%- macro bigquery__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        with union_obj_priv as (\n            -- Union together all project priveleges & table.  Specific to BQ permissions inherritence.\n            select * \n            from {{table_relation.database}}.`region-{{ rel_location }}`.INFORMATION_SCHEMA.OBJECT_PRIVILEGES\n            where (upper(object_schema) = upper('{{table_relation.schema}}') and upper(object_name) = upper('{{table_relation.identifier}}')) \n            union all\n            select * \n            from {{table_relation.database}}.`region-{{ rel_location }}`.INFORMATION_SCHEMA.OBJECT_PRIVILEGES\n            where object_name= '{{table_relation.schema}}'\n        )\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from union_obj_priv\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.bigquery__have_references_priv":{"name":"bigquery__have_references_priv","package_name":"dbt_constraints","path":"macros\\bigquery__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\bigquery__create_constraints.sql","unique_id":"macro.dbt_constraints.bigquery__have_references_priv","macro_sql":"{%- macro bigquery__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n        {% set rel_location = adapter.get_dataset_location(table_relation) %}\n\n        {%- set lookup_query -%}\n        with union_obj_priv as (\n            -- Union together all project priveleges & table.  Specific to BQ permissions inherritence.\n            select * \n            from {{table_relation.database}}.`region-{{ rel_location }}`.INFORMATION_SCHEMA.OBJECT_PRIVILEGES\n            where (upper(object_schema) = upper('{{table_relation.schema}}') and upper(object_name) = upper('{{table_relation.identifier}}')) \n            union all\n            select * \n            from {{table_relation.database}}.`region-{{ rel_location }}`.INFORMATION_SCHEMA.OBJECT_PRIVILEGES\n            where object_name= '{{table_relation.schema}}'\n        )\n        select case when count(*) > 0 then 'y' else 'n' end as have_references\n        from union_obj_priv\n        where upper(t.table_schema) = upper('')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.bigquery__truncate_relation":{"name":"bigquery__truncate_relation","package_name":"dbt_constraints","path":"macros\\bigquery__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\bigquery__create_constraints.sql","unique_id":"macro.dbt_constraints.bigquery__truncate_relation","macro_sql":"{% macro bigquery__truncate_relation(relation) -%}\n    {{ bigquery__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.bigquery__unique_constraint_exists":{"name":"bigquery__unique_constraint_exists","package_name":"dbt_constraints","path":"macros\\bigquery__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\bigquery__create_constraints.sql","unique_id":"macro.dbt_constraints.bigquery__unique_constraint_exists","macro_sql":"{%- macro bigquery__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name\n        , lower(kc.column_name) as column_name\n    FROM {{table_relation.schema}}.INFORMATION_SCHEMA.KEY_COLUMN_USAGE kc\n        JOIN {{table_relation.schema}}.INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type in ('PRIMARY KEY', 'UNIQUE')\n        AND kc.table_schema like '{{table_relation.schema}}'\n        AND kc.table_name like '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.column_list_matches":{"name":"column_list_matches","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.column_list_matches","macro_sql":"{%- macro column_list_matches(listA, listB) -%}\n    {%- set testListA = listA | map('upper') | map('trim', '\"') | list -%}\n    {%- set testListB = listB | map('upper') | map('trim', '\"') | list -%}\n    {# Test if A is empty or the lists are not the same size #}\n    {%- if listA | count > 0 and listA | count == listB | count  -%}\n        {# Fail if there are any columns in A that are not in B #}\n        {%- for valueFromA in testListA -%}\n            {%- if valueFromA not in testListB  -%}\n                {{ return(false) }}\n            {%- endif -%}\n        {% endfor %}\n        {# Since we know the count is the same, A must equal B #}\n        {{ return(true) }}\n    {%- else -%}\n        {{ return(false) }}\n    {%- endif -%}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"listA","is_optional":false},{"name":"listB","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.create_constraints":{"name":"create_constraints","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.create_constraints","macro_sql":"{%- macro create_constraints(\n        constraint_types=[\n            'primary_key',\n            'unique_key',\n            'unique_combination_of_columns',\n            'unique',\n            'foreign_key',\n            'relationships',\n            'not_null'],\n        quote_columns=false) -%}\n    {%- if execute and var('dbt_constraints_enabled', \"false\")|string|lower == \"true\" and results -%}\n        {%- do log(\"Running dbt Constraints\", info=true) -%}\n\n        {%- set lookup_cache = {\n            \"table_columns\": { },\n            \"table_privileges\": { },\n            \"unique_keys\": { },\n            \"not_null_col\": { },\n            \"semi_structured_col\": { },\n            \"foreign_keys\": { } } -%}\n\n        {%- if 'not_null' in constraint_types and var('dbt_constraints_nn_enabled', \"true\")|string|lower == \"true\" -%}\n            {%- do dbt_constraints.create_constraints_by_type(['not_null'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'primary_key' in constraint_types and var('dbt_constraints_pk_enabled', \"true\")|string|lower == \"true\" -%}\n            {%- do dbt_constraints.create_constraints_by_type(['primary_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_key' in constraint_types and var('dbt_constraints_uk_enabled', \"true\")|string|lower == \"true\" -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_combination_of_columns' in constraint_types and var('dbt_constraints_uk_enabled', \"true\")|string|lower == \"true\" -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_combination_of_columns'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique' in constraint_types and var('dbt_constraints_uk_enabled', \"true\")|string|lower == \"true\" -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'foreign_key' in constraint_types and var('dbt_constraints_fk_enabled', \"true\")|string|lower == \"true\" -%}\n            {%- do dbt_constraints.create_constraints_by_type(['foreign_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'relationships' in constraint_types and var('dbt_constraints_fk_enabled', \"true\")|string|lower == \"true\" -%}\n            {%- do dbt_constraints.create_constraints_by_type(['relationships'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n\n        {%- do log(\"Finished dbt Constraints\", info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"constraint_types","is_optional":true},{"name":"quote_columns","is_optional":true}],"resource_type":"macro"},"macro.dbt_constraints.create_constraints_by_type":{"name":"create_constraints_by_type","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.create_constraints_by_type","macro_sql":"{%- macro create_constraints_by_type(constraint_types, quote_columns, lookup_cache) -%}\n\n    {#- Global settings -#}\n    {%- set dbt_constraints_sources_enabled = var('dbt_constraints_sources_enabled', \"false\")|string|lower == \"true\" %}\n    {%- set dbt_constraints_sources_pk_enabled = var('dbt_constraints_sources_pk_enabled', \"false\")|string|lower == \"true\" %}\n    {%- set dbt_constraints_sources_uk_enabled = var('dbt_constraints_sources_uk_enabled', \"false\")|string|lower == \"true\" %}\n    {%- set dbt_constraints_sources_fk_enabled = var('dbt_constraints_sources_fk_enabled', \"false\")|string|lower == \"true\" %}\n    {%- set dbt_constraints_sources_nn_enabled = var('dbt_constraints_sources_nn_enabled', \"false\")|string|lower == \"true\" %}\n    {%- set dbt_constraints_always_norely = var('dbt_constraints_always_norely', \"false\")|string|lower == \"true\" %}\n\n    {#- Loop through the metadata and find all tests that match the constraint_types and have all the fields we check for tests -#}\n    {%- for test_model in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"test\")\n            if test_model.test_metadata\n            and test_model.test_metadata.kwargs\n            and test_model.test_metadata.name\n            and test_model.test_metadata.name is in( constraint_types )\n            and test_model.unique_id\n            and test_model.attached_node\n            and test_model.depends_on\n            and test_model.depends_on.nodes\n            and test_model.config\n            and test_model.config.enabled\n            and test_model.config.get(\"dbt_constraints_enabled\", \"true\")|string|lower == \"true\" -%}\n\n        {%- set test_parameters = test_model.test_metadata.kwargs -%}\n        {%- set test_name = test_model.test_metadata.name -%}\n        {%- set selected = dbt_constraints.test_selected(test_model) -%}\n\n        {#- We can shortcut additional tests if the constraint was not selected -#}\n        {%- if selected is not none and dbt_constraints_always_norely -%}\n            {#- We can skip checking for NORELY if we always NORELY -#}\n            {%- set rely_clause = 'NORELY' -%}\n            {%- set always_create_constraint = dbt_constraints.should_always_create_constraint(test_model) -%}\n        {%- elif selected is not none -%}\n            {#- rely_clause clause will be RELY if a test passed, NORELY if it failed, and '' if it was skipped -#}\n            {%- set rely_clause = dbt_constraints.lookup_should_rely(test_model) -%}\n            {%- set always_create_constraint = dbt_constraints.should_always_create_constraint(test_model) -%}\n        {%- else -%}\n            {%- set rely_clause = '' -%}\n            {%- set always_create_constraint = false -%}\n        {%- endif -%}\n\n        {#- Create constraints that:\n            - Either the test or its model was selected to run, including PK/UK for FK\n            - Passed the test (RELY) or the database supports NORELY constraints\n            - We ran the test (RELY/NORELY) or we need the constraint for a FK\n              or we have the always_create_constraint parameter turned on -#}\n        {%- if selected is not none\n            and ( rely_clause == 'RELY'\n                  or dbt_constraints.adapter_supports_rely_norely(test_name) == true )\n            and ( rely_clause in('RELY', 'NORELY')\n                  or selected == \"PK_UK_FOR_SELECTED_FK\"\n                  or always_create_constraint == true ) -%}\n\n            {% set ns = namespace(verify_permissions=false) %}\n            {%- set table_models = [] -%}\n\n            {#- Find the table models that are referenced by this test. -#}\n            {%- for table_node in test_model.depends_on.nodes -%}\n                {%- for node in graph.nodes.values() | selectattr(\"unique_id\", \"equalto\", table_node)\n                    if node.config\n                    and node.config.get(\"materialized\", \"other\") not in (\"view\", \"ephemeral\", \"dynamic_table\")\n                    and ( node.resource_type in (\"model\", \"snapshot\", \"seed\")\n                        or ( node.resource_type == \"source\" and dbt_constraints_sources_enabled\n                            and ( ( dbt_constraints_sources_pk_enabled and test_name in(\"primary_key\") )\n                                or ( dbt_constraints_sources_uk_enabled and test_name in(\"unique_key\", \"unique_combination_of_columns\", \"unique\") )\n                                or ( dbt_constraints_sources_fk_enabled and test_name in(\"foreign_key\", \"relationships\") )\n                                or ( dbt_constraints_sources_nn_enabled and test_name in(\"not_null\") ) )\n                        ) ) -%}\n\n                    {%- do node.update({'alias': node.alias or node.name }) -%}\n                    {#- Append to our list of models for this test -#}\n                    {%- do table_models.append(node) -%}\n                    {%- if node.resource_type == \"source\"\n                        or node.config.get(\"materialized\", \"other\") not in (\"table\", \"incremental\", \"snapshot\", \"seed\") -%}\n                        {#- If we are using a sources or custom materializations, we will need to verify permissions -#}\n                        {%- set ns.verify_permissions = true -%}\n                    {%- endif -%}\n\n                {% endfor %}\n            {% endfor %}\n\n            {#- We only create PK/UK if there is one model referenced by the test\n                and if all the columns exist as physical columns on the table -#}\n            {%- if 1 == table_models|count\n                and test_name in(\"primary_key\", \"unique_key\", \"unique_combination_of_columns\", \"unique\") -%}\n\n                {# Attempt to identify a parameter we can use for the column names #}\n                {%- set column_names = [] -%}\n                {%- if  test_parameters.column_names -%}\n                    {%- set column_names =  test_parameters.column_names -%}\n                {%- elif  test_parameters.combination_of_columns -%}\n                    {%- set column_names =  test_parameters.combination_of_columns -%}\n                {%- elif  test_parameters.column_name -%}\n                    {%- set column_names =  [test_parameters.column_name] -%}\n                {%- else  -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`column_names` or `column_name` parameter missing for primary/unique key constraint on table: '\" ~ table_models[0].name\n                    ) }}\n                {%- endif -%}\n\n                {%- set table_relation = adapter.get_relation(\n                    database=table_models[0].database,\n                    schema=table_models[0].schema,\n                    identifier=table_models[0].alias ) -%}\n                {%- if table_relation and table_relation.is_table -%}\n                    {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                        {%- if test_name == \"primary_key\" or (target.type == \"bigquery\"\n                            and test_name in(\"unique_key\", \"unique_combination_of_columns\", \"unique\"))\n                        -%}\n                            {%- if dbt_constraints.adapter_supports_rely_norely(\"not_null\") == true -%}\n                                {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n                            {%- endif -%}\n                            {%- do dbt_constraints.create_primary_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache, rely_clause) -%}\n                        {%- else  -%}\n                            {%- do dbt_constraints.create_unique_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache, rely_clause) -%}\n                        {%- endif -%}\n                    {%- else  -%}\n                        {%- do log(\"Skipping primary/unique key because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n                    {%- endif -%}\n                {%- else  -%}\n                    {%- do log(\"Skipping primary/unique key because the table was not found in the database: \" ~ table_models[0].name, info=true) -%}\n                {%- endif -%}\n\n            {#- We only create FK if there are two models referenced by the test\n                and if all the columns exist as physical columns on the tables -#}\n            {%- elif 2 == table_models|count\n                and test_name in( \"foreign_key\", \"relationships\") -%}\n\n                {%- set fk_model = table_models | selectattr(\"unique_id\", \"equalto\", test_model.attached_node) | first -%}\n                {%- set pk_model = table_models | rejectattr(\"unique_id\", \"equalto\", test_model.attached_node) | first -%}\n\n                {%- if fk_model and pk_model -%}\n\n                    {%- set fk_table_relation = adapter.get_relation(\n                        database=fk_model.database,\n                        schema=fk_model.schema,\n                        identifier=fk_model.alias) -%}\n\n                    {%- if pk_model.unique_id not in selected_resources -%}\n                        {%- set pk_table_relation = adapter.get_relation(\n                            database=(pk_model.config.database or pk_model.database),\n                            schema=(pk_model.config.schema or pk_model.schema),\n                            identifier=(pk_model.config.alias or pk_model.alias)) -%}\n                    {%- else -%}\n                        {%- set pk_table_relation = adapter.get_relation(\n                            database=pk_model.database,\n                            schema=pk_model.schema,\n                            identifier=pk_model.alias) -%}\n                    {%- endif -%}\n\n                    {%- if fk_table_relation and pk_table_relation and fk_table_relation.is_table and pk_table_relation.is_table-%}\n                        {# Attempt to identify parameters we can use for the column names #}\n                        {%- set pk_column_names = [] -%}\n                        {%- if  test_parameters.pk_column_names -%}\n                            {%- set pk_column_names = test_parameters.pk_column_names -%}\n                        {%- elif  test_parameters.field -%}\n                            {%- set pk_column_names = [test_parameters.field] -%}\n                        {%- elif test_parameters.pk_column_name -%}\n                            {%- set pk_column_names = [test_parameters.pk_column_name] -%}\n                        {%- else -%}\n                            {{ exceptions.raise_compiler_error(\n                            \"`pk_column_names`, `pk_column_name`, or `field` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                            ) }}\n                        {%- endif -%}\n\n                        {%- set fk_column_names = [] -%}\n                        {%- if  test_parameters.fk_column_names -%}\n                            {%- set fk_column_names = test_parameters.fk_column_names -%}\n                        {%- elif test_parameters.column_name -%}\n                            {%- set fk_column_names = [test_parameters.column_name] -%}\n                        {%- elif test_parameters.fk_column_name -%}\n                            {%- set fk_column_names = [test_parameters.fk_column_name] -%}\n                        {%- else -%}\n                            {{ exceptions.raise_compiler_error(\n                            \"`fk_column_names`, `fk_column_name`, or `column_name` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                            ) }}\n                        {%- endif -%}\n\n                        {%- if not dbt_constraints.table_columns_all_exist(pk_table_relation, pk_column_names, lookup_cache) -%}\n                            {%- do log(\"Skipping foreign key because a physical column was not found on the pk table: \" ~ pk_model.name ~ \" \" ~ pk_column_names, info=true) -%}\n                        {%- elif not dbt_constraints.table_columns_all_exist(fk_table_relation, fk_column_names, lookup_cache) -%}\n                            {%- do log(\"Skipping foreign key because a physical column was not found on the fk table: \" ~ fk_model.name ~ \" \" ~ fk_column_names, info=true) -%}\n                        {%- else  -%}\n                            {%- do dbt_constraints.create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache, rely_clause) -%}\n                        {%- endif -%}\n                    {%- else  -%}\n                        {%- if fk_model == None or not fk_table_relation.is_table -%}\n                            {%- do log(\"Skipping foreign key to \" ~ pk_model.alias ~ \" because the child table was not found in the database: \" ~ fk_model.alias, info=true) -%}\n                        {%- endif -%}\n                        {%- if pk_model == None or not pk_model.is_table -%}\n                            {%- do log(\"Skipping foreign key on \" ~ fk_model.alias ~ \" because the parent table was not found in the database: \" ~ pk_model.alias, info=true) -%}\n                        {%- endif -%}\n                    {%- endif -%}\n\n                {%- else  -%}\n                    {%- do log(\"Skipping foreign key because a we couldn't find the child table: model=\" ~ test_model.attached_node ~ \" or source\", info=true) -%}\n                {%- endif -%}\n\n            {#- We only create NN if there is one model referenced by the test\n                and if all the columns exist as physical columns on the table -#}\n            {%- elif 1 == table_models|count\n                and test_name in(\"not_null\") -%}\n\n                {# Attempt to identify a parameter we can use for the column names #}\n                {%- set column_names = [] -%}\n                {%- if  test_parameters.column_names -%}\n                    {%- set column_names =  test_parameters.column_names -%}\n                {%- elif  test_parameters.combination_of_columns -%}\n                    {%- set column_names =  test_parameters.combination_of_columns -%}\n                {%- elif  test_parameters.column_name -%}\n                    {%- set column_names =  [test_parameters.column_name] -%}\n                {%- else  -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`column_names` or `column_name` parameter missing for not null constraint on table: '\" ~ table_models[0].name\n                    ) }}\n                {%- endif -%}\n\n                {%- set table_relation = adapter.get_relation(\n                    database=table_models[0].database,\n                    schema=table_models[0].schema,\n                    identifier=table_models[0].alias ) -%}\n\n                {%- if table_relation and table_relation.is_table -%}\n                    {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                        {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n                    {%- else  -%}\n                        {%- do log(\"Skipping not null constraint because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n                    {%- endif -%}\n                {%- else  -%}\n                    {%- do log(\"Skipping not null constraint because the table was not found in the database: \" ~ table_models[0].name, info=true) -%}\n                {%- endif -%}\n\n            {%- endif -%}\n        {%- endif -%}\n\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"constraint_types","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.create_foreign_key":{"name":"create_foreign_key","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.create_foreign_key","macro_sql":"{%- macro create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {{ return(adapter.dispatch('create_foreign_key', 'dbt_constraints')(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause)) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"pk_table_relation","is_optional":false},{"name":"pk_column_names","is_optional":false},{"name":"fk_table_relation","is_optional":false},{"name":"fk_column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.create_not_null":{"name":"create_not_null","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.create_not_null","macro_sql":"{%- macro create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n    {{ return(adapter.dispatch('create_not_null', 'dbt_constraints')(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause)) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.create_primary_key":{"name":"create_primary_key","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.create_primary_key","macro_sql":"{%- macro create_primary_key(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {{ return(adapter.dispatch('create_primary_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause)) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_model","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.create_unique_key":{"name":"create_unique_key","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.create_unique_key","macro_sql":"{%- macro create_unique_key(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {{ return(adapter.dispatch('create_unique_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause)) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_model","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.default__adapter_supports_rely_norely":{"name":"default__adapter_supports_rely_norely","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.default__adapter_supports_rely_norely","macro_sql":"{%- macro default__adapter_supports_rely_norely(test_name) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"test_name","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.default__lookup_table_columns":{"name":"default__lookup_table_columns","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.default__lookup_table_columns","macro_sql":"{%- macro default__lookup_table_columns(table_relation, lookup_cache) -%}\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set tab_Columns = adapter.get_columns_in_relation(table_relation) -%}\n\n        {%- set tab_column_list = [] -%}\n        {%- for column in tab_Columns -%}\n            {{ tab_column_list.append(column.name|upper|trim('\"')) }}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: tab_column_list }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.default__test_foreign_key":{"name":"default__test_foreign_key","package_name":"dbt_constraints","path":"macros\\default__test_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\default__test_constraints.sql","unique_id":"macro.dbt_constraints.default__test_foreign_key","macro_sql":"{%- macro default__test_foreign_key(model, fk_column_names, pk_table_name, pk_column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"referential constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A referential constraint is satisfied if one of the following con-\n    ditions is true, depending on the <match option> specified in the\n    <referential constraint definition>:\n\n    -  If no <match type> was specified then, for each row R1 of the\n        referencing table, either at least one of the values of the\n        referencing columns in R1 shall be a null value, or the value of\n        each referencing column in R1 shall be equal to the value of the\n        corresponding referenced column in some row of the referenced\n        table.\"\n\nThe implications of this standard is that if one column is NULL in a compound foreign key, the other column\ndoes NOT need to match a row in a referenced unique key. This is implemented by first excluding any\nrows from the test that have a NULL value in any of the columns.\n#}\n\n{%- set fk_columns_inner_list=dbt_constraints.get_prefixed_column_list(fk_column_names, 'fk_child_inner', quote_columns) %}\n{%- set pk_columns_inner_list=dbt_constraints.get_prefixed_column_list(pk_column_names, 'fk_parent_inner', quote_columns) %}\n{%- set pk_columns_outer_list=dbt_constraints.get_prefixed_column_list(pk_column_names, 'fk_parent', quote_columns) %}\n{%- set join_conditions = dbt_constraints.get_join_conditions(fk_column_names, 'fk_child', pk_column_names, 'fk_parent', quote_columns) -%}\n\n{#- This test will return if all the columns are not null\n    and the values are not found in the referenced PK table #}\n\nselect validation_errors.* from (\n    select\n        fk_child.*\n    from (\n        select\n            {{ fk_columns_inner_list | join(', ') }}\n        from {{model}} fk_child_inner\n        where 1=1\n            {% for column in fk_columns_inner_list -%}\n            and {{column}} is not null\n            {% endfor -%}\n        ) fk_child\n    left join (\n        select\n            {{ pk_columns_inner_list | join(', ') }}\n        from {{pk_table_name}} fk_parent_inner\n        ) fk_parent\n            on {{ join_conditions | join(' and ') }}\n\n    where {{ pk_columns_outer_list | first }} is null\n) validation_errors\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"fk_column_names","is_optional":false},{"name":"pk_table_name","is_optional":false},{"name":"pk_column_names","is_optional":false},{"name":"quote_columns","is_optional":true}],"resource_type":"macro"},"macro.dbt_constraints.default__test_primary_key":{"name":"default__test_primary_key","package_name":"dbt_constraints","path":"macros\\default__test_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\default__test_constraints.sql","unique_id":"macro.dbt_constraints.default__test_primary_key","macro_sql":"{%- macro default__test_primary_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"primary key\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns. In\n    addition, if the unique constraint was defined with PRIMARY KEY,\n    then it requires that none of the values in the specified column or\n    columns be the null value.\"\n#}\n\n{%- set prefixed_columns_list = dbt_constraints.get_prefixed_column_list(column_names, 'pk_test', quote_columns) -%}\n\n{#- This test will return for any duplicates and if any of the key columns is null -#}\nselect validation_errors.* from (\n    select\n        {{prefixed_columns_list | join(', ')}}, count(*) as n_records\n    from {{model}} pk_test\n    group by {{prefixed_columns_list | join(', ')}}\n    having count(*) > 1\n        {% for column in prefixed_columns_list -%}\n        or {{column}} is null\n        {% endfor %}\n) validation_errors\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"column_names","is_optional":false},{"name":"quote_columns","is_optional":true}],"resource_type":"macro"},"macro.dbt_constraints.default__test_unique_key":{"name":"default__test_unique_key","package_name":"dbt_constraints","path":"macros\\default__test_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\default__test_constraints.sql","unique_id":"macro.dbt_constraints.default__test_unique_key","macro_sql":"{%- macro default__test_unique_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"unique constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns.\"\n#}\n\n{%- set prefixed_columns_list = dbt_constraints.get_prefixed_column_list(column_names, 'uk_test', quote_columns) -%}\n\n{#- This test will return any duplicates -#}\nselect validation_errors.* from (\n    select\n        {{prefixed_columns_list | join(', ')}}, count(*) as n_records\n    from {{model}} uk_test\n    group by {{prefixed_columns_list | join(', ')}}\n    having count(*) > 1\n) validation_errors\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"column_names","is_optional":false},{"name":"quote_columns","is_optional":true}],"resource_type":"macro"},"macro.dbt_constraints.drop_relation":{"name":"drop_relation","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.drop_relation","macro_sql":"{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.foreign_key_exists":{"name":"foreign_key_exists","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.foreign_key_exists","macro_sql":"{%- macro foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('foreign_key_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache)) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.get_join_conditions":{"name":"get_join_conditions","package_name":"dbt_constraints","path":"macros\\default__test_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\default__test_constraints.sql","unique_id":"macro.dbt_constraints.get_join_conditions","macro_sql":"{%- macro get_join_conditions(column_array_left, prefix_alias_left, column_array_right, prefix_alias_right, quote_columns=false) -%}\n    {%- set column_list_left = dbt_constraints.get_prefixed_column_list(column_array_left, prefix_alias_left, quote_columns) -%}\n    {%- set column_list_right = dbt_constraints.get_prefixed_column_list(column_array_right, prefix_alias_right, quote_columns) -%}\n\n    {%- set join_conditions = [] -%}\n    {%- for x in range(column_list_left|count) -%}\n        {%- set join_conditions = join_conditions.append( column_list_left[x] ~ ' = ' ~ column_list_right[x] ) -%}\n    {%- endfor -%}\n    {{ return(join_conditions) }}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"column_array_left","is_optional":false},{"name":"prefix_alias_left","is_optional":false},{"name":"column_array_right","is_optional":false},{"name":"prefix_alias_right","is_optional":false},{"name":"quote_columns","is_optional":true}],"resource_type":"macro"},"macro.dbt_constraints.get_prefixed_column_list":{"name":"get_prefixed_column_list","package_name":"dbt_constraints","path":"macros\\default__test_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\default__test_constraints.sql","unique_id":"macro.dbt_constraints.get_prefixed_column_list","macro_sql":"{%- macro get_prefixed_column_list(column_array, prefix_alias, quote_columns=false) -%}\n    {%- set column_list = dbt_constraints.get_quoted_column_list(column_array, quote_columns) -%}\n\n    {%- set prefixed_column_list = [] -%}\n    {%- for x in range(column_list|count) -%}\n        {%- set prefixed_column_list = prefixed_column_list.append( prefix_alias ~ '.' ~ column_list[x] ) -%}\n    {%- endfor -%}\n    {{ return(prefixed_column_list) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"column_array","is_optional":false},{"name":"prefix_alias","is_optional":false},{"name":"quote_columns","is_optional":true}],"resource_type":"macro"},"macro.dbt_constraints.get_quoted_column_csv":{"name":"get_quoted_column_csv","package_name":"dbt_constraints","path":"macros\\default__test_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\default__test_constraints.sql","unique_id":"macro.dbt_constraints.get_quoted_column_csv","macro_sql":"{%- macro get_quoted_column_csv(column_array, quote_columns=false) -%}\n\n    {%- set column_list = dbt_constraints.get_quoted_column_list(column_array, quote_columns) -%}\n    {%- set columns_csv=column_list | join(', ') -%}\n    {{ return(columns_csv) }}\n\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"column_array","is_optional":false},{"name":"quote_columns","is_optional":true}],"resource_type":"macro"},"macro.dbt_constraints.get_quoted_column_list":{"name":"get_quoted_column_list","package_name":"dbt_constraints","path":"macros\\default__test_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\default__test_constraints.sql","unique_id":"macro.dbt_constraints.get_quoted_column_list","macro_sql":"{%- macro get_quoted_column_list(column_array, quote_columns=false) -%}\n\n    {%- if not quote_columns -%}\n        {%- set column_list=column_array -%}\n    {%- elif quote_columns -%}\n        {%- set column_list=[] -%}\n        {%- for column in column_array -%}\n            {%- set column_list = column_list.append( adapter.quote(column) ) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {{ exceptions.raise_compiler_error(\n            \"`quote_columns` argument must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n        ) }}\n    {%- endif -%}\n\n    {{ return(column_list) }}\n\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"column_array","is_optional":false},{"name":"quote_columns","is_optional":true}],"resource_type":"macro"},"macro.dbt_constraints.have_ownership_priv":{"name":"have_ownership_priv","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.have_ownership_priv","macro_sql":"{%- macro have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_ownership_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache)) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.have_references_priv":{"name":"have_references_priv","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.have_references_priv","macro_sql":"{%- macro have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_references_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache) ) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.lookup_should_rely":{"name":"lookup_should_rely","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.lookup_should_rely","macro_sql":"{%- macro lookup_should_rely(test_model) -%}\n    {%- if test_model.config.where\n            or test_model.config.warn_if != \"!= 0\"\n            or test_model.config.fail_calc != \"count(*)\" -%}\n        {#- Set NORELY if there is a condition on the test -#}\n        {{ return('NORELY') }}\n    {%- endif -%}\n\n    {%- for res in results\n        if res.node.config.materialized == \"test\"\n        and res.node.unique_id == test_model.unique_id -%}\n        {%- if res.failures == None -%}\n            {#- Set '' if we do not know if there is a test failure -#}\n            {{ return('') }}\n        {%- elif res.failures > 0 -%}\n            {#- Set NORELY if there is a test failure -#}\n            {{ return('NORELY') }}\n        {%- elif res.failures == 0 -%}\n            {#- Set RELY if there are 0 failures -#}\n            {{ return('RELY') }}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return('') }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"test_model","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.lookup_table_columns":{"name":"lookup_table_columns","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.lookup_table_columns","macro_sql":"{%- macro lookup_table_columns(table_relation, lookup_cache) -%}\n    {{ return(adapter.dispatch('lookup_table_columns', 'dbt_constraints')(table_relation, lookup_cache)) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.oracle__create_foreign_key":{"name":"oracle__create_foreign_key","package_name":"dbt_constraints","path":"macros\\oracle__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\oracle__create_constraints.sql","unique_id":"macro.dbt_constraints.oracle__create_foreign_key","macro_sql":"{%- macro oracle__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper | replace('\"', '') -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"pk_table_relation","is_optional":false},{"name":"pk_column_names","is_optional":false},{"name":"fk_table_relation","is_optional":false},{"name":"fk_column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.oracle__create_not_null":{"name":"oracle__create_not_null","package_name":"dbt_constraints","path":"macros\\oracle__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\oracle__create_constraints.sql","unique_id":"macro.dbt_constraints.oracle__create_not_null","macro_sql":"{%- macro oracle__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( column ~ \" NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} MODIFY ( {{ modify_statement_csv }} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.oracle__create_primary_key":{"name":"oracle__create_primary_key","package_name":"dbt_constraints","path":"macros\\oracle__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\oracle__create_constraints.sql","unique_id":"macro.dbt_constraints.oracle__create_primary_key","macro_sql":"{%- macro oracle__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper | replace('\"', '') -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'PK_' ||  ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.oracle__create_unique_key":{"name":"oracle__create_unique_key","package_name":"dbt_constraints","path":"macros\\oracle__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\oracle__create_constraints.sql","unique_id":"macro.dbt_constraints.oracle__create_unique_key","macro_sql":"{%- macro oracle__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper | replace('\"', '') -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.oracle__drop_referential_constraints":{"name":"oracle__drop_referential_constraints","package_name":"dbt_constraints","path":"macros\\oracle__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\oracle__create_constraints.sql","unique_id":"macro.dbt_constraints.oracle__drop_referential_constraints","macro_sql":"{% macro oracle__drop_referential_constraints(relation) -%}\n    {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.oracle__drop_relation":{"name":"oracle__drop_relation","package_name":"dbt_constraints","path":"macros\\oracle__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\oracle__create_constraints.sql","unique_id":"macro.dbt_constraints.oracle__drop_relation","macro_sql":"{% macro oracle__drop_relation(relation) -%}\n    {%- do log(\"Dropping table \" ~ relation, info=true) -%}\n        {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\n    FOR REC IN (\n        SELECT owner, table_name\n        FROM all_tables\n        WHERE upper(owner) = '{{relation.schema|upper}}'\n            AND upper(table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'DROP TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" CASCADE CONSTRAINTS';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop table: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.oracle__foreign_key_exists":{"name":"oracle__foreign_key_exists","package_name":"dbt_constraints","path":"macros\\oracle__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\oracle__create_constraints.sql","unique_id":"macro.dbt_constraints.oracle__foreign_key_exists","macro_sql":"{%- macro oracle__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"fk_name\",\n    upper(cols.column_name) as \"fk_column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'R' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.oracle__have_ownership_priv":{"name":"oracle__have_ownership_priv","package_name":"dbt_constraints","path":"macros\\oracle__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\oracle__create_constraints.sql","unique_id":"macro.dbt_constraints.oracle__have_ownership_priv","macro_sql":"{%- macro oracle__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.oracle__have_references_priv":{"name":"oracle__have_references_priv","package_name":"dbt_constraints","path":"macros\\oracle__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\oracle__create_constraints.sql","unique_id":"macro.dbt_constraints.oracle__have_references_priv","macro_sql":"{%- macro oracle__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.oracle__truncate_relation":{"name":"oracle__truncate_relation","package_name":"dbt_constraints","path":"macros\\oracle__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\oracle__create_constraints.sql","unique_id":"macro.dbt_constraints.oracle__truncate_relation","macro_sql":"{% macro oracle__truncate_relation(relation) -%}\n    {%- do log(\"Truncating table \" ~ relation, info=true) -%}\n    {{ oracle__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.oracle__unique_constraint_exists":{"name":"oracle__unique_constraint_exists","package_name":"dbt_constraints","path":"macros\\oracle__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\oracle__create_constraints.sql","unique_id":"macro.dbt_constraints.oracle__unique_constraint_exists","macro_sql":"{%- macro oracle__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"constraint_name\",\n    upper(cols.column_name) as \"column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'P', 'U' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.postgres__create_foreign_key":{"name":"postgres__create_foreign_key","package_name":"dbt_constraints","path":"macros\\postgres__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\postgres__create_constraints.sql","unique_id":"macro.dbt_constraints.postgres__create_foreign_key","macro_sql":"{%- macro postgres__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper | replace('\"', '') -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- call statement('add_fk', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endcall -%}\n                {{ adapter.commit() }}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"pk_table_relation","is_optional":false},{"name":"pk_column_names","is_optional":false},{"name":"fk_table_relation","is_optional":false},{"name":"fk_column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.postgres__create_not_null":{"name":"postgres__create_not_null","package_name":"dbt_constraints","path":"macros\\postgres__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\postgres__create_constraints.sql","unique_id":"macro.dbt_constraints.postgres__create_not_null","macro_sql":"{%- macro postgres__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"ALTER COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- call statement('add_nn', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{table_relation}} {{ modify_statement_csv }};\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.postgres__create_primary_key":{"name":"postgres__create_primary_key","package_name":"dbt_constraints","path":"macros\\postgres__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\postgres__create_constraints.sql","unique_id":"macro.dbt_constraints.postgres__create_primary_key","macro_sql":"{%- macro postgres__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper | replace('\"', '') -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_pk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.postgres__create_unique_key":{"name":"postgres__create_unique_key","package_name":"dbt_constraints","path":"macros\\postgres__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\postgres__create_constraints.sql","unique_id":"macro.dbt_constraints.postgres__create_unique_key","macro_sql":"{%- macro postgres__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper | replace('\"', '') -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_uk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.postgres__drop_referential_constraints":{"name":"postgres__drop_referential_constraints","package_name":"dbt_constraints","path":"macros\\postgres__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\postgres__create_constraints.sql","unique_id":"macro.dbt_constraints.postgres__drop_referential_constraints","macro_sql":"{% macro postgres__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- call statement('drop_constraint_cascade', fetch_result=False, auto_begin=True) -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT IF EXISTS \"{{constraint_name}}\" CASCADE\n        {%- endcall -%}\n        {{ adapter.commit() }}\n    {% endfor %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.postgres__drop_relation":{"name":"postgres__drop_relation","package_name":"dbt_constraints","path":"macros\\postgres__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\postgres__create_constraints.sql","unique_id":"macro.dbt_constraints.postgres__drop_relation","macro_sql":"{% macro postgres__drop_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.postgres__foreign_key_exists":{"name":"postgres__foreign_key_exists","package_name":"dbt_constraints","path":"macros\\postgres__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\postgres__create_constraints.sql","unique_id":"macro.dbt_constraints.postgres__foreign_key_exists","macro_sql":"{%- macro postgres__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as fk_name\n        , upper(col.attname) as fk_column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('f')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by fk_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.postgres__have_ownership_priv":{"name":"postgres__have_ownership_priv","package_name":"dbt_constraints","path":"macros\\postgres__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\postgres__create_constraints.sql","unique_id":"macro.dbt_constraints.postgres__have_ownership_priv","macro_sql":"{%- macro postgres__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.postgres__have_references_priv":{"name":"postgres__have_references_priv","package_name":"dbt_constraints","path":"macros\\postgres__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\postgres__create_constraints.sql","unique_id":"macro.dbt_constraints.postgres__have_references_priv","macro_sql":"{%- macro postgres__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.postgres__truncate_relation":{"name":"postgres__truncate_relation","package_name":"dbt_constraints","path":"macros\\postgres__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\postgres__create_constraints.sql","unique_id":"macro.dbt_constraints.postgres__truncate_relation","macro_sql":"{% macro postgres__truncate_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.postgres__unique_constraint_exists":{"name":"postgres__unique_constraint_exists","package_name":"dbt_constraints","path":"macros\\postgres__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\postgres__create_constraints.sql","unique_id":"macro.dbt_constraints.postgres__unique_constraint_exists","macro_sql":"{%- macro postgres__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as constraint_name\n        , upper(col.attname) as column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('p', 'u')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.redshift__create_foreign_key":{"name":"redshift__create_foreign_key","package_name":"dbt_constraints","path":"macros\\redshift__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\redshift__create_constraints.sql","unique_id":"macro.dbt_constraints.redshift__create_foreign_key","macro_sql":"{%- macro redshift__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper | replace('\"', '') -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- set query -%}\n                --Note: ON DELETE not supported in Redshift\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) --ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endset -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"pk_table_relation","is_optional":false},{"name":"pk_column_names","is_optional":false},{"name":"fk_table_relation","is_optional":false},{"name":"fk_column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.redshift__create_not_null":{"name":"redshift__create_not_null","package_name":"dbt_constraints","path":"macros\\redshift__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\redshift__create_constraints.sql","unique_id":"macro.dbt_constraints.redshift__create_not_null","macro_sql":"{%- macro redshift__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because ALTER COLUMN SET NOT NULL is not supported\", info=true) -%}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.redshift__create_primary_key":{"name":"redshift__create_primary_key","package_name":"dbt_constraints","path":"macros\\redshift__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\redshift__create_constraints.sql","unique_id":"macro.dbt_constraints.redshift__create_primary_key","macro_sql":"{%- macro redshift__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper | replace('\"', '') -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.redshift__create_unique_key":{"name":"redshift__create_unique_key","package_name":"dbt_constraints","path":"macros\\redshift__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\redshift__create_constraints.sql","unique_id":"macro.dbt_constraints.redshift__create_unique_key","macro_sql":"{%- macro redshift__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper | replace('\"', '') -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.redshift__drop_referential_constraints":{"name":"redshift__drop_referential_constraints","package_name":"dbt_constraints","path":"macros\\redshift__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\redshift__create_constraints.sql","unique_id":"macro.dbt_constraints.redshift__drop_referential_constraints","macro_sql":"{% macro redshift__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- set query -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT \"{{constraint_name}}\" CASCADE\n        {%- endset -%}\n        {%- do run_query(query) -%}\n    {% endfor %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.redshift__drop_relation":{"name":"redshift__drop_relation","package_name":"dbt_constraints","path":"macros\\redshift__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\redshift__create_constraints.sql","unique_id":"macro.dbt_constraints.redshift__drop_relation","macro_sql":"{% macro redshift__drop_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.redshift__foreign_key_exists":{"name":"redshift__foreign_key_exists","package_name":"dbt_constraints","path":"macros\\redshift__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\redshift__create_constraints.sql","unique_id":"macro.dbt_constraints.redshift__foreign_key_exists","macro_sql":"{%- macro redshift__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name fk_name\n        , lower(kc.column_name) as fk_column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type='FOREIGN KEY'\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.redshift__have_ownership_priv":{"name":"redshift__have_ownership_priv","package_name":"dbt_constraints","path":"macros\\redshift__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\redshift__create_constraints.sql","unique_id":"macro.dbt_constraints.redshift__have_ownership_priv","macro_sql":"{%- macro redshift__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.redshift__have_references_priv":{"name":"redshift__have_references_priv","package_name":"dbt_constraints","path":"macros\\redshift__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\redshift__create_constraints.sql","unique_id":"macro.dbt_constraints.redshift__have_references_priv","macro_sql":"{%- macro redshift__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.redshift__truncate_relation":{"name":"redshift__truncate_relation","package_name":"dbt_constraints","path":"macros\\redshift__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\redshift__create_constraints.sql","unique_id":"macro.dbt_constraints.redshift__truncate_relation","macro_sql":"{% macro redshift__truncate_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.redshift__unique_constraint_exists":{"name":"redshift__unique_constraint_exists","package_name":"dbt_constraints","path":"macros\\redshift__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\redshift__create_constraints.sql","unique_id":"macro.dbt_constraints.redshift__unique_constraint_exists","macro_sql":"{%- macro redshift__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name\n        , lower(kc.column_name) as column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type in ('PRIMARY KEY', 'UNIQUE')\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.set_rely_norely":{"name":"set_rely_norely","package_name":"dbt_constraints","path":"macros\\snowflake__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\snowflake__create_constraints.sql","unique_id":"macro.dbt_constraints.set_rely_norely","macro_sql":"{%- macro set_rely_norely(table_relation, constraint_name, constraint_rely, rely_clause) -%}\n    {%- if ( rely_clause == 'NORELY' and constraint_rely == 'true' )\n            or ( rely_clause == 'RELY' and constraint_rely == 'false' ) -%}\n        {%- set ddl_prefix_for_alter = 'ICEBERG' if table_relation.is_iceberg_format else '' -%}\n        {%- set query -%}\n        ALTER {{ ddl_prefix_for_alter }} TABLE {{ table_relation }} MODIFY CONSTRAINT {{ constraint_name }} {{ rely_clause }}\n        {%- endset -%}\n        {%- do log(\"Updating constraint: \" ~ constraint_name ~ \" \" ~ rely_clause, info=true) -%}\n        {%- do run_query(query) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"constraint_rely","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.should_always_create_constraint":{"name":"should_always_create_constraint","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.should_always_create_constraint","macro_sql":"{%- macro should_always_create_constraint(test_model) -%}\n    {%- if test_model.config.get(\"always_create_constraint\", \"false\")|string|lower == \"true\" -%}\n        {{ return(true) }}\n    {%- endif -%}\n    {%- for table_node in test_model.depends_on.nodes -%}\n        {%- for node in graph.nodes.values() | selectattr(\"unique_id\", \"equalto\", table_node)\n            if node.config.get(\"always_create_constraint\", \"false\")|string|lower == \"true\" -%}\n            {{ return(true) }}\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"test_model","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.snowflake__adapter_supports_rely_norely":{"name":"snowflake__adapter_supports_rely_norely","package_name":"dbt_constraints","path":"macros\\snowflake__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\snowflake__create_constraints.sql","unique_id":"macro.dbt_constraints.snowflake__adapter_supports_rely_norely","macro_sql":"{%- macro snowflake__adapter_supports_rely_norely(test_name) -%}\n    {%- if test_name in (\n            'primary_key',\n            'unique_key',\n            'unique_combination_of_columns',\n            'unique',\n            'foreign_key',\n            'relationships') -%}\n        {{ return(true) }}\n    {%- else -%}\n        {{ return(false) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"test_name","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.snowflake__create_foreign_key":{"name":"snowflake__create_foreign_key","package_name":"dbt_constraints","path":"macros\\snowflake__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\snowflake__create_constraints.sql","unique_id":"macro.dbt_constraints.snowflake__create_foreign_key","macro_sql":"{%- macro snowflake__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n{%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper | replace('\"', '') -%}\n{%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n{%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n\n{#- Check that the PK table has a PK or UK -#}\n{%- if none != dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- set existing_constraint = dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names, lookup_cache) -%}\n        {%- if none == existing_constraint -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set ddl_prefix_for_alter = 'ICEBERG' if fk_table_relation.is_iceberg_format else '' -%}\n                {%- set rely_clause = 'NORELY' if rely_clause == '' else rely_clause -%}\n                {%- set query -%}\n                ALTER {{ ddl_prefix_for_alter }} TABLE {{ fk_table_relation }} ADD CONSTRAINT {{ constraint_name }} FOREIGN KEY ( {{ fk_columns_csv }} ) REFERENCES {{ pk_table_relation }} ( {{ pk_columns_csv }} ) {{ rely_clause }}\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names ~ \" \" ~ rely_clause, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- do lookup_cache.foreign_keys[fk_table_relation].update( {constraint_name:\n                    {   \"columns\": fk_column_names,\n                        \"rely\": \"true\" if rely_clause == \"RELY\" else \"false\" } } ) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"pk_table_relation","is_optional":false},{"name":"pk_column_names","is_optional":false},{"name":"fk_table_relation","is_optional":false},{"name":"fk_column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.snowflake__create_not_null":{"name":"snowflake__create_not_null","package_name":"dbt_constraints","path":"macros\\snowflake__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\snowflake__create_constraints.sql","unique_id":"macro.dbt_constraints.snowflake__create_not_null","macro_sql":"{%- macro snowflake__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n{%- if not rely_clause == 'RELY' -%}\n    {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because Snowflake does not support NORELY for not null constraints.\", info=true) -%}\n    {{ return(false) }}\n{%- endif -%}\n\n{%- set existing_not_null_col = lookup_cache.not_null_col[table_relation] -%}\n\n{# Lookup any columns that are VARIANT, ARRAY, or OBJECT #}\n{%- set semi_structured_cols = lookup_cache.semi_structured_col[table_relation] -%}\n\n{%- set columns_to_change = [] -%}\n{%- for column_name in column_names if column_name not in existing_not_null_col -%}\n    {%- if (column_name | upper) in semi_structured_cols -%}\n        {%- do log(\"Skipping not null constraint for \" ~ column_name ~ \" in \" ~ table_relation ~ \" because Snowflake does not support not null constraints on ARRAY, OBJECT, or VARIANT columns.\", info=true) -%}\n    {%- else -%}\n        {%- do columns_to_change.append(column_name) -%}\n        {%- do existing_not_null_col.append(column_name) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- if columns_to_change|count > 0 -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(columns_to_change, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set ddl_prefix_for_alter = 'ICEBERG' if table_relation.is_iceberg_format else '' -%}\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\n                ALTER {{ ddl_prefix_for_alter }} TABLE {{ table_relation }} MODIFY {{ modify_statement_csv }};\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" \" ~ rely_clause, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- set constraint_key = table_relation.identifier ~ \"_\" ~ columns_to_change|join('_') ~ \"_NN\" -%}\n            {%- do lookup_cache.not_null_col.update({table_relation: existing_not_null_col }) -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- else -%}\n    {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because all columns are already not null\", info=false) -%}\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.snowflake__create_primary_key":{"name":"snowflake__create_primary_key","package_name":"dbt_constraints","path":"macros\\snowflake__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\snowflake__create_constraints.sql","unique_id":"macro.dbt_constraints.snowflake__create_primary_key","macro_sql":"{%- macro snowflake__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper | replace('\"', '') -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- set existing_constraint = dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- if none == existing_constraint -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set ddl_prefix_for_alter = 'ICEBERG' if table_relation.is_iceberg_format else '' -%}\n            {%- set rely_clause = 'NORELY' if rely_clause == '' else rely_clause -%}\n            {%- set query -%}\n            ALTER {{ ddl_prefix_for_alter }} TABLE {{ table_relation }} ADD CONSTRAINT {{ constraint_name }} PRIMARY KEY ( {{ columns_csv }} ) {{ rely_clause }}\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name ~ \" \" ~ rely_clause, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys[table_relation].update( {constraint_name:\n                {   \"columns\": column_names,\n                    \"rely\": \"true\" if rely_clause == \"RELY\" else \"false\" } } ) -%}\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.snowflake__create_unique_key":{"name":"snowflake__create_unique_key","package_name":"dbt_constraints","path":"macros\\snowflake__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\snowflake__create_constraints.sql","unique_id":"macro.dbt_constraints.snowflake__create_unique_key","macro_sql":"{%- macro snowflake__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper | replace('\"', '') -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- set existing_constraint = dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- if none == existing_constraint -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set ddl_prefix_for_alter = 'ICEBERG' if table_relation.is_iceberg_format else '' -%}\n            {%- set rely_clause = 'NORELY' if rely_clause == '' else rely_clause -%}\n            {%- set query -%}\n            ALTER {{ ddl_prefix_for_alter }} TABLE {{ table_relation }} ADD CONSTRAINT {{ constraint_name }} UNIQUE ( {{ columns_csv }} ) {{ rely_clause }}\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name ~ \" \" ~ rely_clause, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys[table_relation].update( {constraint_name:\n                {   \"columns\": column_names,\n                    \"rely\": \"true\" if rely_clause == \"RELY\" else \"false\" } } ) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.snowflake__foreign_key_exists":{"name":"snowflake__foreign_key_exists","package_name":"dbt_constraints","path":"macros\\snowflake__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\snowflake__create_constraints.sql","unique_id":"macro.dbt_constraints.snowflake__foreign_key_exists","macro_sql":"{%- macro snowflake__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n\n{#- Check if we can find this constraint in the lookup cache -#}\n{%- if table_relation in lookup_cache.foreign_keys -%}\n    {%- for constraint_name, cached_val in lookup_cache.foreign_keys[table_relation].items() -%}\n        {%- if dbt_constraints.column_list_matches(cached_val.columns, column_names ) -%}\n            {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ constraint_name ~ \" \" ~ cached_val.columns ~ \" \" ~ cached_val.rely, info=false) -%}\n            {{ return(cached_val.constraint_name) }}\n        {%- endif -%}\n    {% endfor %}\n    {{ return(none) }}\n{%- endif -%}\n\n{#- We didn't find a cache entry for this table so we will lookup existing constraints in DB -#}\n{%- do lookup_cache.foreign_keys.update({table_relation: {}}) -%}\n\n{%- set lookup_query -%}\nSHOW IMPORTED KEYS IN TABLE {{ table_relation }}\n{%- endset -%}\n{%- set constraint_list = run_query(lookup_query) -%}\n{%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n    {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n        {%- set existing_constraint_name = (constraint.columns[\"fk_name\"].values() | first) -%}\n        {%- set existing_columns = constraint.columns[\"fk_column_name\"].values() -%}\n        {%- set existing_rely = (constraint.columns[\"rely\"].values() | first) -%}\n        {#- Add this constraint to the lookup cache -#}\n        {%- do lookup_cache.foreign_keys[table_relation].update( {existing_constraint_name:\n            {   \"columns\": existing_columns,\n                \"rely\": existing_rely } }) -%}\n    {% endfor %}\n{%- endif -%}\n\n{#- check again in lookup cache -#}\n{%- for constraint_name, cached_val in lookup_cache.foreign_keys[table_relation].items() -%}\n    {%- if dbt_constraints.column_list_matches(cached_val.columns, column_names ) -%}\n        {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ constraint_name ~ \" \" ~ cached_val.columns ~ \" \" ~ cached_val.rely, info=false) -%}\n        {{ return(cached_val.constraint_name) }}\n    {%- endif -%}\n{% endfor %}\n\n{#- If we get this far then the table does not have this constraint -#}\n{%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n{{ return(none) }}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.snowflake__have_ownership_priv":{"name":"snowflake__have_ownership_priv","package_name":"dbt_constraints","path":"macros\\snowflake__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\snowflake__create_constraints.sql","unique_id":"macro.dbt_constraints.snowflake__have_ownership_priv","macro_sql":"{%- macro snowflake__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n{%- if verify_permissions is sameas true -%}\n\n{%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n{%- if \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n{{ return(true) }}\n{%- endif -%}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.snowflake__have_references_priv":{"name":"snowflake__have_references_priv","package_name":"dbt_constraints","path":"macros\\snowflake__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\snowflake__create_constraints.sql","unique_id":"macro.dbt_constraints.snowflake__have_references_priv","macro_sql":"{%- macro snowflake__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n{%- if verify_permissions is sameas true -%}\n\n{%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n{%- if \"REFERENCES\" in table_privileges or \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n{{ return(true) }}\n{%- endif -%}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.snowflake__lookup_table_columns":{"name":"snowflake__lookup_table_columns","package_name":"dbt_constraints","path":"macros\\snowflake__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\snowflake__create_constraints.sql","unique_id":"macro.dbt_constraints.snowflake__lookup_table_columns","macro_sql":"{%- macro snowflake__lookup_table_columns(table_relation, lookup_cache) -%}\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set lookup_query -%}\n        SHOW COLUMNS IN TABLE {{ table_relation }}\n        {%- endset -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- set not_null_col = [] -%}\n        {%- set semi_structured_col = [] -%}\n        {%- set upper_column_list = [] -%}\n        {%- for row in results.rows -%}\n            {%- do upper_column_list.append(row[\"column_name\"]|upper) -%}\n            {%- if row['null?'] == 'false' -%}\n                {%- do not_null_col.append(row[\"column_name\"]|upper) -%}\n            {%- endif -%}\n            {%- if row['data_type'] is string -%}\n                {%- set data_type = fromjson( row['data_type'] ) -%}\n                {%- if data_type[\"type\"] in ('VARIANT', 'ARRAY', 'OBJECT') -%}\n                    {%- do semi_structured_col.append(row[\"column_name\"]|upper) -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: upper_column_list }) -%}\n        {%- do lookup_cache.not_null_col.update({ table_relation: not_null_col }) -%}\n        {%- do lookup_cache.semi_structured_col.update({ table_relation: semi_structured_col }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.snowflake__lookup_table_privileges":{"name":"snowflake__lookup_table_privileges","package_name":"dbt_constraints","path":"macros\\snowflake__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\snowflake__create_constraints.sql","unique_id":"macro.dbt_constraints.snowflake__lookup_table_privileges","macro_sql":"{%- macro snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n\n{%- if table_relation.database not in lookup_cache.table_privileges -%}\n        {%- do log(\"Caching privileges for database: \" ~ table_relation.database, info=false) -%}\n\n        {%- set lookup_query -%}\n        select distinct\n            upper(tp.table_schema) as \"table_schema\",\n            upper(tp.table_name) as \"table_name\",\n            tp.privilege_type as \"privilege_type\"\n        from {{ table_relation.database }}.information_schema.table_privileges tp\n        where (is_role_in_session(tp.grantee) or is_database_role_in_session(tp.grantee))\n            and tp.privilege_type in ('OWNERSHIP', 'REFERENCES')\n        {%- endset -%}\n        {%- set privilege_list = run_query(lookup_query) -%}\n        {%- do lookup_cache.table_privileges.update({ table_relation.database: privilege_list }) -%}\n    {%- endif -%}\n\n{%- set tab_priv_list = [] -%}\n{%- set schema_name = table_relation.schema|upper -%}\n{%- set table_name = table_relation.identifier|upper -%}\n{%- for row in lookup_cache.table_privileges[table_relation.database].rows -%}\n        {%- if row[\"table_schema\"] == schema_name and row[\"table_name\"] == table_name -%}\n            {%- do tab_priv_list.append(row[\"privilege_type\"]) -%}\n        {%- endif -%}\n    {%- endfor -%}\n{{ return(tab_priv_list) }}\n\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.snowflake__unique_constraint_exists":{"name":"snowflake__unique_constraint_exists","package_name":"dbt_constraints","path":"macros\\snowflake__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\snowflake__create_constraints.sql","unique_id":"macro.dbt_constraints.snowflake__unique_constraint_exists","macro_sql":"{%- macro snowflake__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n{#- Check if we can find this constraint in the lookup cache -#}\n{%- if table_relation in lookup_cache.unique_keys -%}\n    {%- for constraint_name, cached_val in lookup_cache.unique_keys[table_relation].items() -%}\n        {%- if dbt_constraints.column_list_matches(cached_val.columns, column_names ) -%}\n            {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ constraint_name ~ \" \" ~ cached_val.columns ~ \" \" ~ cached_val.rely, info=false) -%}\n            {{ return(constraint_name) }}\n        {%- endif -%}\n    {% endfor %}\n    {{ return(none) }}\n{%- endif -%}\n\n{#- We didn't find a cache entry for this table so we will lookup existing constraints in DB -#}\n{%- do lookup_cache.unique_keys.update({table_relation: {}}) -%}\n\n{%- set lookup_query -%}\nSHOW UNIQUE KEYS IN TABLE {{ table_relation }}\n{%- endset -%}\n{%- set constraint_list = run_query(lookup_query) -%}\n{%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n    {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n        {%- set existing_constraint_name = (constraint.columns[\"constraint_name\"].values() | first) -%}\n        {%- set existing_columns = constraint.columns[\"column_name\"].values() -%}\n        {%- set existing_rely = (constraint.columns[\"rely\"].values() | first) -%}\n        {#- Add this constraint to the lookup cache -#}\n        {%- do lookup_cache.unique_keys[table_relation].update( {existing_constraint_name:\n            {   \"columns\": existing_columns,\n                \"rely\": existing_rely } }) -%}\n    {% endfor %}\n{%- endif -%}\n\n{%- set lookup_query -%}\nSHOW PRIMARY KEYS IN TABLE {{ table_relation }}\n{%- endset -%}\n{%- set constraint_list = run_query(lookup_query) -%}\n{%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n    {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n        {%- set existing_constraint_name = (constraint.columns[\"constraint_name\"].values() | first) -%}\n        {%- set existing_columns = constraint.columns[\"column_name\"].values() -%}\n        {%- set existing_rely = (constraint.columns[\"rely\"].values() | first) -%}\n        {#- Add this constraint to the lookup cache -#}\n        {%- do lookup_cache.unique_keys[table_relation].update( {existing_constraint_name:\n            {   \"columns\": existing_columns,\n                \"rely\": existing_rely } }) -%}\n    {% endfor %}\n{%- endif -%}\n\n{#- check again in lookup cache -#}\n{%- for constraint_name, cached_val in lookup_cache.unique_keys[table_relation].items() -%}\n    {%- if dbt_constraints.column_list_matches(cached_val.columns, column_names ) -%}\n        {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ constraint_name ~ \" \" ~ cached_val.columns ~ \" \" ~ cached_val.rely, info=false) -%}\n        {{ return(constraint_name) }}\n    {%- endif -%}\n{% endfor %}\n\n{#- If we get this far then the table does not have either constraint -#}\n{%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n{{ return(none) }}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.table_columns_all_exist":{"name":"table_columns_all_exist","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.table_columns_all_exist","macro_sql":"{%- macro table_columns_all_exist(table_relation, column_list, lookup_cache) -%}\n    {%- set tab_column_list = dbt_constraints.lookup_table_columns(table_relation, lookup_cache) -%}\n    {%- set check_columns = column_list|map('upper')|map('trim', '\"')|list -%}\n    {%- for column in check_columns if column not in tab_column_list -%}\n        {{ return(false) }}\n    {%- endfor -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_list","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.test_foreign_key":{"name":"test_foreign_key","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.test_foreign_key","macro_sql":"{%- test foreign_key(model,\n        column_name=none, fk_column_name=none, fk_column_names=[],\n        pk_table_name=none, to=none,\n        pk_column_name=none, pk_column_names=[], field=none,\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if pk_column_names|count == 0 and (pk_column_name or field) -%}\n        {%- do pk_column_names.append( (pk_column_name or field) ) -%}\n    {%- endif -%}\n    {%- if fk_column_names|count == 0 and (fk_column_name or column_name) -%}\n        {%- do fk_column_names.append( (fk_column_name or column_name) ) -%}\n    {%- endif -%}\n    {%- set pk_table_name = pk_table_name or to -%}\n\n    {{ return(adapter.dispatch('test_foreign_key', 'dbt_constraints')(model, fk_column_names, pk_table_name, pk_column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_constraints.test_primary_key":{"name":"test_primary_key","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.test_primary_key","macro_sql":"{%- test primary_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_primary_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_constraints.test_selected":{"name":"test_selected","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.test_selected","macro_sql":"{%- macro test_selected(test_model) -%}\n\n    {%- if test_model.unique_id in selected_resources -%}\n        {{ return(\"TEST_SELECTED\") }}\n    {%- endif -%}\n    {%- if test_model.attached_node in selected_resources -%} -%}\n        {{ return(\"MODEL_SELECTED\") }}\n    {%- endif -%}\n\n    {#- Check if a PK/UK should be created because it is referenced by a selected FK -#}\n    {%- if test_model.test_metadata.name in (\"primary_key\", \"unique_key\", \"unique_combination_of_columns\", \"unique\") -%}\n        {%- set pk_test_args = test_model.test_metadata.kwargs -%}\n        {%- set pk_test_columns = [] -%}\n        {%- if pk_test_args.column_names -%}\n            {%- set pk_test_columns =  pk_test_args.column_names -%}\n        {%- elif pk_test_args.combination_of_columns -%}\n            {%- set pk_test_columns =  pk_test_args.combination_of_columns -%}\n        {%- elif pk_test_args.column_name -%}\n            {%- set pk_test_columns =  [pk_test_args.column_name] -%}\n        {%- endif -%}\n        {%- for fk_model in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"test\")\n                if  fk_model.test_metadata\n                and fk_model.test_metadata.name in (\"foreign_key\", \"relationships\")\n                and test_model.attached_node in fk_model.depends_on.nodes\n                and ( (fk_model.unique_id and fk_model.unique_id in selected_resources)\n                    or (fk_model.attached_node and fk_model.attached_node in selected_resources) ) -%}\n            {%- set fk_test_args = fk_model.test_metadata.kwargs -%}\n            {%- set fk_test_columns = [] -%}\n            {%- if fk_test_args.pk_column_names -%}\n                {%- set fk_test_columns =  fk_test_args.pk_column_names -%}\n            {%- elif fk_test_args.pk_column_name -%}\n                {%- set fk_test_columns =  [fk_test_args.pk_column_name] -%}\n            {%- elif fk_test_args.field -%}\n                {%- set fk_test_columns =  [fk_test_args.field] -%}\n            {%- endif -%}\n            {%- if column_list_matches(pk_test_columns, fk_test_columns) -%}\n                {{ return(\"PK_UK_FOR_SELECTED_FK\") }}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(none) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"test_model","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.test_unique_key":{"name":"test_unique_key","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.test_unique_key","macro_sql":"{%- test unique_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_unique_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_constraints.truncate_relation":{"name":"truncate_relation","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.truncate_relation","macro_sql":"{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.unique_constraint_exists":{"name":"unique_constraint_exists","package_name":"dbt_constraints","path":"macros\\create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\create_constraints.sql","unique_id":"macro.dbt_constraints.unique_constraint_exists","macro_sql":"{%- macro unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('unique_constraint_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache) ) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.vertica__create_foreign_key":{"name":"vertica__create_foreign_key","package_name":"dbt_constraints","path":"macros\\vertica__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\vertica__create_constraints.sql","unique_id":"macro.dbt_constraints.vertica__create_foreign_key","macro_sql":"{%- macro vertica__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper | replace('\"', '') -%}\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names, lookup_cache) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set query -%}\n                    ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- do lookup_cache.foreign_keys.update({fk_table_relation: {constraint_name: fk_column_names} }) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"pk_table_relation","is_optional":false},{"name":"pk_column_names","is_optional":false},{"name":"fk_table_relation","is_optional":false},{"name":"fk_column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.vertica__create_not_null":{"name":"vertica__create_not_null","package_name":"dbt_constraints","path":"macros\\vertica__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\vertica__create_constraints.sql","unique_id":"macro.dbt_constraints.vertica__create_not_null","macro_sql":"{%- macro vertica__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n\n    {%- set existing_not_null_col = lookup_cache.not_null_col[table_relation] -%}\n\n    {%- set columns_to_change = [] -%}\n    {%- for column_name in column_names if column_name|upper not in existing_not_null_col -%}\n        {%- do columns_to_change.append(column_name) -%}\n        {%- do existing_not_null_col.append(column_name) -%}\n    {%- endfor -%}\n    {%- if columns_to_change|count > 0 -%}\n        {%- set columns_list = dbt_constraints.get_quoted_column_list(columns_to_change, quote_columns) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ALTER {{ modify_statement_csv }};\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- set constraint_key = table_relation.identifier ~ \"_\" ~ columns_to_change|join('_') ~ \"_NN\" -%}\n            {%- do lookup_cache.not_null_col.update({table_relation: existing_not_null_col }) -%}\n        {%- else -%}\n            {%- do log(\"Skipping not null constraint for \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because all columns are already not null\", info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.vertica__create_primary_key":{"name":"vertica__create_primary_key","package_name":"dbt_constraints","path":"macros\\vertica__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\vertica__create_constraints.sql","unique_id":"macro.dbt_constraints.vertica__create_primary_key","macro_sql":"{%- macro vertica__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper | replace('\"', '') -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.vertica__create_unique_key":{"name":"vertica__create_unique_key","package_name":"dbt_constraints","path":"macros\\vertica__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\vertica__create_constraints.sql","unique_id":"macro.dbt_constraints.vertica__create_unique_key","macro_sql":"{%- macro vertica__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper | replace('\"', '') -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"quote_columns","is_optional":false},{"name":"constraint_name","is_optional":false},{"name":"lookup_cache","is_optional":false},{"name":"rely_clause","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.vertica__foreign_key_exists":{"name":"vertica__foreign_key_exists","package_name":"dbt_constraints","path":"macros\\vertica__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\vertica__create_constraints.sql","unique_id":"macro.dbt_constraints.vertica__foreign_key_exists","macro_sql":"{%- macro vertica__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.foreign_keys -%}\n        {%- set cached_foreign_keys = lookup_cache.foreign_keys[table_relation] -%}\n        {%- for cached_columns in cached_foreign_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n        select constraint_name as fk_name, column_name as fk_column_name\n        from constraint_columns\n        where\n            table_schema ilike '{{table_relation.schema}}'\n          and table_name ilike '{{table_relation.identifier}}'\n          and constraint_type in ('f')\n        order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.foreign_keys.update({table_relation: {constraint.key_name: constraint.columns[\"fk_column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.vertica__get_create_index_sql":{"name":"vertica__get_create_index_sql","package_name":"dbt_constraints","path":"macros\\vertica__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\vertica__create_constraints.sql","unique_id":"macro.dbt_constraints.vertica__get_create_index_sql","macro_sql":"{%- macro vertica__get_create_index_sql(table_relation, lookup_cache) -%}\n\n    {%- do log(\"Skipping creation of indexes, they are not supported by Vertica\", info=true) -%}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.vertica__have_ownership_priv":{"name":"vertica__have_ownership_priv","package_name":"dbt_constraints","path":"macros\\vertica__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\vertica__create_constraints.sql","unique_id":"macro.dbt_constraints.vertica__have_ownership_priv","macro_sql":"{%- macro vertica__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.vertica__have_references_priv":{"name":"vertica__have_references_priv","package_name":"dbt_constraints","path":"macros\\vertica__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\vertica__create_constraints.sql","unique_id":"macro.dbt_constraints.vertica__have_references_priv","macro_sql":"{%- macro vertica__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"REFERENCES\" in table_privileges or \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"verify_permissions","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.vertica__lookup_table_columns":{"name":"vertica__lookup_table_columns","package_name":"dbt_constraints","path":"macros\\vertica__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\vertica__create_constraints.sql","unique_id":"macro.dbt_constraints.vertica__lookup_table_columns","macro_sql":"{%- macro vertica__lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set lookup_query -%}\n            select column_name, is_nullable\n            from columns\n            where table_schema ilike '{{table_relation.schema}}'\n              and table_name ilike '{{table_relation.identifier}}'\n        {%- endset -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- set not_null_col = [] -%}\n        {%- set upper_column_list = [] -%}\n        {%- for row in results.rows -%}\n            {%- do upper_column_list.append(row[\"column_name\"]|upper) -%}\n            {%- if row['is_nullable'] == False -%}\n                {%- do not_null_col.append(row[\"column_name\"]|upper) -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: upper_column_list }) -%}\n\n        {%- do lookup_cache.not_null_col.update({ table_relation: not_null_col }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.vertica__lookup_table_privileges":{"name":"vertica__lookup_table_privileges","package_name":"dbt_constraints","path":"macros\\vertica__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\vertica__create_constraints.sql","unique_id":"macro.dbt_constraints.vertica__lookup_table_privileges","macro_sql":"{%- macro vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n\n    {%- if table_relation.database not in lookup_cache.table_privileges -%}\n        {%- set lookup_query -%}\n            select distinct\n              upper(tp.table_schema) as \"table_schema\",\n              upper(tp.table_name) as \"table_name\",\n              tp.privilege_type as \"privilege_type\"\n            from {{table_relation.database}}.information_schema.table_privileges tp\n            where is_role_in_session(tp.grantee)\n              and tp.privilege_type in ('OWNERSHIP', 'REFERENCES')\n        {%- endset -%}\n        {%- do log(\"Caching privileges for database: \" ~ table_relation.database, info=false) -%}\n        {%- set privilege_list = run_query(lookup_query) -%}\n        {%- do lookup_cache.table_privileges.update({ table_relation.database: privilege_list }) -%}\n    {%- endif -%}\n\n    {%- set tab_priv_list = [] -%}\n    {%- set schema_name = table_relation.schema|upper -%}\n    {%- set table_name = table_relation.identifier|upper -%}\n    {%- for row in lookup_cache.table_privileges[table_relation.database].rows -%}\n        {%- if row[\"table_schema\"] == schema_name and row[\"table_name\"] == table_name -%}\n            {%- do tab_priv_list.append(row[\"privilege_type\"]) -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(tab_priv_list) }}\n\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_constraints.vertica__unique_constraint_exists":{"name":"vertica__unique_constraint_exists","package_name":"dbt_constraints","path":"macros\\vertica__create_constraints.sql","original_file_path":"dbt_packages\\dbt_constraints\\macros\\vertica__create_constraints.sql","unique_id":"macro.dbt_constraints.vertica__unique_constraint_exists","macro_sql":"{%- macro vertica__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.unique_keys -%}\n        {%- set cached_unique_keys = lookup_cache.unique_keys[table_relation] -%}\n        {%- for cached_columns in cached_unique_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n      select constraint_name, column_name\n      from constraint_columns\n      where\n          table_schema ilike '{{table_relation.schema}}'\n        and table_name ilike '{{table_relation.identifier}}'\n        and constraint_type in ('u')\n      order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    select constraint_name, column_name\n    from constraint_columns\n    where\n        table_schema ilike '{{table_relation.schema}}'\n      and table_name ilike '{{table_relation.identifier}}'\n      and constraint_type in ('p')\n    order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table_relation","is_optional":false},{"name":"column_names","is_optional":false},{"name":"lookup_cache","is_optional":false}],"resource_type":"macro"},"macro.dbt_core.apply_dynamic_data_mask":{"name":"apply_dynamic_data_mask","package_name":"dbt_core","path":"macros\\post_hook\\apply_dynamic_data_mask.sql","original_file_path":"macros\\post_hook\\apply_dynamic_data_mask.sql","unique_id":"macro.dbt_core.apply_dynamic_data_mask","macro_sql":"{%- macro apply_dynamic_data_mask(columns) -%}\r\n\r\n    {%- set database = this.database -%}\r\n    {%- set schema = this.schema -%}\r\n    {%- set table = this.table -%}\r\n\r\n    {%- set relation = load_relation(this) -%}\r\n    {%- set table_type = \"view\" if relation.is_view else \"table\" -%}\r\n\r\n    {%- set table_columns = adapter.get_columns_in_relation(relation) -%}\r\n\r\n    {% for column_name in columns -%}\r\n        {%- for column in table_columns -%}\r\n            {%- if column.name | upper == column_name | upper -%}\r\n\r\n                create masking policy if not exists {{ database }}.{{ schema }}.{{ table }}__{{ column_name }}__mask\r\n                as (val {{ column.dtype }}) returns {{ column.dtype }} ->\r\n                    case\r\n                        when lower(current_role()) in ('service_account')\r\n                        then val\r\n\r\n                        when array_contains(\r\n                            upper('{{ database }}__{{ schema }}__{{ table }}__{{ column_name }}__unmasked'),\r\n                            parse_json(current_available_roles())::array(varchar)\r\n                        )\r\n                        then val\r\n\r\n                        when array_contains(\r\n                            upper('{{ database }}__{{ schema }}__{{ table }}__unmasked'),\r\n                            parse_json(current_available_roles())::array(varchar)\r\n                        )\r\n                        then val\r\n\r\n                        when array_contains(\r\n                            upper('{{ database }}__{{ schema }}__unmasked'),\r\n                            parse_json(current_available_roles())::array(varchar)\r\n                        )\r\n                        then val\r\n\r\n                        when array_contains(\r\n                            '{{ database }}__unmasked',\r\n                            parse_json(current_available_roles())::array(varchar)\r\n                        )\r\n                        then val\r\n                        \r\n                        else\r\n                        {% if column.is_string() -%}\r\n                             md5(val)\r\n                        {%- elif column.is_number() -%}\r\n                            0\r\n                        {%- endif %}\r\n                    end\r\n                ;\r\n\r\n                alter {{ table_type }} if exists {{ database }}.{{ schema }}.{{ table }}\r\n                modify column {{ column_name }} set masking policy {{ database }}.{{ schema }}.{{ table }}__{{ column_name }}__mask\r\n                ;\r\n            {%- endif -%}\r\n        {%- endfor -%}\r\n    {% endfor %}\r\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"columns","is_optional":false}],"resource_type":"macro"},"macro.dbt_core.attribution_last_click_n_days_same_x":{"name":"attribution_last_click_n_days_same_x","package_name":"dbt_core","path":"macros\\model_templates\\marketing\\attribution_last_click_n_days_same_x.sql","original_file_path":"macros\\model_templates\\marketing\\attribution_last_click_n_days_same_x.sql","unique_id":"macro.dbt_core.attribution_last_click_n_days_same_x","macro_sql":"{% macro attribution_last_click_n_days_same_x(lookback_window, criteria=[]) -%}\r\n\r\n    with\r\n    attribution as (\r\n        select * from {{ ref(\"int_int_marketing__int_attributions\") }}\r\n    ),\r\n    transactions as (\r\n        select * from {{ ref(\"stg_transaction_db__transactions\") }}\r\n    ),\r\n    individual_party_keys as (\r\n        select * from {{ ref(\"stg_entity_resolution__individual_party_keys\") }}\r\n    ),\r\n    {% if criteria -%}\r\n        products as (\r\n            select * from {{ ref(\"stg_inventory_db__products\") }}\r\n        ),\r\n    {%- endif %}\r\n\r\n    transactions_with_entity as (\r\n        select\r\n            t.transaction_id,\r\n            t.product_id,\r\n            t.sales_channel,\r\n            t.transacted_at,\r\n            t.individual_party_key,\r\n            i.individual_id,\r\n            t._loaded_at\r\n        from transactions t\r\n        inner join individual_party_keys i on t.individual_party_key = i.individual_party_key\r\n        {% if is_incremental() -%}\r\n            where t._loaded_at >= (select max(_loaded_at) from {{ this }})\r\n        {%- endif %}\r\n    ),\r\n\r\n    attributed as (\r\n        select\r\n            {{ generate_sid([\"t.transaction_id\", \"t.product_id\", \"t.transacted_at\"]) }} attribution_sid,\r\n            {{ lookback_window }} lookback_window,\r\n            {{ criteria }} criteria,\r\n            a.hit_id,\r\n            i.individual_id,\r\n            a.campaign_sid,\r\n            t.transaction_id,\r\n            a.advertised_product_id,\r\n            t.product_id transacted_product_id,\r\n            t.sales_channel,\r\n            t.transacted_at,\r\n            a.attribution_start_at,\r\n            coalesce(\r\n                lag(a.attribution_start_at) over (\r\n                    partition by i.individual_id\r\n                    order by a.attribution_start_at, a.hit_id\r\n                ),\r\n                a.attribution_start_at + interval {{ \"'n days'\" | replace(\"n\", lookback_window) }}\r\n            ) attribution_end_at,\r\n            t._loaded_at\r\n        from attribution a\r\n        inner join individual_party_keys i on a.individual_party_key = i.individual_party_key\r\n        inner join transactions_with_entity t on true\r\n            and i.individual_id = t.individual_id\r\n            and t.transacted_at >= a.attribution_start_at\r\n        {% if criteria -%}\r\n            inner join products ap on a.advertised_product_id = ap.product_id\r\n            inner join products tp on t.product_id = tp.product_id\r\n        {%- endif %}\r\n        where true\r\n            {% if criteria -%}\r\n                {%- for criterion in criteria -%}\r\n                        and ap.{{- criterion }} = tp.{{- criterion }}\r\n                {% endfor -%}\r\n            {%- endif -%}\r\n        {%- if is_incremental() %}\r\n            and a._loaded_at >= (select max(_loaded_at) - interval {{ \"'n days'\" | replace(\"n\", lookback_window) }} from {{ this }})\r\n        {% endif %}\r\n        qualify t.transacted_at < attribution_end_at\r\n    )\r\n\r\n    select\r\n        *\r\n    from attributed\r\n    qualify 1 = row_number() over (partition by attribution_sid order by attribution_start_at desc)\r\n\r\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"lookback_window","is_optional":false},{"name":"criteria","is_optional":true}],"resource_type":"macro"},"macro.dbt_core.dlt_loaded_at":{"name":"dlt_loaded_at","package_name":"dbt_core","path":"macros\\column_macros\\dlt_loaded_at.sql","original_file_path":"macros\\column_macros\\dlt_loaded_at.sql","unique_id":"macro.dbt_core.dlt_loaded_at","macro_sql":"{% macro dlt_loaded_at() -%}\r\n    to_timestamp(split(_dlt_load_id, '.')[0])\r\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_core.generate_alias_name":{"name":"generate_alias_name","package_name":"dbt_core","path":"macros\\control\\generate_alias_name.sql","original_file_path":"macros\\control\\generate_alias_name.sql","unique_id":"macro.dbt_core.generate_alias_name","macro_sql":"{%- macro generate_alias_name(custom_alias_name=none, node=none) -%}\r\n    {%- if custom_alias_name -%}\r\n        {{- custom_alias_name | trim -}}\r\n    {%- else -%}\r\n        {{- return(node.name.split('__', maxsplit=1)[-1]) -}}\r\n    {%- endif -%}\r\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"custom_alias_name","is_optional":true},{"name":"node","is_optional":true}],"resource_type":"macro"},"macro.dbt_core.generate_database_name":{"name":"generate_database_name","package_name":"dbt_core","path":"macros\\control\\generate_database_name.sql","original_file_path":"macros\\control\\generate_database_name.sql","unique_id":"macro.dbt_core.generate_database_name","macro_sql":"{% macro generate_database_name(custom_database_name=none, node=none) -%}\r\n    {%- set default_database = target.database -%}\r\n    {%- if custom_database_name is none -%}\r\n\r\n        {{- default_database -}}\r\n\r\n    {%- elif target.name != \"prod\" -%}\r\n\r\n        _{{- target.name -}}_{{- custom_database_name -}}\r\n\r\n    {%- else -%}\r\n    \r\n        {{- custom_database_name -}}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"custom_database_name","is_optional":true},{"name":"node","is_optional":true}],"resource_type":"macro"},"macro.dbt_core.generate_schema_name":{"name":"generate_schema_name","package_name":"dbt_core","path":"macros\\control\\generate_schema_name.sql","original_file_path":"macros\\control\\generate_schema_name.sql","unique_id":"macro.dbt_core.generate_schema_name","macro_sql":"{%- macro generate_schema_name(custom_schema_name=none, node=none) -%}\r\n    {%- if custom_schema_name is none -%}\r\n\r\n        {%- set prefix = node.name.split(\"__\", maxsplit=1)[0] -%}\r\n        {%- set schema_name = prefix.split(\"_\", maxsplit=1)[-1] -%}\r\n\r\n    {%- else -%}\r\n\r\n        {%- set schema_name = custom_schema_name -%}\r\n\r\n    {%- endif -%}\r\n    \r\n    {%- set schema_name = schema_name | trim -%}\r\n    {%- if target.name == \"dev\" -%}\r\n\r\n        {{- schema_name -}}__{{- target.user -}}\r\n\r\n    {%- else -%}\r\n\r\n        {{- schema_name -}}\r\n        \r\n    {%- endif -%}\r\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"custom_schema_name","is_optional":true},{"name":"node","is_optional":true}],"resource_type":"macro"},"macro.dbt_core.generate_sid":{"name":"generate_sid","package_name":"dbt_core","path":"macros\\column_macros\\generate_sid.sql","original_file_path":"macros\\column_macros\\generate_sid.sql","unique_id":"macro.dbt_core.generate_sid","macro_sql":"{% macro generate_sid(column_names) -%}\r\n\r\n    (sha2(concat_ws(':'\r\n        {%- for column_name in column_names | sort() -%}\r\n            , nvl({{ column_name -}} :: string, '')\r\n        {%- endfor -%}\r\n        ),256))\r\n\r\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"column_names","is_optional":false}],"resource_type":"macro"},"macro.dbt_core.norm_hash":{"name":"norm_hash","package_name":"dbt_core","path":"macros\\column_macros\\pii_macros.sql","original_file_path":"macros\\column_macros\\pii_macros.sql","unique_id":"macro.dbt_core.norm_hash","macro_sql":"{% macro norm_hash(column_name) -%}\r\n\r\n    (sha2({{ normalize(column_name) }}, 256))\r\n\r\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"column_name","is_optional":false}],"resource_type":"macro"},"macro.dbt_core.normalize":{"name":"normalize","package_name":"dbt_core","path":"macros\\column_macros\\pii_macros.sql","original_file_path":"macros\\column_macros\\pii_macros.sql","unique_id":"macro.dbt_core.normalize","macro_sql":"{% macro normalize(column_name) -%}\r\n\r\n    lower(trim({{ column_name }} :: string))\r\n\r\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"column_name","is_optional":false}],"resource_type":"macro"},"macro.dbt_core.pst_to_utc":{"name":"pst_to_utc","package_name":"dbt_core","path":"macros\\column_macros\\pst_to_utc.sql","original_file_path":"macros\\column_macros\\pst_to_utc.sql","unique_id":"macro.dbt_core.pst_to_utc","macro_sql":"{% macro pst_to_utc(column_name) -%}\r\n\r\n    convert_timezone('America/Vancouver', 'UTC', {{ column_name }} :: timestamp)\r\n\r\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"column_name","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql":{"name":"_get_create_dynamic_iceberg_table_as_sql","package_name":"dbt_snowflake","path":"macros\\relations\\dynamic_table\\create.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\dynamic_table\\create.sql","unique_id":"macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql","macro_sql":"{% macro _get_create_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that creates a dynamic iceberg table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n    create dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', dynamic_table.catalog.external_volume) }}\n        {{ optional('catalog', dynamic_table.catalog.name) }}\n        base_location = '{{ dynamic_table.catalog.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(snowflake_node_config, relation, string) -> string","args":[{"name":"dynamic_table","is_optional":false},{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql":{"name":"_get_create_dynamic_standard_table_as_sql","package_name":"dbt_snowflake","path":"macros\\relations\\dynamic_table\\create.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\dynamic_table\\create.sql","unique_id":"macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql","macro_sql":"{% macro _get_create_dynamic_standard_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that creates a standard dynamic table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic standard table.\n-#}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(snowflake_node_config, relation, string) -> string","args":[{"name":"dynamic_table","is_optional":false},{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake._get_describe_iceberg_catalog_sql":{"name":"_get_describe_iceberg_catalog_sql","package_name":"dbt_snowflake","path":"macros\\relations\\dynamic_table\\describe.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\dynamic_table\\describe.sql","unique_id":"macro.dbt_snowflake._get_describe_iceberg_catalog_sql","macro_sql":"{% macro _get_describe_iceberg_catalog_sql(relation) %}\n{#-\n--  Produce DQL that returns all relevant metadata about an iceberg catalog\n--\n--  Args:\n--  - relation: SnowflakeRelation - the relation to describe\n--  Returns:\n--      A valid DQL statement that will return metadata associated with an iceberg catalog\n-#}\n    show iceberg tables\n        like '{{ relation.identifier }}'\n        in schema {{ relation.database }}.{{ relation.schema }}\n    ;\n    select\n        \"catalog_name\",\n        \"external_volume_name\",\n        \"base_location\"\n    from table(result_scan(last_query_id()))\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql":{"name":"_get_replace_dynamic_iceberg_table_as_sql","package_name":"dbt_snowflake","path":"macros\\relations\\dynamic_table\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\dynamic_table\\replace.sql","unique_id":"macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql","macro_sql":"{% macro _get_replace_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that replaces a dynamic iceberg table with a new dynamic iceberg table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n    create or replace dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', dynamic_table.catalog.external_volume) }}\n        {{ optional('catalog', dynamic_table.catalog.name) }}\n        base_location = '{{ dynamic_table.catalog.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(snowflake_node_config, relation, string) -> string","args":[{"name":"dynamic_table","is_optional":false},{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql":{"name":"_get_replace_dynamic_standard_table_as_sql","package_name":"dbt_snowflake","path":"macros\\relations\\dynamic_table\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\dynamic_table\\replace.sql","unique_id":"macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql","macro_sql":"{% macro _get_replace_dynamic_standard_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that replaces a standard dynamic table with a new standard dynamic table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic standard table.\n-#}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(snowflake_node_config, relation, string) -> string","args":[{"name":"dynamic_table","is_optional":false},{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type":{"name":"dbt_snowflake_get_tmp_relation_type","package_name":"dbt_snowflake","path":"macros\\materializations\\incremental.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\incremental.sql","unique_id":"macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type","macro_sql":"{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert and microbatch strategies can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy in [\"delete+insert\", \"microbatch\"] and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `\" ~ strategy ~ \"` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\", \"insert_overwrite\") %}\n    {{ return(\"view\") }}\n  {% elif strategy in [\"delete+insert\", \"microbatch\"] and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(strategy, optional[string], string) -> string","args":[{"name":"strategy","is_optional":false},{"name":"unique_key","is_optional":false},{"name":"language","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.dynamic_table_execute_build_sql":{"name":"dynamic_table_execute_build_sql","package_name":"dbt_snowflake","path":"macros\\materializations\\dynamic_table.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\dynamic_table.sql","unique_id":"macro.dbt_snowflake.dynamic_table_execute_build_sql","macro_sql":"{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"build_sql","is_optional":false},{"name":"existing_relation","is_optional":false},{"name":"target_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.dynamic_table_execute_no_op":{"name":"dynamic_table_execute_no_op","package_name":"dbt_snowflake","path":"macros\\materializations\\dynamic_table.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\dynamic_table.sql","unique_id":"macro.dbt_snowflake.dynamic_table_execute_no_op","macro_sql":"{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.dynamic_table_get_build_sql":{"name":"dynamic_table_get_build_sql","package_name":"dbt_snowflake","path":"macros\\materializations\\dynamic_table.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\dynamic_table.sql","unique_id":"macro.dbt_snowflake.dynamic_table_get_build_sql","macro_sql":"{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {# Deviation from core: explicitly provide an `on_configuration_change` default value. In core, the default value is already present at this point. #}\n        {% set on_configuration_change = config.get('on_configuration_change', 'apply') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"existing_relation","is_optional":false},{"name":"target_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.get_column_comment_sql":{"name":"get_column_comment_sql","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.get_column_comment_sql","macro_sql":"{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, dict[string, model]) -> string","args":[{"name":"column_name","is_optional":false},{"name":"column_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.get_current_query_tag":{"name":"get_current_query_tag","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.get_current_query_tag","macro_sql":"{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> agate_table","resource_type":"macro"},"macro.dbt_snowflake.get_persist_docs_column_list":{"name":"get_persist_docs_column_list","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.get_persist_docs_column_list","macro_sql":"{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(dict[string, model], list[string]) -> string","args":[{"name":"model_columns","is_optional":false},{"name":"query_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.materialization_dynamic_table_snowflake":{"name":"materialization_dynamic_table_snowflake","package_name":"dbt_snowflake","path":"macros\\materializations\\dynamic_table.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\dynamic_table.sql","unique_id":"macro.dbt_snowflake.materialization_dynamic_table_snowflake","macro_sql":"{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_snowflake.materialization_incremental_snowflake":{"name":"materialization_incremental_snowflake","package_name":"dbt_snowflake","path":"macros\\materializations\\incremental.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\incremental.sql","unique_id":"macro.dbt_snowflake.materialization_incremental_snowflake","macro_sql":"{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n\n  {%- set identifier = this.name -%}\n\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=config.get('table_format', 'default')\n  ) -%}\n\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n    {% if target_relation.needs_to_drop(existing_relation) %}\n      {{ drop_relation_if_exists(existing_relation) }}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif target_relation.table_format != existing_relation.table_format %}\n    {% do exceptions.raise_compiler_error(\n        \"Unable to update the incremental model `\" ~ target_relation.identifier ~ \"` from `\" ~ existing_relation.table_format ~ \"` to `\" ~ target_relation.table_format ~ \"` due to Snowflake limitation. Please execute with --full-refresh to drop the table and recreate in the new catalog.'\"\n      )\n    %}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %} -- noqa: existing_relation can be none\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_snowflake.materialization_seed_snowflake":{"name":"materialization_seed_snowflake","package_name":"dbt_snowflake","path":"macros\\materializations\\seed.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\seed.sql","unique_id":"macro.dbt_snowflake.materialization_seed_snowflake","macro_sql":"{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_snowflake.materialization_snapshot_snowflake":{"name":"materialization_snapshot_snowflake","package_name":"dbt_snowflake","path":"macros\\materializations\\snapshot.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\snapshot.sql","unique_id":"macro.dbt_snowflake.materialization_snapshot_snowflake","macro_sql":"{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_snowflake.materialization_table_snowflake":{"name":"materialization_table_snowflake","package_name":"dbt_snowflake","path":"macros\\materializations\\table.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\table.sql","unique_id":"macro.dbt_snowflake.materialization_table_snowflake","macro_sql":"{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set existing_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=config.get('table_format', 'default')\n   ) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if target_relation.needs_to_drop(existing_relation) %}\n    {{ drop_relation_if_exists(existing_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_snowflake.materialization_test_snowflake":{"name":"materialization_test_snowflake","package_name":"dbt_snowflake","path":"macros\\materializations\\test.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\test.sql","unique_id":"macro.dbt_snowflake.materialization_test_snowflake","macro_sql":"{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_snowflake.materialization_view_snowflake":{"name":"materialization_view_snowflake","package_name":"dbt_snowflake","path":"macros\\materializations\\view.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\view.sql","unique_id":"macro.dbt_snowflake.materialization_view_snowflake","macro_sql":"{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_snowflake.optional":{"name":"optional","package_name":"dbt_snowflake","path":"macros\\utils\\optional.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\utils\\optional.sql","unique_id":"macro.dbt_snowflake.optional","macro_sql":"{% macro optional(name, value, quote_char = '', equals_char = '= ') %}\n{#-\n--  Insert optional DDL parameters only when their value is provided; makes DDL statements more readable\n--\n--  Args:\n--  - name: the name of the DDL option\n--  - value: the value of the DDL option, may be None\n--  - quote_char: the quote character to use (e.g. '\"', '(', etc.), leave blank if unnecessary\n--  - equals_char: the equals character to use (e.g. '= ')\n--  Returns:\n--      If the value is not None (e.g. provided by the user), return the option setting DDL\n--      If the value is None, return an empty string\n-#}\n{%- set quote_char_right = ')' if quote_char == '(' else quote_char -%}\n{% if value is not none %}{{ name }} {{ equals_char }}{{ quote_char }}{{ value }}{{ quote_char_right }}{% endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, ANY, optional[string], optional[string]) -> string","args":[{"name":"name","is_optional":false},{"name":"value","is_optional":false},{"name":"quote_char","is_optional":true},{"name":"equals_char","is_optional":true}],"resource_type":"macro"},"macro.dbt_snowflake.set_query_tag":{"name":"set_query_tag","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.set_query_tag","macro_sql":"{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> optional[agate_table]","resource_type":"macro"},"macro.dbt_snowflake.snowflake__alter_column_comment":{"name":"snowflake__alter_column_comment","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.snowflake__alter_column_comment","macro_sql":"{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, dict[string, model]) -> string","args":[{"name":"relation","is_optional":false},{"name":"column_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__alter_column_type":{"name":"snowflake__alter_column_type","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.snowflake__alter_column_type","macro_sql":"{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} table {{ relation.render() }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"column_name","is_optional":false},{"name":"new_column_type","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns":{"name":"snowflake__alter_relation_add_remove_columns","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns","macro_sql":"{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, optional[list[base_column]], optional[list[base_column]]) -> string","args":[{"name":"relation","is_optional":false},{"name":"add_columns","is_optional":false},{"name":"remove_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__alter_relation_comment":{"name":"snowflake__alter_relation_comment","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.snowflake__alter_relation_comment","macro_sql":"{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation.render() }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"relation_comment","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__array_construct":{"name":"snowflake__array_construct","package_name":"dbt_snowflake","path":"macros\\utils\\array_construct.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\utils\\array_construct.sql","unique_id":"macro.dbt_snowflake.snowflake__array_construct","macro_sql":"{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"inputs","is_optional":false},{"name":"data_type","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__bool_or":{"name":"snowflake__bool_or","package_name":"dbt_snowflake","path":"macros\\utils\\bool_or.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\utils\\bool_or.sql","unique_id":"macro.dbt_snowflake.snowflake__bool_or","macro_sql":"{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"expression","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__can_clone_table":{"name":"snowflake__can_clone_table","package_name":"dbt_snowflake","path":"macros\\materializations\\clone.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\clone.sql","unique_id":"macro.dbt_snowflake.snowflake__can_clone_table","macro_sql":"{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_snowflake.snowflake__cast":{"name":"snowflake__cast","package_name":"dbt_snowflake","path":"macros\\utils\\cast.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\utils\\cast.sql","unique_id":"macro.dbt_snowflake.snowflake__cast","macro_sql":"{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string) -> string","args":[{"name":"field","is_optional":false},{"name":"type","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__catalog_equals":{"name":"snowflake__catalog_equals","package_name":"dbt_snowflake","path":"macros\\catalog.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\catalog.sql","unique_id":"macro.dbt_snowflake.snowflake__catalog_equals","macro_sql":"{% macro snowflake__catalog_equals(field, value) %}\n    \"{{ field }}\" ilike '{{ value }}' and upper(\"{{ field }}\") = upper('{{ value }}')\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string) -> string","args":[{"name":"field","is_optional":false},{"name":"value","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__check_schema_exists":{"name":"snowflake__check_schema_exists","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.snowflake__check_schema_exists","macro_sql":"{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"information_schema","is_optional":false},{"name":"schema","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__copy_grants":{"name":"snowflake__copy_grants","package_name":"dbt_snowflake","path":"macros\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\apply_grants.sql","unique_id":"macro.dbt_snowflake.snowflake__copy_grants","macro_sql":"{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_snowflake.snowflake__create_or_replace_clone":{"name":"snowflake__create_or_replace_clone","package_name":"dbt_snowflake","path":"macros\\materializations\\clone.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\clone.sql","unique_id":"macro.dbt_snowflake.snowflake__create_or_replace_clone","macro_sql":"{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"this_relation","is_optional":false},{"name":"defer_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__create_or_replace_view":{"name":"snowflake__create_or_replace_view","package_name":"dbt_snowflake","path":"macros\\relations\\view\\create.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\view\\create.sql","unique_id":"macro.dbt_snowflake.snowflake__create_or_replace_view","macro_sql":"{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_snowflake.snowflake__create_table_as":{"name":"snowflake__create_table_as","package_name":"dbt_snowflake","path":"macros\\relations\\table\\create.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\table\\create.sql","unique_id":"macro.dbt_snowflake.snowflake__create_table_as","macro_sql":"{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n\n  {%- if relation.is_iceberg_format and not adapter.behavior.enable_iceberg_materializations.no_warn %}\n    {% do exceptions.raise_compiler_error('Was unable to create model as Iceberg Table Format. Please set the `enable_iceberg_materializations` behavior flag to True in your dbt_project.yml. For more information, go to https://docs.getdbt.com/reference/resource-configs/snowflake-configs#iceberg-table-format') %}\n  {%- endif %}\n\n  {%- set materialization_prefix = relation.get_ddl_prefix_for_create(config.model.config, temporary) -%}\n  {%- set alter_prefix = relation.get_ddl_prefix_for_alter() -%}\n\n  {# Generate DDL/DML #}\n  {%- if language == 'sql' -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {{ materialization_prefix }} table {{ relation }}\n        {%- if relation.is_iceberg_format %}\n          {#\n            Valid DDL in CTAS statements. Plain create statements have a different order.\n            https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table\n          #}\n          {{ relation.get_iceberg_ddl_options(config.model.config) }}\n        {%- endif -%}\n\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter {{ alter_prefix }} table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary %}\n        alter {{ alter_prefix }} table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {%- if relation.is_iceberg_format %}\n      {% do exceptions.raise_compiler_error('Iceberg is incompatible with Python models. Please use a SQL model for the iceberg format.') %}\n    {%- endif %}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, table_type=relation.get_ddl_prefix_for_create(config.model.config, temporary)) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[string], relation, string, string) -> string","args":[{"name":"temporary","is_optional":false},{"name":"relation","is_optional":false},{"name":"compiled_code","is_optional":false},{"name":"language","is_optional":true}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__create_view_as":{"name":"snowflake__create_view_as","package_name":"dbt_snowflake","path":"macros\\relations\\view\\create.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\view\\create.sql","unique_id":"macro.dbt_snowflake.snowflake__create_view_as","macro_sql":"{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag":{"name":"snowflake__create_view_as_with_temp_flag","package_name":"dbt_snowflake","path":"macros\\relations\\view\\create.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\view\\create.sql","unique_id":"macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag","macro_sql":"{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false},{"name":"is_temporary","is_optional":true}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__current_timestamp":{"name":"snowflake__current_timestamp","package_name":"dbt_snowflake","path":"macros\\utils\\timestamps.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\utils\\timestamps.sql","unique_id":"macro.dbt_snowflake.snowflake__current_timestamp","macro_sql":"{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_snowflake.snowflake__current_timestamp_backcompat":{"name":"snowflake__current_timestamp_backcompat","package_name":"dbt_snowflake","path":"macros\\utils\\timestamps.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\utils\\timestamps.sql","unique_id":"macro.dbt_snowflake.snowflake__current_timestamp_backcompat","macro_sql":"{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat":{"name":"snowflake__current_timestamp_in_utc_backcompat","package_name":"dbt_snowflake","path":"macros\\utils\\timestamps.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\utils\\timestamps.sql","unique_id":"macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat","macro_sql":"{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_snowflake.snowflake__date_spine":{"name":"snowflake__date_spine","package_name":"dbt_snowflake","path":"macros\\utils\\date_spine.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\utils\\date_spine.sql","unique_id":"macro.dbt_snowflake.snowflake__date_spine","macro_sql":"{% macro snowflake__date_spine(datepart, start_date, end_date) %}\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from table(flatten(input => array_generate_range(0, {{ dbt.datediff(start_date, end_date, datepart) }} )))\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"datepart","is_optional":false},{"name":"start_date","is_optional":false},{"name":"end_date","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__describe_dynamic_table":{"name":"snowflake__describe_dynamic_table","package_name":"dbt_snowflake","path":"macros\\relations\\dynamic_table\\describe.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\dynamic_table\\describe.sql","unique_id":"macro.dbt_snowflake.snowflake__describe_dynamic_table","macro_sql":"{% macro snowflake__describe_dynamic_table(relation) %}\n{#-\n--  Get all relevant metadata about a dynamic table\n--\n--  Args:\n--  - relation: SnowflakeRelation - the relation to describe\n--  Returns:\n--      A dictionary with one or two entries depending on whether iceberg is enabled:\n--      - dynamic_table: the metadata associated with a standard dynamic table\n--      - catalog: the metadata associated with the iceberg catalog\n-#}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\",\n            \"refresh_mode\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set results = {'dynamic_table': run_query(_dynamic_table_sql)} %}\n\n    {% if adapter.behavior.enable_iceberg_materializations.no_warn %}\n        {% set _ = results.update({'catalog': run_query(_get_describe_iceberg_catalog_sql(relation))}) %}\n    {% endif %}\n\n    {% do return(results) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__escape_single_quotes":{"name":"snowflake__escape_single_quotes","package_name":"dbt_snowflake","path":"macros\\utils\\escape_single_quotes.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\utils\\escape_single_quotes.sql","unique_id":"macro.dbt_snowflake.snowflake__escape_single_quotes","macro_sql":"{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"expression","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql":{"name":"snowflake__get_alter_dynamic_table_as_sql","package_name":"dbt_snowflake","path":"macros\\relations\\dynamic_table\\alter.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\dynamic_table\\alter.sql","unique_id":"macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql","macro_sql":"{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, snowflake_node_config, relation, string) -> string","args":[{"name":"existing_relation","is_optional":false},{"name":"configuration_changes","is_optional":false},{"name":"target_relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_catalog":{"name":"snowflake__get_catalog","package_name":"dbt_snowflake","path":"macros\\catalog.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\catalog.sql","unique_id":"macro.dbt_snowflake.snowflake__get_catalog","macro_sql":"{% macro snowflake__get_catalog(database, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(database) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(database) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(information_schema, list[relation]) -> agate_table","args":[{"name":"database","is_optional":false},{"name":"schemas","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_catalog_columns_sql":{"name":"snowflake__get_catalog_columns_sql","package_name":"dbt_snowflake","path":"macros\\catalog.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\catalog.sql","unique_id":"macro.dbt_snowflake.snowflake__get_catalog_columns_sql","macro_sql":"{% macro snowflake__get_catalog_columns_sql(database) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ database }}.INFORMATION_SCHEMA.columns\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"database","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_catalog_relations":{"name":"snowflake__get_catalog_relations","package_name":"dbt_snowflake","path":"macros\\catalog.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\catalog.sql","unique_id":"macro.dbt_snowflake.snowflake__get_catalog_relations","macro_sql":"{% macro snowflake__get_catalog_relations(database, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(database) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(database) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(information_schema, list[relation]) -> agate_table","args":[{"name":"database","is_optional":false},{"name":"relations","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql":{"name":"snowflake__get_catalog_relations_where_clause_sql","package_name":"dbt_snowflake","path":"macros\\catalog.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\catalog.sql","unique_id":"macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql","macro_sql":"{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                    and {{ snowflake__catalog_equals('table_name', relation.identifier) }}\n                )\n            {% elif relation.schema %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[relation]) -> string","args":[{"name":"relations","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_catalog_results_sql":{"name":"snowflake__get_catalog_results_sql","package_name":"dbt_snowflake","path":"macros\\catalog.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\catalog.sql","unique_id":"macro.dbt_snowflake.snowflake__get_catalog_results_sql","macro_sql":"{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> string","resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql":{"name":"snowflake__get_catalog_schemas_where_clause_sql","package_name":"dbt_snowflake","path":"macros\\catalog.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\catalog.sql","unique_id":"macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql","macro_sql":"{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        ({{ snowflake__catalog_equals('table_schema', schema) }}){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(list[relation]) -> string","args":[{"name":"schemas","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_catalog_tables_sql":{"name":"snowflake__get_catalog_tables_sql","package_name":"dbt_snowflake","path":"macros\\catalog.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\catalog.sql","unique_id":"macro.dbt_snowflake.snowflake__get_catalog_tables_sql","macro_sql":"{% macro snowflake__get_catalog_tables_sql(database) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ database }}.INFORMATION_SCHEMA.tables\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(information_schema) -> string","args":[{"name":"database","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_columns_in_relation":{"name":"snowflake__get_columns_in_relation","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.snowflake__get_columns_in_relation","macro_sql":"{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation.render() }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation.render() }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> list[api.column]","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_create_backup_sql":{"name":"snowflake__get_create_backup_sql","package_name":"dbt_snowflake","path":"macros\\relations\\create_backup.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\create_backup.sql","unique_id":"macro.dbt_snowflake.snowflake__get_create_backup_sql","macro_sql":"{%- macro snowflake__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(relation, backup_relation.render()) }}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql":{"name":"snowflake__get_create_dynamic_table_as_sql","package_name":"dbt_snowflake","path":"macros\\relations\\dynamic_table\\create.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\dynamic_table\\create.sql","unique_id":"macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql","macro_sql":"{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n{#-\n--  Produce DDL that creates a dynamic table\n--\n--  Args:\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Globals:\n--  - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {# TODO: This should be dynamic_table.catalog.table_format, but we do not yet support `catalog` as a value #}\n    {%- if dynamic_table.table_format == 'iceberg' -%}\n        {{ _get_create_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {{ _get_create_dynamic_standard_table_as_sql(dynamic_table, relation, sql) }}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_create_sql":{"name":"snowflake__get_create_sql","package_name":"dbt_snowflake","path":"macros\\relations\\create.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\create.sql","unique_id":"macro.dbt_snowflake.snowflake__get_create_sql","macro_sql":"{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql":{"name":"snowflake__get_delete_insert_merge_sql","package_name":"dbt_snowflake","path":"macros\\materializations\\incremental\\merge.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\incremental\\merge.sql","unique_id":"macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql","macro_sql":"{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string|list[string]|none, list[base_column], optional[list[string]]) -> string","args":[{"name":"target","is_optional":false},{"name":"source","is_optional":false},{"name":"unique_key","is_optional":false},{"name":"dest_columns","is_optional":false},{"name":"incremental_predicates","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql":{"name":"snowflake__get_drop_dynamic_table_sql","package_name":"dbt_snowflake","path":"macros\\relations\\dynamic_table\\drop.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\dynamic_table\\drop.sql","unique_id":"macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql","macro_sql":"{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_drop_sql":{"name":"snowflake__get_drop_sql","package_name":"dbt_snowflake","path":"macros\\relations\\drop.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\drop.sql","unique_id":"macro.dbt_snowflake.snowflake__get_drop_sql","macro_sql":"{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_drop_table_sql":{"name":"snowflake__get_drop_table_sql","package_name":"dbt_snowflake","path":"macros\\relations\\table\\drop.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\table\\drop.sql","unique_id":"macro.dbt_snowflake.snowflake__get_drop_table_sql","macro_sql":"{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_drop_view_sql":{"name":"snowflake__get_drop_view_sql","package_name":"dbt_snowflake","path":"macros\\relations\\view\\drop.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\view\\drop.sql","unique_id":"macro.dbt_snowflake.snowflake__get_drop_view_sql","macro_sql":"{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes":{"name":"snowflake__get_dynamic_table_configuration_changes","package_name":"dbt_snowflake","path":"macros\\materializations\\dynamic_table.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\dynamic_table.sql","unique_id":"macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes","macro_sql":"{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"existing_relation","is_optional":false},{"name":"new_config","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_incremental_append_sql":{"name":"snowflake__get_incremental_append_sql","package_name":"dbt_snowflake","path":"macros\\materializations\\incremental\\merge.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\incremental\\merge.sql","unique_id":"macro.dbt_snowflake.snowflake__get_incremental_append_sql","macro_sql":"{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"get_incremental_append_sql","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_incremental_default_sql":{"name":"snowflake__get_incremental_default_sql","package_name":"dbt_snowflake","path":"macros\\materializations\\incremental.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\incremental.sql","unique_id":"macro.dbt_snowflake.snowflake__get_incremental_default_sql","macro_sql":"{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"arg_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_incremental_insert_overwrite_sql":{"name":"snowflake__get_incremental_insert_overwrite_sql","package_name":"dbt_snowflake","path":"macros\\materializations\\incremental\\insert_overwrite.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\incremental\\insert_overwrite.sql","unique_id":"macro.dbt_snowflake.snowflake__get_incremental_insert_overwrite_sql","macro_sql":"{% macro snowflake__get_incremental_insert_overwrite_sql(arg_dict) -%}\n  {{ adapter.dispatch('insert_overwrite_get_sql', 'dbt')(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"]) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(struct{ target_relation: relation, temp_relation: relation, unique_key: optional[string], dest_columns: list[base_column], incremental_predicates: optional[string]}) -> string","args":[{"name":"arg_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql":{"name":"snowflake__get_incremental_microbatch_sql","package_name":"dbt_snowflake","path":"macros\\materializations\\incremental\\merge.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\incremental\\merge.sql","unique_id":"macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql","macro_sql":"{% macro snowflake__get_incremental_microbatch_sql(arg_dict) %}\n    {%- set target = arg_dict[\"target_relation\"] -%}\n    {%- set source = arg_dict[\"temp_relation\"] -%}\n    {%- set dest_columns = arg_dict[\"dest_columns\"] -%}\n    {%- set incremental_predicates = [] if arg_dict.get('incremental_predicates') is none else arg_dict.get('incremental_predicates') -%}\n\n    {#-- Add additional incremental_predicates to filter for batch --#}\n    {% if model.batch and model.batch.event_time_start -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" >= to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_start ~ \"')\") %}\n    {% endif %}\n    {% if model.batch and model.batch.event_time_end -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" < to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_end ~ \"')\") %}\n    {% endif %}\n    {% do arg_dict.update({'incremental_predicates': incremental_predicates}) %}\n\n    delete from {{ target }} DBT_INTERNAL_TARGET\n    where (\n    {% for predicate in incremental_predicates %}\n        {%- if not loop.first %}and {% endif -%} {{ predicate }}\n    {% endfor %}\n    );\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"arg_dict","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_merge_sql":{"name":"snowflake__get_merge_sql","package_name":"dbt_snowflake","path":"macros\\materializations\\incremental\\merge.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\incremental\\merge.sql","unique_id":"macro.dbt_snowflake.snowflake__get_merge_sql","macro_sql":"{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, string|list[string]|none, list[base_column], optional[list[string]]) -> string","args":[{"name":"target","is_optional":false},{"name":"source_sql","is_optional":false},{"name":"unique_key","is_optional":false},{"name":"dest_columns","is_optional":false},{"name":"incremental_predicates","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_relation_last_modified":{"name":"snowflake__get_relation_last_modified","package_name":"dbt_snowflake","path":"macros\\metadata.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\metadata.sql","unique_id":"macro.dbt_snowflake.snowflake__get_relation_last_modified","macro_sql":"{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"information_schema","is_optional":false},{"name":"relations","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_rename_intermediate_sql":{"name":"snowflake__get_rename_intermediate_sql","package_name":"dbt_snowflake","path":"macros\\relations\\rename_intermediate.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\rename_intermediate.sql","unique_id":"macro.dbt_snowflake.snowflake__get_rename_intermediate_sql","macro_sql":"{%- macro snowflake__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(intermediate_relation, relation.render()) }}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_rename_table_sql":{"name":"snowflake__get_rename_table_sql","package_name":"dbt_snowflake","path":"macros\\relations\\table\\rename.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\table\\rename.sql","unique_id":"macro.dbt_snowflake.snowflake__get_rename_table_sql","macro_sql":"{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    /*\n    Rename or move a table to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"new_name","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_rename_view_sql":{"name":"snowflake__get_rename_view_sql","package_name":"dbt_snowflake","path":"macros\\relations\\view\\rename.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\view\\rename.sql","unique_id":"macro.dbt_snowflake.snowflake__get_rename_view_sql","macro_sql":"{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    /*\n    Rename or move a view to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"new_name","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql":{"name":"snowflake__get_replace_dynamic_table_sql","package_name":"dbt_snowflake","path":"macros\\relations\\dynamic_table\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\dynamic_table\\replace.sql","unique_id":"macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql","macro_sql":"{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) -%}\n{#-\n--  Produce DDL that replaces a dynamic table with a new dynamic table\n--\n--  Args:\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Globals:\n--  - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic table.\n\n-- Deviation: SnowflakeRelation does not yet support iceberg\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {# TODO: This should be dynamic_table.catalog.table_format, but we do not yet support `catalog` as a value #}\n    {%- if dynamic_table.table_format == 'iceberg' -%}\n        {{ _get_replace_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {{ _get_replace_dynamic_standard_table_as_sql(dynamic_table, relation, sql) }}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, string) -> string","args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_replace_sql":{"name":"snowflake__get_replace_sql","package_name":"dbt_snowflake","path":"macros\\relations\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\replace.sql","unique_id":"macro.dbt_snowflake.snowflake__get_replace_sql","macro_sql":"{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, relation, string) -> string","args":[{"name":"existing_relation","is_optional":false},{"name":"target_relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_replace_table_sql":{"name":"snowflake__get_replace_table_sql","package_name":"dbt_snowflake","path":"macros\\relations\\table\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\table\\replace.sql","unique_id":"macro.dbt_snowflake.snowflake__get_replace_table_sql","macro_sql":"{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__get_replace_view_sql":{"name":"snowflake__get_replace_view_sql","package_name":"dbt_snowflake","path":"macros\\relations\\view\\replace.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\view\\replace.sql","unique_id":"macro.dbt_snowflake.snowflake__get_replace_view_sql","macro_sql":"{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"sql","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__insert_overwrite_get_sql":{"name":"snowflake__insert_overwrite_get_sql","package_name":"dbt_snowflake","path":"macros\\materializations\\incremental\\insert_overwrite.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\incremental\\insert_overwrite.sql","unique_id":"macro.dbt_snowflake.snowflake__insert_overwrite_get_sql","macro_sql":"{% macro snowflake__insert_overwrite_get_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dml -%}\n\n    {%- set overwrite_columns = config.get('overwrite_columns', []) -%}\n\n    {{ config.get('sql_header', '') }}\n\n    {% set target_columns_list = '(' ~ ', '.join(overwrite_columns) ~ ')' if overwrite_columns else '' %}\n    {% set source_query_columns_list = ', '.join(overwrite_columns) if overwrite_columns else '*' %}\n    insert overwrite into {{ target.render() }} {{ target_columns_list }}\n        select {{ source_query_columns_list }}\n        from {{ source.render() }}\n\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation, relation, optional[string], list[base_column]) -> string","args":[{"name":"target","is_optional":false},{"name":"source","is_optional":false},{"name":"unique_key","is_optional":false},{"name":"dest_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__list_relations_without_caching":{"name":"snowflake__list_relations_without_caching","package_name":"dbt_snowflake","path":"macros\\metadata\\list_relations_without_caching.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\metadata\\list_relations_without_caching.sql","unique_id":"macro.dbt_snowflake.snowflake__list_relations_without_caching","macro_sql":"{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10000, max_results_per_iter=10000) %}\n\n    {%- if schema_relation is string -%}\n        {%- set schema = schema_relation -%}\n    {%- else -%}\n        {%- set schema = schema_relation.include(identifier=False) -%}\n    {%- endif -%}\n\n    {%- set max_results_per_iter = adapter.config.flags.get('list_relations_per_page', max_results_per_iter) -%}\n    {%- set max_iter = adapter.config.flags.get('list_relations_page_limit', max_iter) -%}\n    {%- set too_many_relations_msg -%}\n        dbt is currently configured to list a maximum of {{ max_results_per_iter * max_iter }} objects per schema.\n        {{ schema }} exceeds this limit. If this is expected, you may configure this limit\n        by setting list_relations_per_page and list_relations_page_limit in your project flags.\n        It is recommended to start by increasing list_relations_page_limit.\n    {%- endset -%}\n\n    {%- set paginated_state = namespace(paginated_results=[], watermark=none) -%}\n\n    {%- do run_query('alter session set quoted_identifiers_ignore_case = false;') -%}\n\n    {#-\n        loop an extra time to catch the breach of max iterations\n        Note: while range is 0-based, loop.index starts at 1\n    -#}\n    {%- for _ in range(max_iter + 1) -%}\n\n        {#-\n            raise a warning and break if we still didn't exit and we're beyond the max iterations limit\n            Note: while range is 0-based, loop.index starts at 1\n        -#}\n        {%- if loop.index == max_iter + 1 -%}\n            {%- do exceptions.warn(too_many_relations_msg) -%}\n            {%- break -%}\n        {%- endif -%}\n\n        {%- set show_objects_sql = snowflake__show_objects_sql(schema, max_results_per_iter, paginated_state.watermark) -%}\n        {%- set paginated_result = run_query(show_objects_sql) -%}\n        {%- do paginated_state.paginated_results.append(paginated_result) -%}\n        {%- set paginated_state.watermark = paginated_result.columns.get('name').values()[-1] -%}\n\n        {#- we got less results than the max_results_per_iter (includes 0), meaning we reached the end -#}\n        {%- if (paginated_result | length) < max_results_per_iter -%}\n            {%- break -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- do run_query('alter session unset quoted_identifiers_ignore_case;') -%}\n\n    {#- grab the first table in the paginated results to access the `merge` method -#}\n    {%- set agate_table = paginated_state.paginated_results[0] -%}\n    {%- do return(agate_table.merge(paginated_state.paginated_results)) -%}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"schema_relation","is_optional":false},{"name":"max_iter","is_optional":true},{"name":"max_results_per_iter","is_optional":true}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__list_schemas":{"name":"snowflake__list_schemas","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.snowflake__list_schemas","macro_sql":"{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> agate_table","args":[{"name":"database","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__load_csv_rows":{"name":"snowflake__load_csv_rows","package_name":"dbt_snowflake","path":"macros\\materializations\\seed.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\seed.sql","unique_id":"macro.dbt_snowflake.snowflake__load_csv_rows","macro_sql":"{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(model, agate_table) -> string","args":[{"name":"model","is_optional":false},{"name":"agate_table","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__refresh_dynamic_table":{"name":"snowflake__refresh_dynamic_table","package_name":"dbt_snowflake","path":"macros\\relations\\dynamic_table\\refresh.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\dynamic_table\\refresh.sql","unique_id":"macro.dbt_snowflake.snowflake__refresh_dynamic_table","macro_sql":"{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__rename_relation":{"name":"snowflake__rename_relation","package_name":"dbt_snowflake","path":"macros\\relations\\rename.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\relations\\rename.sql","unique_id":"macro.dbt_snowflake.snowflake__rename_relation","macro_sql":"{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"from_relation","is_optional":false},{"name":"to_relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__right":{"name":"snowflake__right","package_name":"dbt_snowflake","path":"macros\\utils\\right.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\utils\\right.sql","unique_id":"macro.dbt_snowflake.snowflake__right","macro_sql":"{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"string_text","is_optional":false},{"name":"length_expression","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__safe_cast":{"name":"snowflake__safe_cast","package_name":"dbt_snowflake","path":"macros\\utils\\safe_cast.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\utils\\safe_cast.sql","unique_id":"macro.dbt_snowflake.snowflake__safe_cast","macro_sql":"{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string) -> string","args":[{"name":"field","is_optional":false},{"name":"type","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__set_query_tag":{"name":"snowflake__set_query_tag","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.snowflake__set_query_tag","macro_sql":"{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"() -> optional[agate_table]","resource_type":"macro"},"macro.dbt_snowflake.snowflake__show_object_metadata":{"name":"snowflake__show_object_metadata","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.snowflake__show_object_metadata","macro_sql":"{% macro snowflake__show_object_metadata(relation) %}\n  {%- set sql -%}\n    show objects in {{ relation.include(identifier=False) }} starts with '{{ relation.identifier }}' limit 1\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {{ return(result) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> agate_table","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__show_objects_sql":{"name":"snowflake__show_objects_sql","package_name":"dbt_snowflake","path":"macros\\metadata\\list_relations_without_caching.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\metadata\\list_relations_without_caching.sql","unique_id":"macro.dbt_snowflake.snowflake__show_objects_sql","macro_sql":"{% macro snowflake__show_objects_sql(schema, max_results_per_iter=10000, watermark=none) %}\n\n{%- set _sql -%}\nshow objects in {{ schema }}\n    limit {{ max_results_per_iter }}\n    {% if watermark is not none -%} from '{{ watermark }}' {%- endif %}\n;\n{%- endset -%}\n\n{%- do return(_sql) -%}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"schema","is_optional":false},{"name":"max_results_per_iter","is_optional":true},{"name":"watermark","is_optional":true}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__snapshot_get_time":{"name":"snowflake__snapshot_get_time","package_name":"dbt_snowflake","path":"macros\\utils\\timestamps.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\utils\\timestamps.sql","unique_id":"macro.dbt_snowflake.snowflake__snapshot_get_time","macro_sql":"{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_snowflake.snowflake__snapshot_merge_sql":{"name":"snowflake__snapshot_merge_sql","package_name":"dbt_snowflake","path":"macros\\materializations\\incremental\\merge.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\materializations\\incremental\\merge.sql","unique_id":"macro.dbt_snowflake.snowflake__snapshot_merge_sql","macro_sql":"{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string, string, list[base_column]) -> string","args":[{"name":"target","is_optional":false},{"name":"source","is_optional":false},{"name":"insert_cols","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__snapshot_string_as_time":{"name":"snowflake__snapshot_string_as_time","package_name":"dbt_snowflake","path":"macros\\utils\\timestamps.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\utils\\timestamps.sql","unique_id":"macro.dbt_snowflake.snowflake__snapshot_string_as_time","macro_sql":"{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"timestamp","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement":{"name":"snowflake__support_multiple_grantees_per_dcl_statement","package_name":"dbt_snowflake","path":"macros\\apply_grants.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\apply_grants.sql","unique_id":"macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement","macro_sql":"{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_snowflake.snowflake__truncate_relation":{"name":"snowflake__truncate_relation","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.snowflake__truncate_relation","macro_sql":"{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation.render() }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(relation) -> string","args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake__unset_query_tag":{"name":"snowflake__unset_query_tag","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.snowflake__unset_query_tag","macro_sql":"{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[string]) -> string","args":[{"name":"original_query_tag","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.snowflake_dml_explicit_transaction":{"name":"snowflake_dml_explicit_transaction","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.snowflake_dml_explicit_transaction","macro_sql":"{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(string) -> string","args":[{"name":"dml","is_optional":false}],"resource_type":"macro"},"macro.dbt_snowflake.unset_query_tag":{"name":"unset_query_tag","package_name":"dbt_snowflake","path":"macros\\adapters.sql","original_file_path":"dbt_internal_packages\\dbt-snowflake\\macros\\adapters.sql","unique_id":"macro.dbt_snowflake.unset_query_tag","macro_sql":"{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"funcsign":"(optional[string]) -> string","args":[{"name":"original_query_tag","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils._bigquery__get_matching_schemata":{"name":"_bigquery__get_matching_schemata","package_name":"dbt_utils","path":"macros\\sql\\get_tables_by_pattern_sql.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils._bigquery__get_matching_schemata","macro_sql":"{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"schema_pattern","is_optional":false},{"name":"database","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils._is_ephemeral":{"name":"_is_ephemeral","package_name":"dbt_utils","path":"macros\\jinja_helpers\\_is_ephemeral.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\jinja_helpers\\_is_ephemeral.sql","unique_id":"macro.dbt_utils._is_ephemeral","macro_sql":"{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"obj","is_optional":false},{"name":"macro","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils._is_relation":{"name":"_is_relation","package_name":"dbt_utils","path":"macros\\jinja_helpers\\_is_relation.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\jinja_helpers\\_is_relation.sql","unique_id":"macro.dbt_utils._is_relation","macro_sql":"{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"obj","is_optional":false},{"name":"macro","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.bigquery__deduplicate":{"name":"bigquery__deduplicate","package_name":"dbt_utils","path":"macros\\sql\\deduplicate.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\deduplicate.sql","unique_id":"macro.dbt_utils.bigquery__deduplicate","macro_sql":"{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"partition_by","is_optional":false},{"name":"order_by","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.bigquery__get_tables_by_pattern_sql":{"name":"bigquery__get_tables_by_pattern_sql","package_name":"dbt_utils","path":"macros\\sql\\get_tables_by_pattern_sql.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils.bigquery__get_tables_by_pattern_sql","macro_sql":"{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"schema_pattern","is_optional":false},{"name":"table_pattern","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.bigquery__haversine_distance":{"name":"bigquery__haversine_distance","package_name":"dbt_utils","path":"macros\\sql\\haversine_distance.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\haversine_distance.sql","unique_id":"macro.dbt_utils.bigquery__haversine_distance","macro_sql":"{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"lat1","is_optional":false},{"name":"lon1","is_optional":false},{"name":"lat2","is_optional":false},{"name":"lon2","is_optional":false},{"name":"unit","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.databricks__deduplicate":{"name":"databricks__deduplicate","package_name":"dbt_utils","path":"macros\\sql\\deduplicate.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\deduplicate.sql","unique_id":"macro.dbt_utils.databricks__deduplicate","macro_sql":"{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"partition_by","is_optional":false},{"name":"order_by","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.databricks__get_table_types_sql":{"name":"databricks__get_table_types_sql","package_name":"dbt_utils","path":"macros\\sql\\get_table_types_sql.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_table_types_sql.sql","unique_id":"macro.dbt_utils.databricks__get_table_types_sql","macro_sql":"{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.date_spine":{"name":"date_spine","package_name":"dbt_utils","path":"macros\\sql\\date_spine.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\date_spine.sql","unique_id":"macro.dbt_utils.date_spine","macro_sql":"{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"datepart","is_optional":false},{"name":"start_date","is_optional":false},{"name":"end_date","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.deduplicate":{"name":"deduplicate","package_name":"dbt_utils","path":"macros\\sql\\deduplicate.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\deduplicate.sql","unique_id":"macro.dbt_utils.deduplicate","macro_sql":"{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"partition_by","is_optional":false},{"name":"order_by","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__date_spine":{"name":"default__date_spine","package_name":"dbt_utils","path":"macros\\sql\\date_spine.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\date_spine.sql","unique_id":"macro.dbt_utils.default__date_spine","macro_sql":"{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"datepart","is_optional":false},{"name":"start_date","is_optional":false},{"name":"end_date","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__deduplicate":{"name":"default__deduplicate","package_name":"dbt_utils","path":"macros\\sql\\deduplicate.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\deduplicate.sql","unique_id":"macro.dbt_utils.default__deduplicate","macro_sql":"{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"partition_by","is_optional":false},{"name":"order_by","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__generate_series":{"name":"default__generate_series","package_name":"dbt_utils","path":"macros\\sql\\generate_series.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\generate_series.sql","unique_id":"macro.dbt_utils.default__generate_series","macro_sql":"{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"upper_bound","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__generate_surrogate_key":{"name":"default__generate_surrogate_key","package_name":"dbt_utils","path":"macros\\sql\\generate_surrogate_key.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\generate_surrogate_key.sql","unique_id":"macro.dbt_utils.default__generate_surrogate_key","macro_sql":"{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field_list","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__get_column_values":{"name":"default__get_column_values","package_name":"dbt_utils","path":"macros\\sql\\get_column_values.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_column_values.sql","unique_id":"macro.dbt_utils.default__get_column_values","macro_sql":"{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table","is_optional":false},{"name":"column","is_optional":false},{"name":"order_by","is_optional":true},{"name":"max_records","is_optional":true},{"name":"default","is_optional":true},{"name":"where","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__get_filtered_columns_in_relation":{"name":"default__get_filtered_columns_in_relation","package_name":"dbt_utils","path":"macros\\sql\\get_filtered_columns_in_relation.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_filtered_columns_in_relation.sql","unique_id":"macro.dbt_utils.default__get_filtered_columns_in_relation","macro_sql":"{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"from","is_optional":false},{"name":"except","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__get_intervals_between":{"name":"default__get_intervals_between","package_name":"dbt_utils","path":"macros\\sql\\date_spine.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\date_spine.sql","unique_id":"macro.dbt_utils.default__get_intervals_between","macro_sql":"{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"start_date","is_optional":false},{"name":"end_date","is_optional":false},{"name":"datepart","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__get_powers_of_two":{"name":"default__get_powers_of_two","package_name":"dbt_utils","path":"macros\\sql\\generate_series.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\generate_series.sql","unique_id":"macro.dbt_utils.default__get_powers_of_two","macro_sql":"{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"upper_bound","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__get_query_results_as_dict":{"name":"default__get_query_results_as_dict","package_name":"dbt_utils","path":"macros\\sql\\get_query_results_as_dict.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_query_results_as_dict.sql","unique_id":"macro.dbt_utils.default__get_query_results_as_dict","macro_sql":"{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"query","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__get_relations_by_pattern":{"name":"default__get_relations_by_pattern","package_name":"dbt_utils","path":"macros\\sql\\get_relations_by_pattern.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_relations_by_pattern.sql","unique_id":"macro.dbt_utils.default__get_relations_by_pattern","macro_sql":"{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"schema_pattern","is_optional":false},{"name":"table_pattern","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__get_relations_by_prefix":{"name":"default__get_relations_by_prefix","package_name":"dbt_utils","path":"macros\\sql\\get_relations_by_prefix.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_relations_by_prefix.sql","unique_id":"macro.dbt_utils.default__get_relations_by_prefix","macro_sql":"{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"schema","is_optional":false},{"name":"prefix","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__get_single_value":{"name":"default__get_single_value","package_name":"dbt_utils","path":"macros\\sql\\get_single_value.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_single_value.sql","unique_id":"macro.dbt_utils.default__get_single_value","macro_sql":"{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"query","is_optional":false},{"name":"default","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__get_table_types_sql":{"name":"default__get_table_types_sql","package_name":"dbt_utils","path":"macros\\sql\\get_table_types_sql.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_table_types_sql.sql","unique_id":"macro.dbt_utils.default__get_table_types_sql","macro_sql":"{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.default__get_tables_by_pattern_sql":{"name":"default__get_tables_by_pattern_sql","package_name":"dbt_utils","path":"macros\\sql\\get_tables_by_pattern_sql.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils.default__get_tables_by_pattern_sql","macro_sql":"{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"schema_pattern","is_optional":false},{"name":"table_pattern","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__get_tables_by_prefix_sql":{"name":"default__get_tables_by_prefix_sql","package_name":"dbt_utils","path":"macros\\sql\\get_tables_by_prefix_sql.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_tables_by_prefix_sql.sql","unique_id":"macro.dbt_utils.default__get_tables_by_prefix_sql","macro_sql":"{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"schema","is_optional":false},{"name":"prefix","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__get_url_host":{"name":"default__get_url_host","package_name":"dbt_utils","path":"macros\\web\\get_url_host.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\web\\get_url_host.sql","unique_id":"macro.dbt_utils.default__get_url_host","macro_sql":"{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__get_url_parameter":{"name":"default__get_url_parameter","package_name":"dbt_utils","path":"macros\\web\\get_url_parameter.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\web\\get_url_parameter.sql","unique_id":"macro.dbt_utils.default__get_url_parameter","macro_sql":"{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field","is_optional":false},{"name":"url_parameter","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__get_url_path":{"name":"default__get_url_path","package_name":"dbt_utils","path":"macros\\web\\get_url_path.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\web\\get_url_path.sql","unique_id":"macro.dbt_utils.default__get_url_path","macro_sql":"{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__group_by":{"name":"default__group_by","package_name":"dbt_utils","path":"macros\\sql\\groupby.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\groupby.sql","unique_id":"macro.dbt_utils.default__group_by","macro_sql":"{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"n","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__haversine_distance":{"name":"default__haversine_distance","package_name":"dbt_utils","path":"macros\\sql\\haversine_distance.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\haversine_distance.sql","unique_id":"macro.dbt_utils.default__haversine_distance","macro_sql":"{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"lat1","is_optional":false},{"name":"lon1","is_optional":false},{"name":"lat2","is_optional":false},{"name":"lon2","is_optional":false},{"name":"unit","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__log_info":{"name":"default__log_info","package_name":"dbt_utils","path":"macros\\jinja_helpers\\log_info.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\jinja_helpers\\log_info.sql","unique_id":"macro.dbt_utils.default__log_info","macro_sql":"{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"message","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__nullcheck":{"name":"default__nullcheck","package_name":"dbt_utils","path":"macros\\sql\\nullcheck.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\nullcheck.sql","unique_id":"macro.dbt_utils.default__nullcheck","macro_sql":"{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"cols","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__nullcheck_table":{"name":"default__nullcheck_table","package_name":"dbt_utils","path":"macros\\sql\\nullcheck_table.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\nullcheck_table.sql","unique_id":"macro.dbt_utils.default__nullcheck_table","macro_sql":"{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__pivot":{"name":"default__pivot","package_name":"dbt_utils","path":"macros\\sql\\pivot.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\pivot.sql","unique_id":"macro.dbt_utils.default__pivot","macro_sql":"{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"column","is_optional":false},{"name":"values","is_optional":false},{"name":"alias","is_optional":true},{"name":"agg","is_optional":true},{"name":"cmp","is_optional":true},{"name":"prefix","is_optional":true},{"name":"suffix","is_optional":true},{"name":"then_value","is_optional":true},{"name":"else_value","is_optional":true},{"name":"quote_identifiers","is_optional":true},{"name":"distinct","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__pretty_log_format":{"name":"default__pretty_log_format","package_name":"dbt_utils","path":"macros\\jinja_helpers\\pretty_log_format.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\jinja_helpers\\pretty_log_format.sql","unique_id":"macro.dbt_utils.default__pretty_log_format","macro_sql":"{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"message","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__pretty_time":{"name":"default__pretty_time","package_name":"dbt_utils","path":"macros\\jinja_helpers\\pretty_time.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\jinja_helpers\\pretty_time.sql","unique_id":"macro.dbt_utils.default__pretty_time","macro_sql":"{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"format","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__safe_add":{"name":"default__safe_add","package_name":"dbt_utils","path":"macros\\sql\\safe_add.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\safe_add.sql","unique_id":"macro.dbt_utils.default__safe_add","macro_sql":"{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field_list","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__safe_divide":{"name":"default__safe_divide","package_name":"dbt_utils","path":"macros\\sql\\safe_divide.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\safe_divide.sql","unique_id":"macro.dbt_utils.default__safe_divide","macro_sql":"{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"numerator","is_optional":false},{"name":"denominator","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__safe_subtract":{"name":"default__safe_subtract","package_name":"dbt_utils","path":"macros\\sql\\safe_subtract.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\safe_subtract.sql","unique_id":"macro.dbt_utils.default__safe_subtract","macro_sql":"{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field_list","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__star":{"name":"default__star","package_name":"dbt_utils","path":"macros\\sql\\star.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\star.sql","unique_id":"macro.dbt_utils.default__star","macro_sql":"{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"from","is_optional":false},{"name":"relation_alias","is_optional":true},{"name":"except","is_optional":true},{"name":"prefix","is_optional":true},{"name":"suffix","is_optional":true},{"name":"quote_identifiers","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__surrogate_key":{"name":"default__surrogate_key","package_name":"dbt_utils","path":"macros\\sql\\surrogate_key.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\surrogate_key.sql","unique_id":"macro.dbt_utils.default__surrogate_key","macro_sql":"{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field_list","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__test_accepted_range":{"name":"default__test_accepted_range","package_name":"dbt_utils","path":"macros\\generic_tests\\accepted_range.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\accepted_range.sql","unique_id":"macro.dbt_utils.default__test_accepted_range","macro_sql":"{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"column_name","is_optional":false},{"name":"min_value","is_optional":true},{"name":"max_value","is_optional":true},{"name":"inclusive","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__test_at_least_one":{"name":"default__test_at_least_one","package_name":"dbt_utils","path":"macros\\generic_tests\\at_least_one.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\at_least_one.sql","unique_id":"macro.dbt_utils.default__test_at_least_one","macro_sql":"{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"column_name","is_optional":false},{"name":"group_by_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__test_cardinality_equality":{"name":"default__test_cardinality_equality","package_name":"dbt_utils","path":"macros\\generic_tests\\cardinality_equality.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\cardinality_equality.sql","unique_id":"macro.dbt_utils.default__test_cardinality_equality","macro_sql":"{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"column_name","is_optional":false},{"name":"to","is_optional":false},{"name":"field","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__test_equal_rowcount":{"name":"default__test_equal_rowcount","package_name":"dbt_utils","path":"macros\\generic_tests\\equal_rowcount.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\equal_rowcount.sql","unique_id":"macro.dbt_utils.default__test_equal_rowcount","macro_sql":"{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"compare_model","is_optional":false},{"name":"group_by_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__test_equality":{"name":"default__test_equality","package_name":"dbt_utils","path":"macros\\generic_tests\\equality.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\equality.sql","unique_id":"macro.dbt_utils.default__test_equality","macro_sql":"{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"compare_model","is_optional":false},{"name":"compare_columns","is_optional":true},{"name":"exclude_columns","is_optional":true},{"name":"precision","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__test_expression_is_true":{"name":"default__test_expression_is_true","package_name":"dbt_utils","path":"macros\\generic_tests\\expression_is_true.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\expression_is_true.sql","unique_id":"macro.dbt_utils.default__test_expression_is_true","macro_sql":"{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"expression","is_optional":false},{"name":"column_name","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__test_fewer_rows_than":{"name":"default__test_fewer_rows_than","package_name":"dbt_utils","path":"macros\\generic_tests\\fewer_rows_than.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\fewer_rows_than.sql","unique_id":"macro.dbt_utils.default__test_fewer_rows_than","macro_sql":"{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"compare_model","is_optional":false},{"name":"group_by_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__test_mutually_exclusive_ranges":{"name":"default__test_mutually_exclusive_ranges","package_name":"dbt_utils","path":"macros\\generic_tests\\mutually_exclusive_ranges.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\mutually_exclusive_ranges.sql","unique_id":"macro.dbt_utils.default__test_mutually_exclusive_ranges","macro_sql":"{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"lower_bound_column","is_optional":false},{"name":"upper_bound_column","is_optional":false},{"name":"partition_by","is_optional":true},{"name":"gaps","is_optional":true},{"name":"zero_length_range_allowed","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__test_not_accepted_values":{"name":"default__test_not_accepted_values","package_name":"dbt_utils","path":"macros\\generic_tests\\not_accepted_values.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\not_accepted_values.sql","unique_id":"macro.dbt_utils.default__test_not_accepted_values","macro_sql":"{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"column_name","is_optional":false},{"name":"values","is_optional":false},{"name":"quote","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__test_not_constant":{"name":"default__test_not_constant","package_name":"dbt_utils","path":"macros\\generic_tests\\not_constant.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\not_constant.sql","unique_id":"macro.dbt_utils.default__test_not_constant","macro_sql":"{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"column_name","is_optional":false},{"name":"group_by_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__test_not_empty_string":{"name":"default__test_not_empty_string","package_name":"dbt_utils","path":"macros\\generic_tests\\not_empty_string.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\not_empty_string.sql","unique_id":"macro.dbt_utils.default__test_not_empty_string","macro_sql":"{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"column_name","is_optional":false},{"name":"trim_whitespace","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__test_not_null_proportion":{"name":"default__test_not_null_proportion","package_name":"dbt_utils","path":"macros\\generic_tests\\not_null_proportion.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\not_null_proportion.sql","unique_id":"macro.dbt_utils.default__test_not_null_proportion","macro_sql":"{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"group_by_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__test_recency":{"name":"default__test_recency","package_name":"dbt_utils","path":"macros\\generic_tests\\recency.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\recency.sql","unique_id":"macro.dbt_utils.default__test_recency","macro_sql":"{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"field","is_optional":false},{"name":"datepart","is_optional":false},{"name":"interval","is_optional":false},{"name":"ignore_time_component","is_optional":false},{"name":"group_by_columns","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.default__test_relationships_where":{"name":"default__test_relationships_where","package_name":"dbt_utils","path":"macros\\generic_tests\\relationships_where.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\relationships_where.sql","unique_id":"macro.dbt_utils.default__test_relationships_where","macro_sql":"{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"column_name","is_optional":false},{"name":"to","is_optional":false},{"name":"field","is_optional":false},{"name":"from_condition","is_optional":true},{"name":"to_condition","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__test_sequential_values":{"name":"default__test_sequential_values","package_name":"dbt_utils","path":"macros\\generic_tests\\sequential_values.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\sequential_values.sql","unique_id":"macro.dbt_utils.default__test_sequential_values","macro_sql":"{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"column_name","is_optional":false},{"name":"interval","is_optional":true},{"name":"datepart","is_optional":true},{"name":"group_by_columns","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__test_unique_combination_of_columns":{"name":"default__test_unique_combination_of_columns","package_name":"dbt_utils","path":"macros\\generic_tests\\unique_combination_of_columns.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\unique_combination_of_columns.sql","unique_id":"macro.dbt_utils.default__test_unique_combination_of_columns","macro_sql":"{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"combination_of_columns","is_optional":false},{"name":"quote_columns","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__union_relations":{"name":"default__union_relations","package_name":"dbt_utils","path":"macros\\sql\\union.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\union.sql","unique_id":"macro.dbt_utils.default__union_relations","macro_sql":"{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relations","is_optional":false},{"name":"column_override","is_optional":true},{"name":"include","is_optional":true},{"name":"exclude","is_optional":true},{"name":"source_column_name","is_optional":true},{"name":"where","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__unpivot":{"name":"default__unpivot","package_name":"dbt_utils","path":"macros\\sql\\unpivot.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\unpivot.sql","unique_id":"macro.dbt_utils.default__unpivot","macro_sql":"{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":true},{"name":"cast_to","is_optional":true},{"name":"exclude","is_optional":true},{"name":"remove","is_optional":true},{"name":"field_name","is_optional":true},{"name":"value_name","is_optional":true},{"name":"quote_identifiers","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.default__width_bucket":{"name":"default__width_bucket","package_name":"dbt_utils","path":"macros\\sql\\width_bucket.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\width_bucket.sql","unique_id":"macro.dbt_utils.default__width_bucket","macro_sql":"{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"expr","is_optional":false},{"name":"min_value","is_optional":false},{"name":"max_value","is_optional":false},{"name":"num_buckets","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.degrees_to_radians":{"name":"degrees_to_radians","package_name":"dbt_utils","path":"macros\\sql\\haversine_distance.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\haversine_distance.sql","unique_id":"macro.dbt_utils.degrees_to_radians","macro_sql":"{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"degrees","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.generate_series":{"name":"generate_series","package_name":"dbt_utils","path":"macros\\sql\\generate_series.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\generate_series.sql","unique_id":"macro.dbt_utils.generate_series","macro_sql":"{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"upper_bound","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.generate_surrogate_key":{"name":"generate_surrogate_key","package_name":"dbt_utils","path":"macros\\sql\\generate_surrogate_key.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\generate_surrogate_key.sql","unique_id":"macro.dbt_utils.generate_surrogate_key","macro_sql":"{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field_list","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.get_column_values":{"name":"get_column_values","package_name":"dbt_utils","path":"macros\\sql\\get_column_values.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_column_values.sql","unique_id":"macro.dbt_utils.get_column_values","macro_sql":"{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"table","is_optional":false},{"name":"column","is_optional":false},{"name":"order_by","is_optional":true},{"name":"max_records","is_optional":true},{"name":"default","is_optional":true},{"name":"where","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.get_filtered_columns_in_relation":{"name":"get_filtered_columns_in_relation","package_name":"dbt_utils","path":"macros\\sql\\get_filtered_columns_in_relation.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_filtered_columns_in_relation.sql","unique_id":"macro.dbt_utils.get_filtered_columns_in_relation","macro_sql":"{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"from","is_optional":false},{"name":"except","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.get_intervals_between":{"name":"get_intervals_between","package_name":"dbt_utils","path":"macros\\sql\\date_spine.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\date_spine.sql","unique_id":"macro.dbt_utils.get_intervals_between","macro_sql":"{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"start_date","is_optional":false},{"name":"end_date","is_optional":false},{"name":"datepart","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.get_powers_of_two":{"name":"get_powers_of_two","package_name":"dbt_utils","path":"macros\\sql\\generate_series.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\generate_series.sql","unique_id":"macro.dbt_utils.get_powers_of_two","macro_sql":"{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"upper_bound","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.get_query_results_as_dict":{"name":"get_query_results_as_dict","package_name":"dbt_utils","path":"macros\\sql\\get_query_results_as_dict.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_query_results_as_dict.sql","unique_id":"macro.dbt_utils.get_query_results_as_dict","macro_sql":"{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"query","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.get_relations_by_pattern":{"name":"get_relations_by_pattern","package_name":"dbt_utils","path":"macros\\sql\\get_relations_by_pattern.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_relations_by_pattern.sql","unique_id":"macro.dbt_utils.get_relations_by_pattern","macro_sql":"{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"schema_pattern","is_optional":false},{"name":"table_pattern","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.get_relations_by_prefix":{"name":"get_relations_by_prefix","package_name":"dbt_utils","path":"macros\\sql\\get_relations_by_prefix.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_relations_by_prefix.sql","unique_id":"macro.dbt_utils.get_relations_by_prefix","macro_sql":"{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"schema","is_optional":false},{"name":"prefix","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.get_single_value":{"name":"get_single_value","package_name":"dbt_utils","path":"macros\\sql\\get_single_value.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_single_value.sql","unique_id":"macro.dbt_utils.get_single_value","macro_sql":"{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"query","is_optional":false},{"name":"default","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.get_table_types_sql":{"name":"get_table_types_sql","package_name":"dbt_utils","path":"macros\\sql\\get_table_types_sql.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_table_types_sql.sql","unique_id":"macro.dbt_utils.get_table_types_sql","macro_sql":"{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.get_tables_by_pattern_sql":{"name":"get_tables_by_pattern_sql","package_name":"dbt_utils","path":"macros\\sql\\get_tables_by_pattern_sql.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils.get_tables_by_pattern_sql","macro_sql":"{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"schema_pattern","is_optional":false},{"name":"table_pattern","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.get_tables_by_prefix_sql":{"name":"get_tables_by_prefix_sql","package_name":"dbt_utils","path":"macros\\sql\\get_tables_by_prefix_sql.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_tables_by_prefix_sql.sql","unique_id":"macro.dbt_utils.get_tables_by_prefix_sql","macro_sql":"{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"schema","is_optional":false},{"name":"prefix","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.get_url_host":{"name":"get_url_host","package_name":"dbt_utils","path":"macros\\web\\get_url_host.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\web\\get_url_host.sql","unique_id":"macro.dbt_utils.get_url_host","macro_sql":"{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.get_url_parameter":{"name":"get_url_parameter","package_name":"dbt_utils","path":"macros\\web\\get_url_parameter.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\web\\get_url_parameter.sql","unique_id":"macro.dbt_utils.get_url_parameter","macro_sql":"{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field","is_optional":false},{"name":"url_parameter","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.get_url_path":{"name":"get_url_path","package_name":"dbt_utils","path":"macros\\web\\get_url_path.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\web\\get_url_path.sql","unique_id":"macro.dbt_utils.get_url_path","macro_sql":"{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.group_by":{"name":"group_by","package_name":"dbt_utils","path":"macros\\sql\\groupby.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\groupby.sql","unique_id":"macro.dbt_utils.group_by","macro_sql":"{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"n","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.haversine_distance":{"name":"haversine_distance","package_name":"dbt_utils","path":"macros\\sql\\haversine_distance.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\haversine_distance.sql","unique_id":"macro.dbt_utils.haversine_distance","macro_sql":"{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"lat1","is_optional":false},{"name":"lon1","is_optional":false},{"name":"lat2","is_optional":false},{"name":"lon2","is_optional":false},{"name":"unit","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.log_info":{"name":"log_info","package_name":"dbt_utils","path":"macros\\jinja_helpers\\log_info.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\jinja_helpers\\log_info.sql","unique_id":"macro.dbt_utils.log_info","macro_sql":"{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"message","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.nullcheck":{"name":"nullcheck","package_name":"dbt_utils","path":"macros\\sql\\nullcheck.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\nullcheck.sql","unique_id":"macro.dbt_utils.nullcheck","macro_sql":"{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"cols","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.nullcheck_table":{"name":"nullcheck_table","package_name":"dbt_utils","path":"macros\\sql\\nullcheck_table.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\nullcheck_table.sql","unique_id":"macro.dbt_utils.nullcheck_table","macro_sql":"{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.pivot":{"name":"pivot","package_name":"dbt_utils","path":"macros\\sql\\pivot.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\pivot.sql","unique_id":"macro.dbt_utils.pivot","macro_sql":"{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"column","is_optional":false},{"name":"values","is_optional":false},{"name":"alias","is_optional":true},{"name":"agg","is_optional":true},{"name":"cmp","is_optional":true},{"name":"prefix","is_optional":true},{"name":"suffix","is_optional":true},{"name":"then_value","is_optional":true},{"name":"else_value","is_optional":true},{"name":"quote_identifiers","is_optional":true},{"name":"distinct","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.postgres__deduplicate":{"name":"postgres__deduplicate","package_name":"dbt_utils","path":"macros\\sql\\deduplicate.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\deduplicate.sql","unique_id":"macro.dbt_utils.postgres__deduplicate","macro_sql":"{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"partition_by","is_optional":false},{"name":"order_by","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.postgres__get_table_types_sql":{"name":"postgres__get_table_types_sql","package_name":"dbt_utils","path":"macros\\sql\\get_table_types_sql.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_table_types_sql.sql","unique_id":"macro.dbt_utils.postgres__get_table_types_sql","macro_sql":"{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.pretty_log_format":{"name":"pretty_log_format","package_name":"dbt_utils","path":"macros\\jinja_helpers\\pretty_log_format.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\jinja_helpers\\pretty_log_format.sql","unique_id":"macro.dbt_utils.pretty_log_format","macro_sql":"{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"message","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.pretty_time":{"name":"pretty_time","package_name":"dbt_utils","path":"macros\\jinja_helpers\\pretty_time.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\jinja_helpers\\pretty_time.sql","unique_id":"macro.dbt_utils.pretty_time","macro_sql":"{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"format","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.redshift__deduplicate":{"name":"redshift__deduplicate","package_name":"dbt_utils","path":"macros\\sql\\deduplicate.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\deduplicate.sql","unique_id":"macro.dbt_utils.redshift__deduplicate","macro_sql":"{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"partition_by","is_optional":false},{"name":"order_by","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.redshift__get_tables_by_pattern_sql":{"name":"redshift__get_tables_by_pattern_sql","package_name":"dbt_utils","path":"macros\\sql\\get_tables_by_pattern_sql.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils.redshift__get_tables_by_pattern_sql","macro_sql":"{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"schema_pattern","is_optional":false},{"name":"table_pattern","is_optional":false},{"name":"exclude","is_optional":true},{"name":"database","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.safe_add":{"name":"safe_add","package_name":"dbt_utils","path":"macros\\sql\\safe_add.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\safe_add.sql","unique_id":"macro.dbt_utils.safe_add","macro_sql":"{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field_list","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.safe_divide":{"name":"safe_divide","package_name":"dbt_utils","path":"macros\\sql\\safe_divide.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\safe_divide.sql","unique_id":"macro.dbt_utils.safe_divide","macro_sql":"{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"numerator","is_optional":false},{"name":"denominator","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.safe_subtract":{"name":"safe_subtract","package_name":"dbt_utils","path":"macros\\sql\\safe_subtract.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\safe_subtract.sql","unique_id":"macro.dbt_utils.safe_subtract","macro_sql":"{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field_list","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.slugify":{"name":"slugify","package_name":"dbt_utils","path":"macros\\jinja_helpers\\slugify.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\jinja_helpers\\slugify.sql","unique_id":"macro.dbt_utils.slugify","macro_sql":"{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"string","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.snowflake__deduplicate":{"name":"snowflake__deduplicate","package_name":"dbt_utils","path":"macros\\sql\\deduplicate.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\deduplicate.sql","unique_id":"macro.dbt_utils.snowflake__deduplicate","macro_sql":"{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":false},{"name":"partition_by","is_optional":false},{"name":"order_by","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.snowflake__width_bucket":{"name":"snowflake__width_bucket","package_name":"dbt_utils","path":"macros\\sql\\width_bucket.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\width_bucket.sql","unique_id":"macro.dbt_utils.snowflake__width_bucket","macro_sql":"{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"expr","is_optional":false},{"name":"min_value","is_optional":false},{"name":"max_value","is_optional":false},{"name":"num_buckets","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.star":{"name":"star","package_name":"dbt_utils","path":"macros\\sql\\star.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\star.sql","unique_id":"macro.dbt_utils.star","macro_sql":"{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"from","is_optional":false},{"name":"relation_alias","is_optional":true},{"name":"except","is_optional":true},{"name":"prefix","is_optional":true},{"name":"suffix","is_optional":true},{"name":"quote_identifiers","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.surrogate_key":{"name":"surrogate_key","package_name":"dbt_utils","path":"macros\\sql\\surrogate_key.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\surrogate_key.sql","unique_id":"macro.dbt_utils.surrogate_key","macro_sql":"{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"field_list","is_optional":false}],"resource_type":"macro"},"macro.dbt_utils.test_accepted_range":{"name":"test_accepted_range","package_name":"dbt_utils","path":"macros\\generic_tests\\accepted_range.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\accepted_range.sql","unique_id":"macro.dbt_utils.test_accepted_range","macro_sql":"{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.test_at_least_one":{"name":"test_at_least_one","package_name":"dbt_utils","path":"macros\\generic_tests\\at_least_one.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\at_least_one.sql","unique_id":"macro.dbt_utils.test_at_least_one","macro_sql":"{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.test_cardinality_equality":{"name":"test_cardinality_equality","package_name":"dbt_utils","path":"macros\\generic_tests\\cardinality_equality.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\cardinality_equality.sql","unique_id":"macro.dbt_utils.test_cardinality_equality","macro_sql":"{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.test_equal_rowcount":{"name":"test_equal_rowcount","package_name":"dbt_utils","path":"macros\\generic_tests\\equal_rowcount.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\equal_rowcount.sql","unique_id":"macro.dbt_utils.test_equal_rowcount","macro_sql":"{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.test_equality":{"name":"test_equality","package_name":"dbt_utils","path":"macros\\generic_tests\\equality.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\equality.sql","unique_id":"macro.dbt_utils.test_equality","macro_sql":"{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.test_expression_is_true":{"name":"test_expression_is_true","package_name":"dbt_utils","path":"macros\\generic_tests\\expression_is_true.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\expression_is_true.sql","unique_id":"macro.dbt_utils.test_expression_is_true","macro_sql":"{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.test_fewer_rows_than":{"name":"test_fewer_rows_than","package_name":"dbt_utils","path":"macros\\generic_tests\\fewer_rows_than.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\fewer_rows_than.sql","unique_id":"macro.dbt_utils.test_fewer_rows_than","macro_sql":"{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.test_mutually_exclusive_ranges":{"name":"test_mutually_exclusive_ranges","package_name":"dbt_utils","path":"macros\\generic_tests\\mutually_exclusive_ranges.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\mutually_exclusive_ranges.sql","unique_id":"macro.dbt_utils.test_mutually_exclusive_ranges","macro_sql":"{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.test_not_accepted_values":{"name":"test_not_accepted_values","package_name":"dbt_utils","path":"macros\\generic_tests\\not_accepted_values.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\not_accepted_values.sql","unique_id":"macro.dbt_utils.test_not_accepted_values","macro_sql":"{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.test_not_constant":{"name":"test_not_constant","package_name":"dbt_utils","path":"macros\\generic_tests\\not_constant.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\not_constant.sql","unique_id":"macro.dbt_utils.test_not_constant","macro_sql":"{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.test_not_empty_string":{"name":"test_not_empty_string","package_name":"dbt_utils","path":"macros\\generic_tests\\not_empty_string.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\not_empty_string.sql","unique_id":"macro.dbt_utils.test_not_empty_string","macro_sql":"{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.test_not_null_proportion":{"name":"test_not_null_proportion","package_name":"dbt_utils","path":"macros\\generic_tests\\not_null_proportion.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\not_null_proportion.sql","unique_id":"macro.dbt_utils.test_not_null_proportion","macro_sql":"{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"model","is_optional":false},{"name":"group_by_columns","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.test_recency":{"name":"test_recency","package_name":"dbt_utils","path":"macros\\generic_tests\\recency.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\recency.sql","unique_id":"macro.dbt_utils.test_recency","macro_sql":"{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.test_relationships_where":{"name":"test_relationships_where","package_name":"dbt_utils","path":"macros\\generic_tests\\relationships_where.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\relationships_where.sql","unique_id":"macro.dbt_utils.test_relationships_where","macro_sql":"{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.test_sequential_values":{"name":"test_sequential_values","package_name":"dbt_utils","path":"macros\\generic_tests\\sequential_values.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\sequential_values.sql","unique_id":"macro.dbt_utils.test_sequential_values","macro_sql":"{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.test_unique_combination_of_columns":{"name":"test_unique_combination_of_columns","package_name":"dbt_utils","path":"macros\\generic_tests\\unique_combination_of_columns.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\generic_tests\\unique_combination_of_columns.sql","unique_id":"macro.dbt_utils.test_unique_combination_of_columns","macro_sql":"{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}","depends_on":{"macros":[]},"description":"","meta":{},"resource_type":"macro"},"macro.dbt_utils.union_relations":{"name":"union_relations","package_name":"dbt_utils","path":"macros\\sql\\union.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\union.sql","unique_id":"macro.dbt_utils.union_relations","macro_sql":"{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relations","is_optional":false},{"name":"column_override","is_optional":true},{"name":"include","is_optional":true},{"name":"exclude","is_optional":true},{"name":"source_column_name","is_optional":true},{"name":"where","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.unpivot":{"name":"unpivot","package_name":"dbt_utils","path":"macros\\sql\\unpivot.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\unpivot.sql","unique_id":"macro.dbt_utils.unpivot","macro_sql":"{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"relation","is_optional":true},{"name":"cast_to","is_optional":true},{"name":"exclude","is_optional":true},{"name":"remove","is_optional":true},{"name":"field_name","is_optional":true},{"name":"value_name","is_optional":true},{"name":"quote_identifiers","is_optional":true}],"resource_type":"macro"},"macro.dbt_utils.width_bucket":{"name":"width_bucket","package_name":"dbt_utils","path":"macros\\sql\\width_bucket.sql","original_file_path":"dbt_packages\\dbt_utils\\macros\\sql\\width_bucket.sql","unique_id":"macro.dbt_utils.width_bucket","macro_sql":"{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"args":[{"name":"expr","is_optional":false},{"name":"min_value","is_optional":false},{"name":"max_value","is_optional":false},{"name":"num_buckets","is_optional":false}],"resource_type":"macro"}},"metadata":{"dbt_schema_version":"https://schemas.getdbt.com/dbt/manifest/v20.json","dbt_version":"2.0.0-preview.7","generated_at":"2025-09-05T05:50:14.770310800Z","invocation_id":"fcec4979-ebf2-4f46-a8f8-be3c59e0c89b","invocation_started_at":null,"env":{},"project_name":"dbt_core","project_id":null,"user_id":null,"send_anonymous_usage_stats":null,"adapter_type":"snowflake","quoting":null},"metrics":{},"nodes":{"analysis.dbt_core.test":{"resource_type":"analysis","unique_id":"analysis.dbt_core.test","database":"_dev_analytics","schema":"astaus","name":"test","package_name":"dbt_core","fqn":["dbt_core","marketing","astaus","test"],"path":"analyses\\marketing\\astaus\\test.sql","original_file_path":"analyses\\marketing\\astaus\\test.sql","alias":"test","relation_name":"\"_dev_analytics\".\"astaus\".\"test\"","columns":{},"depends_on":{"macros":[],"nodes":[],"nodes_with_ref_location":[]},"refs":[],"sources":[],"unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"d8d6e8db0812251c48e64435867f929f7e7ebba38fef25ab99d31d9fa195d84c"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":null,"alias":null,"schema":null,"database":null,"tags":null,"catalog_name":null,"meta":null,"group":"data_foundation","materialized":null,"incremental_strategy":null,"incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"quoting":null,"column_types":null,"full_refresh":null,"unique_key":null,"on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.dim_common__dim_test":{"resource_type":"model","unique_id":"model.dbt_core.dim_common__dim_test","database":"_dev_analytics","schema":"common__astaus","name":"dim_common__dim_test","package_name":"dbt_core","fqn":["dbt_core","marts","common","dim_common__dim_test"],"path":"models\\marts\\common\\dim_common__dim_test.sql","original_file_path":"models\\marts\\common\\dim_common__dim_test.sql","patch_path":"models\\marts\\common\\dim_common__dim_test.yml","alias":"dim_test","relation_name":"_dev_analytics.common__astaus.dim_test","columns":{"_loaded_at":{"name":"_loaded_at","data_type":"timestamp_tz","constraints":[],"meta":{},"tags":[],"config":{}},"account_email":{"name":"account_email","data_type":"varchar","constraints":[],"meta":{},"tags":[],"config":{}},"account_first_name":{"name":"account_first_name","data_type":"varchar","constraints":[],"meta":{},"tags":[],"config":{}},"account_id":{"name":"account_id","data_type":"varchar","constraints":[],"meta":{},"tags":[],"config":{}},"account_last_name":{"name":"account_last_name","data_type":"varchar","constraints":[],"meta":{},"tags":[],"config":{}},"indvidual_party_key":{"name":"indvidual_party_key","data_type":"varchar","constraints":[],"meta":{},"tags":[],"config":{}}},"depends_on":{"macros":[],"nodes":["model.dbt_core.stg_accounts_db__accounts"],"nodes_with_ref_location":[["model.dbt_core.stg_accounts_db__accounts",{"line":9,"col":15,"index":136,"file":"models\\marts\\common\\dim_common__dim_test.sql","expanded":null}]]},"refs":[{"name":"stg_accounts_db__accounts"}],"sources":[],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"b9dbe05473643b2a843d93432d2eb5520117960d22380537d8b3e9bcf5b2ef10"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"dim_test","schema":"common","database":null,"tags":null,"catalog_name":null,"meta":null,"group":"data_foundation","materialized":"table","incremental_strategy":null,"incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":null,"on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.dim_marketing__dim_campaigns":{"resource_type":"model","unique_id":"model.dbt_core.dim_marketing__dim_campaigns","database":"_dev_analytics","schema":"marketing__astaus","name":"dim_marketing__dim_campaigns","package_name":"dbt_core","fqn":["dbt_core","marts","marketing","dim_marketing__dim_campaigns"],"path":"models\\marts\\marketing\\dim_marketing__dim_campaigns.sql","original_file_path":"models\\marts\\marketing\\dim_marketing__dim_campaigns.sql","alias":"dim_campaigns","relation_name":"_dev_analytics.marketing__astaus.dim_campaigns","columns":{},"depends_on":{"macros":[],"nodes":["model.dbt_core.stg_google_ads__campaigns","model.dbt_core.stg_facebook_ads__campaigns"],"nodes_with_ref_location":[["model.dbt_core.stg_google_ads__campaigns",{"line":23,"col":19,"index":683,"file":"models\\marts\\marketing\\dim_marketing__dim_campaigns.sql","expanded":null}],["model.dbt_core.stg_facebook_ads__campaigns",{"line":27,"col":19,"index":776,"file":"models\\marts\\marketing\\dim_marketing__dim_campaigns.sql","expanded":null}]]},"refs":[{"name":"stg_google_ads__campaigns"},{"name":"stg_facebook_ads__campaigns"}],"sources":[],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"20bb0b91bc9d7afb5690d37025826353bf7acf9d15d89d5f0308f9ef0bd12eaa"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"dim_campaigns","schema":"marketing","database":null,"tags":null,"catalog_name":null,"meta":{"dagster":{"automation_condition":"on_cron","automation_condition_config":{"cron_schedule":"@daily","cron_timezone":"utc","ignore_asset_keys":["google_ads","stg","campaigns"]},"freshness_check":{"lower_bound_delta_seconds":129600}}},"group":"data_foundation","materialized":"incremental","incremental_strategy":"delete+insert","incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":"campaign_sid","on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.fct_common__fct_transactions":{"resource_type":"model","unique_id":"model.dbt_core.fct_common__fct_transactions","database":"_dev_analytics","schema":"common__astaus","name":"fct_common__fct_transactions","package_name":"dbt_core","fqn":["dbt_core","marts","common","fct_common__fct_transactions"],"path":"models\\marts\\common\\fct_common__fct_transactions.sql","original_file_path":"models\\marts\\common\\fct_common__fct_transactions.sql","patch_path":"models\\marts\\common\\fct_common__fct_transactions.yml","alias":"fct_transactions","relation_name":"_dev_analytics.common__astaus.fct_transactions","columns":{"_loaded_at":{"name":"_loaded_at","description":"the time the data was loaded from source","constraints":[],"meta":{"dagster":{"freshness_check":{"lower_bound_delta_seconds":1800}}},"tags":[],"config":{}},"product_id":{"name":"product_id","description":"The id of the product sold on the transaction, unique when concatentated with transaction_id","constraints":[],"meta":{"dagster":{"freshness_check":{"lower_bound_delta_seconds":1800}}},"tags":[],"config":{}},"transaction_id":{"name":"transaction_id","description":"The identifier of the transaction, unique when concatentated with product_id","constraints":[],"meta":{"dagster":{"freshness_check":{"lower_bound_delta_seconds":1800}}},"tags":[],"config":{}},"transaction_margin":{"name":"transaction_margin","description":"the gross margin after unit costs are considered","constraints":[],"meta":{"dagster":{"freshness_check":{"lower_bound_delta_seconds":1800}}},"tags":[],"config":{}},"transaction_revenue":{"name":"transaction_revenue","description":"the total sale item","constraints":[],"meta":{"dagster":{"freshness_check":{"lower_bound_delta_seconds":1800}}},"tags":[],"config":{}}},"depends_on":{"macros":[],"nodes":["model.dbt_core.stg_transaction_db__transactions"],"nodes_with_ref_location":[["model.dbt_core.stg_transaction_db__transactions",{"line":12,"col":19,"index":257,"file":"models\\marts\\common\\fct_common__fct_transactions.sql","expanded":null}]]},"refs":[{"name":"stg_transaction_db__transactions"}],"sources":[],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"4a1100c1a9a77c90871d42944332e9e924a09184d52273a8bef197ed0b93fd9e"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"fct_transactions","schema":"common","database":null,"tags":null,"catalog_name":null,"meta":{"dagster":{"freshness_check":{"lower_bound_delta_seconds":1800}}},"group":"data_foundation","materialized":"dynamic_table","incremental_strategy":null,"incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":null,"on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null,"target_lag":"24 hour","snowflake_warehouse":"compute_wh"},"constraints":[],"primary_key":[]},"model.dbt_core.fct_marketing__fct_attributions":{"resource_type":"model","unique_id":"model.dbt_core.fct_marketing__fct_attributions","database":"_dev_analytics","schema":"marketing__astaus","name":"fct_marketing__fct_attributions","package_name":"dbt_core","fqn":["dbt_core","marts","marketing","fct_marketing__fct_attributions"],"path":"models\\marts\\marketing\\fct_marketing__fct_attributions.sql","original_file_path":"models\\marts\\marketing\\fct_marketing__fct_attributions.sql","alias":"fct_attributions","relation_name":"_dev_analytics.marketing__astaus.fct_attributions","columns":{},"depends_on":{"macros":[],"nodes":["model.dbt_core.int_int_marketing__int_attribution_last_click_30d","model.dbt_core.int_int_marketing__int_attribution_last_click_30d_same_brand","model.dbt_core.int_int_marketing__int_attribution_last_click_30d_same_sku"],"nodes_with_ref_location":[["model.dbt_core.int_int_marketing__int_attribution_last_click_30d",{"line":30,"col":19,"index":825,"file":"models\\marts\\marketing\\fct_marketing__fct_attributions.sql","expanded":null}],["model.dbt_core.int_int_marketing__int_attribution_last_click_30d_same_brand",{"line":30,"col":19,"index":825,"file":"models\\marts\\marketing\\fct_marketing__fct_attributions.sql","expanded":null}],["model.dbt_core.int_int_marketing__int_attribution_last_click_30d_same_sku",{"line":30,"col":19,"index":825,"file":"models\\marts\\marketing\\fct_marketing__fct_attributions.sql","expanded":null}]]},"refs":[{"name":"int_int_marketing__int_attribution_last_click_30d"},{"name":"int_int_marketing__int_attribution_last_click_30d_same_brand"},{"name":"int_int_marketing__int_attribution_last_click_30d_same_sku"}],"sources":[],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"d36fc9593b65f9a31984e5a85355c18f6fdcf5d826a51a8465f7be7d2fc6826f"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"fct_attributions","schema":"marketing","database":null,"tags":["pii"],"catalog_name":null,"meta":{"dagster":{"automation_condition":"on_cron","automation_condition_config":{"cron_schedule":"@daily","cron_timezone":"utc"},"freshness_check":{"lower_bound_delta_seconds":129600}}},"group":"data_foundation","materialized":"view","incremental_strategy":null,"incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":null,"on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.int_int_marketing__int_attribution_last_click_30d":{"resource_type":"model","unique_id":"model.dbt_core.int_int_marketing__int_attribution_last_click_30d","database":"_dev_analytics","schema":"int_marketing__astaus","name":"int_int_marketing__int_attribution_last_click_30d","package_name":"dbt_core","fqn":["dbt_core","intermediate","marketing","int_int_marketing__int_attribution_last_click_30d"],"path":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d.sql","original_file_path":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d.sql","alias":"int_attributions_last_click_30d","relation_name":"_dev_analytics.int_marketing__astaus.int_attributions_last_click_30d","columns":{},"depends_on":{"macros":[],"nodes":["model.dbt_core.int_int_marketing__int_attributions","model.dbt_core.stg_transaction_db__transactions","model.dbt_core.stg_entity_resolution__individual_party_keys"],"nodes_with_ref_location":[["model.dbt_core.int_int_marketing__int_attributions",{"line":5,"col":23,"index":137,"file":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d.sql","expanded":null}],["model.dbt_core.stg_transaction_db__transactions",{"line":8,"col":23,"index":240,"file":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d.sql","expanded":null}],["model.dbt_core.stg_entity_resolution__individual_party_keys",{"line":11,"col":23,"index":349,"file":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d.sql","expanded":null}]]},"refs":[{"name":"int_int_marketing__int_attributions"},{"name":"stg_transaction_db__transactions"},{"name":"stg_entity_resolution__individual_party_keys"}],"sources":[],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"d722f7cf2bd17d0b39908a1c2b719031eb946ffc6cc6b9b6d5afd470222c5bae"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"int_attributions_last_click_30d","schema":"int_marketing","database":null,"tags":null,"catalog_name":null,"meta":null,"group":"data_foundation","materialized":"incremental","incremental_strategy":"delete+insert","incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":"attribution_sid","on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.int_int_marketing__int_attribution_last_click_30d_same_brand":{"resource_type":"model","unique_id":"model.dbt_core.int_int_marketing__int_attribution_last_click_30d_same_brand","database":"_dev_analytics","schema":"int_marketing__astaus","name":"int_int_marketing__int_attribution_last_click_30d_same_brand","package_name":"dbt_core","fqn":["dbt_core","intermediate","marketing","int_int_marketing__int_attribution_last_click_30d_same_brand"],"path":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d_same_brand.sql","original_file_path":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d_same_brand.sql","alias":"int_attributions_last_click_30d_same_brand","relation_name":"_dev_analytics.int_marketing__astaus.int_attributions_last_click_30d_same_brand","columns":{},"depends_on":{"macros":[],"nodes":["model.dbt_core.int_int_marketing__int_attributions","model.dbt_core.stg_transaction_db__transactions","model.dbt_core.stg_entity_resolution__individual_party_keys","model.dbt_core.stg_inventory_db__products"],"nodes_with_ref_location":[["model.dbt_core.int_int_marketing__int_attributions",{"line":5,"col":23,"index":137,"file":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d_same_brand.sql","expanded":null}],["model.dbt_core.stg_transaction_db__transactions",{"line":8,"col":23,"index":240,"file":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d_same_brand.sql","expanded":null}],["model.dbt_core.stg_entity_resolution__individual_party_keys",{"line":11,"col":23,"index":349,"file":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d_same_brand.sql","expanded":null}],["model.dbt_core.stg_inventory_db__products",{"line":15,"col":27,"index":489,"file":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d_same_brand.sql","expanded":null}]]},"refs":[{"name":"int_int_marketing__int_attributions"},{"name":"stg_transaction_db__transactions"},{"name":"stg_entity_resolution__individual_party_keys"},{"name":"stg_inventory_db__products"}],"sources":[],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"f7bfeb5750a456eef6f4f94cfa864285f0abda031c029fe88737364b03b66629"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"int_attributions_last_click_30d_same_brand","schema":"int_marketing","database":null,"tags":null,"catalog_name":null,"meta":null,"group":"data_foundation","materialized":"incremental","incremental_strategy":"delete+insert","incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":"attribution_sid","on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.int_int_marketing__int_attribution_last_click_30d_same_sku":{"resource_type":"model","unique_id":"model.dbt_core.int_int_marketing__int_attribution_last_click_30d_same_sku","database":"_dev_analytics","schema":"int_marketing__astaus","name":"int_int_marketing__int_attribution_last_click_30d_same_sku","package_name":"dbt_core","fqn":["dbt_core","intermediate","marketing","int_int_marketing__int_attribution_last_click_30d_same_sku"],"path":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d_same_sku.sql","original_file_path":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d_same_sku.sql","alias":"int_attributions_last_click_30d_same_sku","relation_name":"_dev_analytics.int_marketing__astaus.int_attributions_last_click_30d_same_sku","columns":{},"depends_on":{"macros":[],"nodes":["model.dbt_core.int_int_marketing__int_attributions","model.dbt_core.stg_transaction_db__transactions","model.dbt_core.stg_entity_resolution__individual_party_keys","model.dbt_core.stg_inventory_db__products"],"nodes_with_ref_location":[["model.dbt_core.int_int_marketing__int_attributions",{"line":5,"col":23,"index":137,"file":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d_same_sku.sql","expanded":null}],["model.dbt_core.stg_transaction_db__transactions",{"line":8,"col":23,"index":240,"file":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d_same_sku.sql","expanded":null}],["model.dbt_core.stg_entity_resolution__individual_party_keys",{"line":11,"col":23,"index":349,"file":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d_same_sku.sql","expanded":null}],["model.dbt_core.stg_inventory_db__products",{"line":15,"col":27,"index":489,"file":"models\\intermediate\\marketing\\int_int_marketing__int_attribution_last_click_30d_same_sku.sql","expanded":null}]]},"refs":[{"name":"int_int_marketing__int_attributions"},{"name":"stg_transaction_db__transactions"},{"name":"stg_entity_resolution__individual_party_keys"},{"name":"stg_inventory_db__products"}],"sources":[],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"15763af658d16d0772f2c92514bc6d3c5285ac56108de39d9ec9127524886fd7"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"int_attributions_last_click_30d_same_sku","schema":"int_marketing","database":null,"tags":null,"catalog_name":null,"meta":null,"group":"data_foundation","materialized":"incremental","incremental_strategy":"delete+insert","incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":"attribution_sid","on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.int_int_marketing__int_attributions":{"resource_type":"model","unique_id":"model.dbt_core.int_int_marketing__int_attributions","database":"_dev_analytics","schema":"int_marketing__astaus","name":"int_int_marketing__int_attributions","package_name":"dbt_core","fqn":["dbt_core","intermediate","marketing","int_int_marketing__int_attributions"],"path":"models\\intermediate\\marketing\\int_int_marketing__int_attributions.sql","original_file_path":"models\\intermediate\\marketing\\int_int_marketing__int_attributions.sql","alias":"int_attributions","relation_name":"_dev_analytics.int_marketing__astaus.int_attributions","columns":{},"depends_on":{"macros":[],"nodes":["model.dbt_core.stg_adobe_experience__hits","model.dbt_core.dim_marketing__dim_campaigns"],"nodes_with_ref_location":[["model.dbt_core.stg_adobe_experience__hits",{"line":13,"col":19,"index":264,"file":"models\\intermediate\\marketing\\int_int_marketing__int_attributions.sql","expanded":null}],["model.dbt_core.dim_marketing__dim_campaigns",{"line":17,"col":19,"index":345,"file":"models\\intermediate\\marketing\\int_int_marketing__int_attributions.sql","expanded":null}]]},"refs":[{"name":"stg_adobe_experience__hits"},{"name":"dim_marketing__dim_campaigns"}],"sources":[],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"c15088ddd87211a912848286a2e89453777baee32072ddaa10c66071ed82a245"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"int_attributions","schema":"int_marketing","database":null,"tags":null,"catalog_name":null,"meta":null,"group":"data_foundation","materialized":"incremental","incremental_strategy":"delete+insert","incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":"hit_id","on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.stg_accounts_db__accounts":{"resource_type":"model","unique_id":"model.dbt_core.stg_accounts_db__accounts","database":"_dev_analytics","schema":"accounts_db__astaus","name":"stg_accounts_db__accounts","package_name":"dbt_core","fqn":["dbt_core","staging","accounts_db","stg_accounts_db__accounts"],"path":"models\\staging\\accounts_db\\stg_accounts_db__accounts.sql","original_file_path":"models\\staging\\accounts_db\\stg_accounts_db__accounts.sql","patch_path":"models\\staging\\accounts_db\\stg_accounts_db__accounts.yml","alias":"accounts","relation_name":"_dev_analytics.accounts_db__astaus.accounts","columns":{"_loaded_at":{"name":"_loaded_at","data_type":"timestamp_ntz","description":"","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"account_email":{"name":"account_email","data_type":"varchar","description":"","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"account_first_name":{"name":"account_first_name","data_type":"varchar","description":"","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"account_id":{"name":"account_id","data_type":"varchar","description":"","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"account_last_name":{"name":"account_last_name","data_type":"varchar","description":"","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"indvidual_party_key":{"name":"indvidual_party_key","data_type":"varchar","description":"","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}}},"depends_on":{"macros":[],"nodes":["source.dbt_core.accounts_db.accounts"],"nodes_with_ref_location":[["source.dbt_core.accounts_db.accounts",{"line":25,"col":19,"index":664,"file":"models\\staging\\accounts_db\\stg_accounts_db__accounts.sql","expanded":null}]]},"refs":[],"sources":[["accounts_db","accounts"]],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"b5b44f032790815184986886189156699134d43c1ea5c4c48ab5e5ddf78f9c90"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"accounts","schema":"accounts_db","database":null,"tags":null,"catalog_name":null,"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"group":"data_foundation","materialized":"incremental","incremental_strategy":"delete+insert","incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":"{{ apply_dynamic_data_mask(\r\n            columns = [\r\n                'account_first_name',\r\n                'account_last_name',\r\n                'account_email',\r\n            ]\r\n        )}}","pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":"account_id","on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.stg_adobe_experience__hits":{"resource_type":"model","unique_id":"model.dbt_core.stg_adobe_experience__hits","database":"_dev_analytics","schema":"adobe_experience__astaus","name":"stg_adobe_experience__hits","package_name":"dbt_core","fqn":["dbt_core","staging","adobe_experience","stg_adobe_experience__hits"],"path":"models\\staging\\adobe_experience\\stg_adobe_experience__hits.sql","original_file_path":"models\\staging\\adobe_experience\\stg_adobe_experience__hits.sql","patch_path":"models\\staging\\adobe_experience\\stg_adobe_experience__hits.yml","alias":"hits","relation_name":"_dev_analytics.adobe_experience__astaus.hits","columns":{"_loaded_at":{"name":"_loaded_at","data_type":"timestamp_tz","description":"","constraints":[],"meta":{},"tags":[],"config":{"tags":[],"meta":{}}},"hit_at":{"name":"hit_at","data_type":"timestamp_ntz","description":"the time the hit was registerd","constraints":[],"meta":{},"tags":[],"config":{"tags":[],"meta":{}}},"hit_id":{"name":"hit_id","data_type":"varchar","description":"","constraints":[],"meta":{},"tags":[],"config":{"tags":[],"meta":{}}},"hit_sid":{"name":"hit_sid","data_type":"varchar","description":"","constraints":[],"meta":{},"tags":[],"config":{"tags":[],"meta":{}}},"hit_source":{"name":"hit_source","data_type":"varchar","description":"the platform that captured the hit, web or app","constraints":[],"meta":{},"tags":[],"config":{"tags":[],"meta":{}}},"hit_url":{"name":"hit_url","data_type":"varchar","description":"","constraints":[],"meta":{},"tags":[],"config":{"tags":[],"meta":{}}},"individual_party_key":{"name":"individual_party_key","data_type":"varchar","description":"{% docs individual_party_key %}\r\n\r\nRepresents an individual as understood by the system of record as of the\r\ntime the interaction with the individual took place.  This is used in conjunction\r\nwith an individual_id to connect across multiple systems to understand\r\na single entity.\r\n\r\nRecords from seperate systems should use the non-unique party key to join to the\r\nindividual entity table, and then be agregated to on the entity id to understand\r\ninteactions of the same customer.\r\n\r\n*Example*:\r\n``` sql\r\nselect\r\n    e.individual_id,\r\n    sum(t.revenue) revenue,\r\n    count(distinct visit_id) visits \r\n\r\nfrom transactions t\r\nleft join individual_entity e\r\n    on t.individual_party_key = e.individual_party_key\r\nleft join site_visits v\r\n    on v.individual_party_key = e.individual_party_key\r\ngroup by e.individual_entity_id\r\n```\r\n\r\n{% enddocs %}","constraints":[],"meta":{"doc_blocks":["doc.dbt_core.individual_party_key"]},"tags":[],"config":{"tags":[],"meta":{"doc_blocks":["doc.dbt_core.individual_party_key"]}}},"marketing_cloud_visitor_id":{"name":"marketing_cloud_visitor_id","data_type":"varchar","description":"","constraints":[],"meta":{},"tags":[],"config":{"tags":[],"meta":{}}},"order_id":{"name":"order_id","data_type":"number","description":"","constraints":[],"meta":{},"tags":[],"config":{"tags":[],"meta":{}}},"visit_id":{"name":"visit_id","data_type":"varchar","description":"","constraints":[],"meta":{},"tags":[],"config":{"tags":[],"meta":{}}}},"depends_on":{"macros":[],"nodes":["source.dbt_core.adobe_experience.web_hits","source.dbt_core.adobe_experience.app_hits","source.dbt_core.accounts_db.accounts"],"nodes_with_ref_location":[["source.dbt_core.adobe_experience.web_hits",{"line":22,"col":19,"index":565,"file":"models\\staging\\adobe_experience\\stg_adobe_experience__hits.sql","expanded":null}],["source.dbt_core.adobe_experience.app_hits",{"line":26,"col":19,"index":650,"file":"models\\staging\\adobe_experience\\stg_adobe_experience__hits.sql","expanded":null}],["source.dbt_core.accounts_db.accounts",{"line":30,"col":19,"index":735,"file":"models\\staging\\adobe_experience\\stg_adobe_experience__hits.sql","expanded":null}]]},"refs":[],"sources":[["adobe_experience","web_hits"],["adobe_experience","app_hits"],["accounts_db","accounts"]],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"d4d1f0b3870b0c8c85f1144e2fc51525dc3ce02d6e87128b4ca70ff360b03387"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"hits","schema":"adobe_experience","database":null,"tags":["partitioned"],"catalog_name":null,"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"deadline_cron":"@daily"},"partition":"daily","partition_start_date":"2025-07-01"}},"group":"data_foundation","materialized":"incremental","incremental_strategy":"delete+insert","incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":"hit_at","on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.stg_entity_resolution__individual_party_keys":{"resource_type":"model","unique_id":"model.dbt_core.stg_entity_resolution__individual_party_keys","database":"_dev_analytics","schema":"entity_resolution__astaus","name":"stg_entity_resolution__individual_party_keys","package_name":"dbt_core","fqn":["dbt_core","staging","entity_resolution","stg_entity_resolution__individual_party_keys"],"path":"models\\staging\\entity_resolution\\stg_entity_resolution__individual_party_keys.sql","original_file_path":"models\\staging\\entity_resolution\\stg_entity_resolution__individual_party_keys.sql","patch_path":"models\\staging\\entity_resolution\\stg_entity_resolution__individual_party_keys.yml","alias":"individual_party_keys","relation_name":"_dev_analytics.entity_resolution__astaus.individual_party_keys","columns":{"_loaded_at":{"name":"_loaded_at","data_type":"timestamp_tz","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"individual_id":{"name":"individual_id","data_type":"varchar","description":"{% docs individual_id %}\r\n\r\nRepresents an individual as understood by the entity resolution system.\r\nA single individual will have multiple party keys, however they will all resolve to the\r\nsame entity id.\r\n\r\n*Example*:\r\n``` sql\r\nselect\r\n    e.individual_id,\r\n    sum(t.revenue) revenue,\r\n    count(distinct visit_id) visits \r\n\r\nfrom transactions t\r\nleft join individual_entity e\r\n    on t.individual_party_key = e.individual_party_key\r\nleft join site_visits v\r\n    on v.individual_party_key = e.individual_party_key\r\ngroup by e.individual_entity_id\r\n```\r\n\r\n{% enddocs %}","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"individual_party_key":{"name":"individual_party_key","data_type":"varchar","description":"{% docs individual_party_key %}\r\n\r\nRepresents an individual as understood by the system of record as of the\r\ntime the interaction with the individual took place.  This is used in conjunction\r\nwith an individual_id to connect across multiple systems to understand\r\na single entity.\r\n\r\nRecords from seperate systems should use the non-unique party key to join to the\r\nindividual entity table, and then be agregated to on the entity id to understand\r\ninteactions of the same customer.\r\n\r\n*Example*:\r\n``` sql\r\nselect\r\n    e.individual_id,\r\n    sum(t.revenue) revenue,\r\n    count(distinct visit_id) visits \r\n\r\nfrom transactions t\r\nleft join individual_entity e\r\n    on t.individual_party_key = e.individual_party_key\r\nleft join site_visits v\r\n    on v.individual_party_key = e.individual_party_key\r\ngroup by e.individual_entity_id\r\n```\r\n\r\n{% enddocs %}","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"updated_at":{"name":"updated_at","data_type":"timestamp_ntz","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}}},"depends_on":{"macros":[],"nodes":["source.dbt_core.entity_resolution.individual_party_keys"],"nodes_with_ref_location":[["source.dbt_core.entity_resolution.individual_party_keys",{"line":19,"col":19,"index":494,"file":"models\\staging\\entity_resolution\\stg_entity_resolution__individual_party_keys.sql","expanded":null}]]},"refs":[],"sources":[["entity_resolution","individual_party_keys"]],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"e9140961e2475d6eb92cb9c566c5ecc2309ecabac3596eba817144921b0ff541"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"individual_party_keys","schema":"entity_resolution","database":null,"tags":null,"catalog_name":null,"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"group":"data_foundation","materialized":"incremental","incremental_strategy":"delete+insert","incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":"individual_party_key","on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.stg_exchange_rate__rate":{"resource_type":"model","unique_id":"model.dbt_core.stg_exchange_rate__rate","database":"_dev_analytics","schema":"exchange_rate__astaus","name":"stg_exchange_rate__rate","package_name":"dbt_core","fqn":["dbt_core","staging","exchange_rate","stg_exchange_rate__rate"],"path":"models\\staging\\exchange_rate\\stg_exchange_rate__rate.sql","original_file_path":"models\\staging\\exchange_rate\\stg_exchange_rate__rate.sql","patch_path":"models\\staging\\exchange_rate\\stg_exchange_rate__rate.yml","description":"exchange rate from cad to different currancies","alias":"rate","relation_name":"_dev_analytics.exchange_rate__astaus.rate","columns":{"_loaded_at":{"name":"_loaded_at","data_type":"timestamp_ntz","description":"timestamp utc loaded from source","constraints":[],"meta":{},"tags":[],"config":{}},"cad_eur":{"name":"cad_eur","description":"exhange rate from cad to eur","constraints":[],"meta":{},"tags":[],"config":{}},"cad_usd":{"name":"cad_usd","description":"exhange rate from cad to usd","constraints":[],"meta":{},"tags":[],"config":{}},"exhange_date_utc":{"name":"exhange_date_utc","description":"the date of the set exchange rate","constraints":[],"meta":{},"tags":[],"config":{}},"usd_cad":{"name":"usd_cad","description":"exhange rate from usd to cad","constraints":[],"meta":{},"tags":[],"config":{}}},"depends_on":{"macros":[],"nodes":["source.dbt_core.exchange_rate.cad","source.dbt_core.exchange_rate.usd"],"nodes_with_ref_location":[["source.dbt_core.exchange_rate.cad",{"line":11,"col":19,"index":156,"file":"models\\staging\\exchange_rate\\stg_exchange_rate__rate.sql","expanded":null}],["source.dbt_core.exchange_rate.usd",{"line":15,"col":19,"index":228,"file":"models\\staging\\exchange_rate\\stg_exchange_rate__rate.sql","expanded":null}]]},"refs":[],"sources":[["exchange_rate","cad"],["exchange_rate","usd"]],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"5be375c9901fc6257800cc6dcc0f1b1e58414b013722479ea0cde4e281df0eb0"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"rate","schema":"exchange_rate","database":null,"tags":null,"catalog_name":null,"meta":null,"group":"data_foundation","materialized":"view","incremental_strategy":null,"incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":null,"on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.stg_facebook_ads__campaigns":{"resource_type":"model","unique_id":"model.dbt_core.stg_facebook_ads__campaigns","database":"_dev_analytics","schema":"facebook_ads__astaus","name":"stg_facebook_ads__campaigns","package_name":"dbt_core","fqn":["dbt_core","staging","facebook_ads","stg_facebook_ads__campaigns"],"path":"models\\staging\\facebook_ads\\stg_facebook_ads__campaigns.sql","original_file_path":"models\\staging\\facebook_ads\\stg_facebook_ads__campaigns.sql","patch_path":"models\\staging\\facebook_ads\\stg_facebook_ads__campaigns.yml","alias":"campaigns","relation_name":"_dev_analytics.facebook_ads__astaus.campaigns","columns":{"_loaded_at":{"name":"_loaded_at","data_type":"timestamp_ntz","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"campaign_id":{"name":"campaign_id","data_type":"number","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"campaign_name":{"name":"campaign_name","data_type":"varchar","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"campaign_start_date":{"name":"campaign_start_date","data_type":"date","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"campaign_update_date":{"name":"campaign_update_date","data_type":"timestamp_ntz","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}}},"depends_on":{"macros":[],"nodes":["source.dbt_core.facebook_ads.campaigns"],"nodes_with_ref_location":[["source.dbt_core.facebook_ads.campaigns",{"line":18,"col":19,"index":452,"file":"models\\staging\\facebook_ads\\stg_facebook_ads__campaigns.sql","expanded":null}]]},"refs":[],"sources":[["facebook_ads","campaigns"]],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"72428ea16a1812380c16952bc908a4daeae322a3f5dc17640e0ccc3550cdc4d0"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"campaigns","schema":"facebook_ads","database":null,"tags":null,"catalog_name":null,"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"group":"data_foundation","materialized":"incremental","incremental_strategy":"delete+insert","incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":"campaign_id","on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.stg_google_ads__campaigns":{"resource_type":"model","unique_id":"model.dbt_core.stg_google_ads__campaigns","database":"_dev_analytics","schema":"google_ads__astaus","name":"stg_google_ads__campaigns","package_name":"dbt_core","fqn":["dbt_core","staging","google_ads","stg_google_ads__campaigns"],"path":"models\\staging\\google_ads\\stg_google_ads__campaigns.sql","original_file_path":"models\\staging\\google_ads\\stg_google_ads__campaigns.sql","patch_path":"models\\staging\\google_ads\\stg_google_ads__campaigns.yml","alias":"campaigns","relation_name":"_dev_analytics.google_ads__astaus.campaigns","columns":{"_loaded_at":{"name":"_loaded_at","data_type":"timestamp_ntz","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"campaign_id":{"name":"campaign_id","data_type":"number","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"campaign_name":{"name":"campaign_name","data_type":"varchar","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"campaign_start_date":{"name":"campaign_start_date","data_type":"date","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}}},"depends_on":{"macros":[],"nodes":["source.dbt_core.google_ads.campaigns"],"nodes_with_ref_location":[["source.dbt_core.google_ads.campaigns",{"line":18,"col":19,"index":452,"file":"models\\staging\\google_ads\\stg_google_ads__campaigns.sql","expanded":null}]]},"refs":[],"sources":[["google_ads","campaigns"]],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"350e55998bffed25b8f9253ab3bb1b7b17f44d9e35c18e543c802b6da73d061f"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"campaigns","schema":"google_ads","database":null,"tags":null,"catalog_name":null,"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"group":"data_foundation","materialized":"incremental","incremental_strategy":"delete+insert","incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":"campaign_id","on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.stg_google_ads__campaigns_criteria":{"resource_type":"model","unique_id":"model.dbt_core.stg_google_ads__campaigns_criteria","database":"_dev_analytics","schema":"google_ads__astaus","name":"stg_google_ads__campaigns_criteria","package_name":"dbt_core","fqn":["dbt_core","staging","google_ads","stg_google_ads__campaigns_criteria"],"path":"models\\staging\\google_ads\\stg_google_ads__campaigns_criteria.sql","original_file_path":"models\\staging\\google_ads\\stg_google_ads__campaigns_criteria.sql","patch_path":"models\\staging\\google_ads\\stg_google_ads__campaigns_criteria.yml","alias":"campaigns_criteria","relation_name":"_dev_analytics.google_ads__astaus.campaigns_criteria","columns":{"_loaded_at":{"name":"_loaded_at","data_type":"timestamp_ntz","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"_scd_id":{"name":"_scd_id","data_type":"varchar","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"campaign_criteria_id":{"name":"campaign_criteria_id","data_type":"number","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}}},"depends_on":{"macros":[],"nodes":["source.dbt_core.google_ads.campaigns__criteria","source.dbt_core.google_ads.campaigns"],"nodes_with_ref_location":[["source.dbt_core.google_ads.campaigns__criteria",{"line":19,"col":19,"index":464,"file":"models\\staging\\google_ads\\stg_google_ads__campaigns_criteria.sql","expanded":null}],["source.dbt_core.google_ads.campaigns",{"line":23,"col":19,"index":555,"file":"models\\staging\\google_ads\\stg_google_ads__campaigns_criteria.sql","expanded":null}]]},"refs":[],"sources":[["google_ads","campaigns__criteria"],["google_ads","campaigns"]],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"5d949447d3319f0d31e4f85379bf1f4c0d7d29dcb38a484b8b71827d2a7cf1c5"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"campaigns_criteria","schema":"google_ads","database":null,"tags":null,"catalog_name":null,"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"group":"data_foundation","materialized":"incremental","incremental_strategy":"delete+insert","incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":"_scd_id","on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.stg_inventory_db__products":{"resource_type":"model","unique_id":"model.dbt_core.stg_inventory_db__products","database":"_dev_analytics","schema":"inventory_db__astaus","name":"stg_inventory_db__products","package_name":"dbt_core","fqn":["dbt_core","staging","inventory_db","stg_inventory_db__products"],"path":"models\\staging\\inventory_db\\stg_inventory_db__products.sql","original_file_path":"models\\staging\\inventory_db\\stg_inventory_db__products.sql","patch_path":"models\\staging\\inventory_db\\stg_inventory_db__products.yml","alias":"products","relation_name":"_dev_analytics.inventory_db__astaus.products","columns":{"brand_name":{"name":"brand_name","data_type":"varchar","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"product_id":{"name":"product_id","data_type":"varchar","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"product_name":{"name":"product_name","data_type":"varchar","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"updated_at":{"name":"updated_at","data_type":"timestamp_ntz","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}}},"depends_on":{"macros":[],"nodes":["source.dbt_core.inventory_db.products"],"nodes_with_ref_location":[["source.dbt_core.inventory_db.products",{"line":16,"col":19,"index":357,"file":"models\\staging\\inventory_db\\stg_inventory_db__products.sql","expanded":null}]]},"refs":[],"sources":[["inventory_db","products"]],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"de7512ee9d84a18a07f4a5c4a36ae3097aac8825f2171200e2d26768f04354c8"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"products","schema":"inventory_db","database":null,"tags":null,"catalog_name":null,"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"group":"data_foundation","materialized":"view","incremental_strategy":null,"incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":null,"on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"model.dbt_core.stg_transaction_db__transactions":{"resource_type":"model","unique_id":"model.dbt_core.stg_transaction_db__transactions","database":"_dev_analytics","schema":"transaction_db__astaus","name":"stg_transaction_db__transactions","package_name":"dbt_core","fqn":["dbt_core","staging","transaction_db","stg_transaction_db__transactions"],"path":"models\\staging\\transaction_db\\stg_transaction_db__transactions.sql","original_file_path":"models\\staging\\transaction_db\\stg_transaction_db__transactions.sql","patch_path":"models\\staging\\transaction_db\\stg_transaction_db__transactions.yml","description":"Completed transactions","alias":"transactions","relation_name":"_dev_analytics.transaction_db__astaus.transactions","columns":{"_loaded_at":{"name":"_loaded_at","data_type":"timestamp_ntz","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"individual_party_key":{"name":"individual_party_key","data_type":"varchar","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"product_id":{"name":"product_id","data_type":"varchar","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"sales_channel":{"name":"sales_channel","data_type":"varchar","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"transacted_at":{"name":"transacted_at","data_type":"timestamp_ntz","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"transaction_id":{"name":"transaction_id","data_type":"number","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"transaction_margin":{"name":"transaction_margin","data_type":"number","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}},"transaction_revenue":{"name":"transaction_revenue","data_type":"number","constraints":[],"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"tags":[],"config":{}}},"depends_on":{"macros":[],"nodes":["source.dbt_core.transaction_db.transactions"],"nodes_with_ref_location":[["source.dbt_core.transaction_db.transactions",{"line":18,"col":19,"index":465,"file":"models\\staging\\transaction_db\\stg_transaction_db__transactions.sql","expanded":null}]]},"refs":[],"sources":[["transaction_db","transactions"]],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"9fecf45223f9f8b51ca10fa63142618400428d3e6b1f915d54e3a07df23e03f3"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"alias":"transactions","schema":"transaction_db","database":null,"tags":null,"catalog_name":null,"meta":{"dagster":{"automation_condition":"eager","freshness_check":{"lower_bound_delta_seconds":129600}}},"group":"data_foundation","materialized":"incremental","incremental_strategy":"delete+insert","incremental_predicates":null,"batch_size":null,"lookback":null,"begin":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"column_types":null,"full_refresh":null,"unique_key":"transaction_id","on_schema_change":null,"on_configuration_change":null,"grants":null,"packages":null,"docs":null,"contract":null,"event_time":null,"concurrent_batches":null,"merge_update_columns":null,"merge_exclude_columns":null,"access":null,"table_format":null,"static_analysis":null,"freshness":null,"sql_header":null,"location":null,"predicates":null,"description":null},"constraints":[],"primary_key":[]},"operation.dbt_constraints.dbt_constraints-on_run_end-0":{"resource_type":"operation","unique_id":"operation.dbt_constraints.dbt_constraints-on_run_end-0","database":"","schema":"","name":"dbt_constraints-on_run_end-0","package_name":"dbt_constraints","fqn":["dbt_constraints","hooks","dbt_constraints-on_run_end-0"],"path":"hooks\\dbt_constraints-on_run_end-0","original_file_path":"dbt_packages\\dbt_constraints\\dbt_project.yml","alias":"","columns":{},"depends_on":{"macros":[],"nodes":[],"nodes_with_ref_location":[]},"refs":[],"sources":[],"unrendered_config":{},"metrics":[],"checksum":"","contract":{"alias_types":false,"enforced":false}},"seed.dbt_core.dim_marketing__dim_campaign_details":{"resource_type":"seed","unique_id":"seed.dbt_core.dim_marketing__dim_campaign_details","database":"_dev_analytics","schema":"astaus","name":"dim_marketing__dim_campaign_details","package_name":"dbt_core","fqn":["dbt_core","marketing","dim_marketing__dim_campaign_details"],"path":"seeds\\marketing\\dim_marketing__dim_campaign_details.csv","original_file_path":"seeds\\marketing\\dim_marketing__dim_campaign_details.csv","alias":"dim_marketing__dim_campaign_details","relation_name":"_dev_analytics.astaus.dim_marketing__dim_campaign_details","columns":{},"depends_on":{"macros":[],"nodes":[],"nodes_with_ref_location":[]},"refs":[],"sources":[],"unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"28e0086649e5908d507bddb57dd19b52ae73e39f51aabd570cd25447ca95c798"},"contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"group":"data_foundation","persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"root_path":"C:\\Users\\Andrew\\Code\\data_platform\\dbt"},"snapshot.dbt_core.snp_accounts_db__accounts":{"resource_type":"snapshot","unique_id":"snapshot.dbt_core.snp_accounts_db__accounts","database":"_dev_snapshots","schema":"accounts_db__astaus","name":"snp_accounts_db__accounts","package_name":"dbt_core","fqn":["dbt_core","snp_accounts_db__accounts"],"path":"snapshots\\snp_accounts_db__accounts.sql","original_file_path":"snapshots\\snp_accounts_db__accounts.sql","patch_path":"snapshots\\accounts_db\\snp_accounts_db__accounts.yml","alias":"accounts","relation_name":"_dev_snapshots.accounts_db__astaus.accounts","columns":{},"depends_on":{"macros":[],"nodes":["source.dbt_core.accounts_db.accounts"],"nodes_with_ref_location":[["source.dbt_core.accounts_db.accounts",{"line":1,"col":15,"index":14,"file":"snapshots\\snp_accounts_db__accounts.sql","expanded":null}]]},"refs":[],"sources":[["accounts_db","accounts"]],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"c782522dae71d334423474e07e9391ee7ff9bebe8b5198e0c75231e587f3b0c3"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"database":"_dev_snapshots","schema":"accounts_db__astaus","alias":"accounts","materialized":"table","strategy":"timestamp","unique_key":["id"],"updated_at":"updated_at","dbt_valid_to_current":"to_date('9999-12-31')","snapshot_meta_column_names":{"dbt_scd_id":"_scd_id","dbt_updated_at":"_updated_at","dbt_valid_from":"_valid_from","dbt_valid_to":"_valid_to","dbt_is_deleted":"_is_deleted"},"enabled":true,"pre_hook":null,"post_hook":null,"persist_docs":{"columns":true,"relation":true},"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"group":"data_foundation"}},"snapshot.dbt_core.snp_transaction_db__transactions_snapshot":{"resource_type":"snapshot","unique_id":"snapshot.dbt_core.snp_transaction_db__transactions_snapshot","database":"_dev_snapshots","schema":"transaction_db__astaus","name":"snp_transaction_db__transactions_snapshot","package_name":"dbt_core","fqn":["dbt_core","snp_transaction_db__transactions_snapshot"],"path":"snapshots\\snp_transaction_db__transactions_snapshot.sql","original_file_path":"snapshots\\snp_transaction_db__transactions_snapshot.sql","patch_path":"snapshots\\transaction_db\\snp_transaction_db__transactions_snapshot.yml","alias":"transactions","relation_name":"_dev_snapshots.transaction_db__astaus.transactions","columns":{},"depends_on":{"macros":[],"nodes":["source.dbt_core.transaction_db.transactions"],"nodes_with_ref_location":[["source.dbt_core.transaction_db.transactions",{"line":1,"col":15,"index":14,"file":"snapshots\\snp_transaction_db__transactions_snapshot.sql","expanded":null}]]},"refs":[],"sources":[["transaction_db","transactions"]],"raw_code":"--placeholder--","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"a0f68e3aed8d74ae696e62f6f11ed1b0c06fae345530637ab22be5024deae18c"},"language":"sql","contract":{"alias_types":false,"enforced":false},"config":{"database":"_dev_snapshots","schema":"transaction_db__astaus","alias":"transactions","materialized":"table","strategy":"timestamp","unique_key":"order_id","updated_at":"date_time","dbt_valid_to_current":"to_date('9999-12-31')","snapshot_meta_column_names":{"dbt_scd_id":"_scd_id","dbt_updated_at":"_updated_at","dbt_valid_from":"_valid_from","dbt_valid_to":"_valid_to","dbt_is_deleted":"_is_deleted"},"enabled":true,"pre_hook":null,"post_hook":null,"persist_docs":{"columns":true,"relation":true},"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false},"group":"data_foundation"}},"test.dbt_core.accepted_range_fct_common__fct_775386e4f031bf6c806434bb27d3e4b0.06761c4fa9":{"resource_type":"test","unique_id":"test.dbt_core.accepted_range_fct_common__fct_775386e4f031bf6c806434bb27d3e4b0.06761c4fa9","database":"_dev_analytics","schema":"dbt_test__audit__astaus","name":"accepted_range_fct_common__fct_775386e4f031bf6c806434bb27d3e4b0","package_name":"dbt_core","fqn":["dbt_core","marts","common","accepted_range_fct_common__fct_775386e4f031bf6c806434bb27d3e4b0"],"path":"generic_tests\\accepted_range_fct_common__fct_775386e4f031bf6c806434bb27d3e4b0.sql","original_file_path":"target\\generic_tests\\accepted_range_fct_common__fct_775386e4f031bf6c806434bb27d3e4b0.sql","patch_path":"models\\marts\\common\\fct_common__fct_transactions.yml","alias":"will_be_updated_below","columns":{},"depends_on":{"macros":["macro.dbt_utils.test_accepted_range"],"nodes":["model.dbt_core.fct_common__fct_transactions"],"nodes_with_ref_location":[["model.dbt_core.fct_common__fct_transactions",{"line":1,"col":122,"index":121,"file":"generic_tests\\accepted_range_fct_common__fct_775386e4f031bf6c806434bb27d3e4b0.sql","expanded":null}]]},"refs":[{"name":"fct_common__fct_transactions"}],"sources":[],"raw_code":"","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"d5b99610692fda03f52b91a91e0db84e60d8b6a92af2e8dbd24a36dd6b2b2e7f"},"contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"error_if":"!= 0","fail_calc":"count(*)","group":"data_foundation","schema":"dbt_test__audit","warn_if":"!= 0","quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"attached_node":"model.dbt_core.fct_common__fct_transactions"},"test.dbt_core.accepted_range_fct_common__fct_7a462bffce9f7cc47a4cd8bd0b819566.979a1c0750":{"resource_type":"test","unique_id":"test.dbt_core.accepted_range_fct_common__fct_7a462bffce9f7cc47a4cd8bd0b819566.979a1c0750","database":"_dev_analytics","schema":"dbt_test__audit__astaus","name":"accepted_range_fct_common__fct_7a462bffce9f7cc47a4cd8bd0b819566","package_name":"dbt_core","fqn":["dbt_core","marts","common","accepted_range_fct_common__fct_7a462bffce9f7cc47a4cd8bd0b819566"],"path":"generic_tests\\accepted_range_fct_common__fct_7a462bffce9f7cc47a4cd8bd0b819566.sql","original_file_path":"target\\generic_tests\\accepted_range_fct_common__fct_7a462bffce9f7cc47a4cd8bd0b819566.sql","patch_path":"models\\marts\\common\\fct_common__fct_transactions.yml","alias":"will_be_updated_below","columns":{},"depends_on":{"macros":["macro.dbt_utils.test_accepted_range"],"nodes":["model.dbt_core.fct_common__fct_transactions"],"nodes_with_ref_location":[["model.dbt_core.fct_common__fct_transactions",{"line":1,"col":123,"index":122,"file":"generic_tests\\accepted_range_fct_common__fct_7a462bffce9f7cc47a4cd8bd0b819566.sql","expanded":null}]]},"refs":[{"name":"fct_common__fct_transactions"}],"sources":[],"raw_code":"","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"ff0647b4e6225d0699b75983a7ccc7a9b504a09106d98c74006cb4d1d56124df"},"contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"error_if":"!= 0","fail_calc":"count(*)","group":"data_foundation","schema":"dbt_test__audit","warn_if":"!= 0","quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"attached_node":"model.dbt_core.fct_common__fct_transactions"},"test.dbt_core.accepted_values_stg_adobe_experience__hits_hit_source__web__app.8f3916608a":{"resource_type":"test","unique_id":"test.dbt_core.accepted_values_stg_adobe_experience__hits_hit_source__web__app.8f3916608a","database":"_dev_analytics","schema":"dbt_test__audit__astaus","name":"accepted_values_stg_adobe_experience__hits_hit_source__web__app","package_name":"dbt_core","fqn":["dbt_core","staging","adobe_experience","accepted_values_stg_adobe_experience__hits_hit_source__web__app"],"path":"generic_tests\\accepted_values_stg_adobe_experience__hits_hit_source__web__app.sql","original_file_path":"target\\generic_tests\\accepted_values_stg_adobe_experience__hits_hit_source__web__app.sql","patch_path":"models\\staging\\adobe_experience\\stg_adobe_experience__hits.yml","alias":"will_be_updated_below","columns":{},"depends_on":{"macros":[],"nodes":["model.dbt_core.stg_adobe_experience__hits"],"nodes_with_ref_location":[["model.dbt_core.stg_adobe_experience__hits",{"line":1,"col":76,"index":75,"file":"generic_tests\\accepted_values_stg_adobe_experience__hits_hit_source__web__app.sql","expanded":null}]]},"refs":[{"name":"stg_adobe_experience__hits"}],"sources":[],"raw_code":"","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"a0dce3c615c87cb479c990e03c5208cabc97725322db4515142ce8a20b837ca1"},"contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"error_if":"!= 0","fail_calc":"count(*)","group":"data_foundation","schema":"dbt_test__audit","warn_if":"!= 0","quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"attached_node":"model.dbt_core.stg_adobe_experience__hits"},"test.dbt_core.not_null_fct_common__fct_transactions__loaded_at.976298e3e0":{"resource_type":"test","unique_id":"test.dbt_core.not_null_fct_common__fct_transactions__loaded_at.976298e3e0","database":"_dev_analytics","schema":"dbt_test__audit__astaus","name":"not_null_fct_common__fct_transactions__loaded_at","package_name":"dbt_core","fqn":["dbt_core","marts","common","not_null_fct_common__fct_transactions__loaded_at"],"path":"generic_tests\\not_null_fct_common__fct_transactions__loaded_at.sql","original_file_path":"target\\generic_tests\\not_null_fct_common__fct_transactions__loaded_at.sql","patch_path":"models\\marts\\common\\fct_common__fct_transactions.yml","alias":"will_be_updated_below","columns":{},"depends_on":{"macros":[],"nodes":["model.dbt_core.fct_common__fct_transactions"],"nodes_with_ref_location":[["model.dbt_core.fct_common__fct_transactions",{"line":1,"col":69,"index":68,"file":"generic_tests\\not_null_fct_common__fct_transactions__loaded_at.sql","expanded":null}]]},"refs":[{"name":"fct_common__fct_transactions"}],"sources":[],"raw_code":"","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"3c9c22700ef7911b8187040cc7082cc1ba01f25c34a70093c943bec82d23b71d"},"contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"error_if":"!= 0","fail_calc":"count(*)","group":"data_foundation","schema":"dbt_test__audit","warn_if":"!= 0","quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"attached_node":"model.dbt_core.fct_common__fct_transactions"},"test.dbt_core.not_null_fct_common__fct_transactions_product_id.3030e9d60d":{"resource_type":"test","unique_id":"test.dbt_core.not_null_fct_common__fct_transactions_product_id.3030e9d60d","database":"_dev_analytics","schema":"dbt_test__audit__astaus","name":"not_null_fct_common__fct_transactions_product_id","package_name":"dbt_core","fqn":["dbt_core","marts","common","not_null_fct_common__fct_transactions_product_id"],"path":"generic_tests\\not_null_fct_common__fct_transactions_product_id.sql","original_file_path":"target\\generic_tests\\not_null_fct_common__fct_transactions_product_id.sql","patch_path":"models\\marts\\common\\fct_common__fct_transactions.yml","alias":"will_be_updated_below","columns":{},"depends_on":{"macros":[],"nodes":["model.dbt_core.fct_common__fct_transactions"],"nodes_with_ref_location":[["model.dbt_core.fct_common__fct_transactions",{"line":1,"col":69,"index":68,"file":"generic_tests\\not_null_fct_common__fct_transactions_product_id.sql","expanded":null}]]},"refs":[{"name":"fct_common__fct_transactions"}],"sources":[],"raw_code":"","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"0cc41878735f26e82982d4214fcb9c5f4614f5b84b872752bcade4120f4872eb"},"contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"error_if":"!= 0","fail_calc":"count(*)","group":"data_foundation","schema":"dbt_test__audit","warn_if":"!= 0","quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"attached_node":"model.dbt_core.fct_common__fct_transactions"},"test.dbt_core.not_null_fct_common__fct_transactions_transaction_id.1bc6f438b6":{"resource_type":"test","unique_id":"test.dbt_core.not_null_fct_common__fct_transactions_transaction_id.1bc6f438b6","database":"_dev_analytics","schema":"dbt_test__audit__astaus","name":"not_null_fct_common__fct_transactions_transaction_id","package_name":"dbt_core","fqn":["dbt_core","marts","common","not_null_fct_common__fct_transactions_transaction_id"],"path":"generic_tests\\not_null_fct_common__fct_transactions_transaction_id.sql","original_file_path":"target\\generic_tests\\not_null_fct_common__fct_transactions_transaction_id.sql","patch_path":"models\\marts\\common\\fct_common__fct_transactions.yml","alias":"will_be_updated_below","columns":{},"depends_on":{"macros":[],"nodes":["model.dbt_core.fct_common__fct_transactions"],"nodes_with_ref_location":[["model.dbt_core.fct_common__fct_transactions",{"line":1,"col":73,"index":72,"file":"generic_tests\\not_null_fct_common__fct_transactions_transaction_id.sql","expanded":null}]]},"refs":[{"name":"fct_common__fct_transactions"}],"sources":[],"raw_code":"","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"926e8e092275194c148faddd9dc3c8c3923cae2e197fcae8046564d6bbdb6553"},"contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"error_if":"!= 0","fail_calc":"count(*)","group":"data_foundation","schema":"dbt_test__audit","warn_if":"!= 0","quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"attached_node":"model.dbt_core.fct_common__fct_transactions"},"test.dbt_core.not_null_fct_common__fct_transactions_transaction_margin.84ce75bb68":{"resource_type":"test","unique_id":"test.dbt_core.not_null_fct_common__fct_transactions_transaction_margin.84ce75bb68","database":"_dev_analytics","schema":"dbt_test__audit__astaus","name":"not_null_fct_common__fct_transactions_transaction_margin","package_name":"dbt_core","fqn":["dbt_core","marts","common","not_null_fct_common__fct_transactions_transaction_margin"],"path":"generic_tests\\not_null_fct_common__fct_transactions_transaction_margin.sql","original_file_path":"target\\generic_tests\\not_null_fct_common__fct_transactions_transaction_margin.sql","patch_path":"models\\marts\\common\\fct_common__fct_transactions.yml","alias":"will_be_updated_below","columns":{},"depends_on":{"macros":[],"nodes":["model.dbt_core.fct_common__fct_transactions"],"nodes_with_ref_location":[["model.dbt_core.fct_common__fct_transactions",{"line":1,"col":77,"index":76,"file":"generic_tests\\not_null_fct_common__fct_transactions_transaction_margin.sql","expanded":null}]]},"refs":[{"name":"fct_common__fct_transactions"}],"sources":[],"raw_code":"","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"d00bf4980335ef55c4d0ccbc736283f6659983551f716e411d5d7ac66e3de51e"},"contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"error_if":"!= 0","fail_calc":"count(*)","group":"data_foundation","schema":"dbt_test__audit","warn_if":"!= 0","quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"attached_node":"model.dbt_core.fct_common__fct_transactions"},"test.dbt_core.not_null_fct_common__fct_transactions_transaction_revenue.f85a9662a2":{"resource_type":"test","unique_id":"test.dbt_core.not_null_fct_common__fct_transactions_transaction_revenue.f85a9662a2","database":"_dev_analytics","schema":"dbt_test__audit__astaus","name":"not_null_fct_common__fct_transactions_transaction_revenue","package_name":"dbt_core","fqn":["dbt_core","marts","common","not_null_fct_common__fct_transactions_transaction_revenue"],"path":"generic_tests\\not_null_fct_common__fct_transactions_transaction_revenue.sql","original_file_path":"target\\generic_tests\\not_null_fct_common__fct_transactions_transaction_revenue.sql","patch_path":"models\\marts\\common\\fct_common__fct_transactions.yml","alias":"will_be_updated_below","columns":{},"depends_on":{"macros":[],"nodes":["model.dbt_core.fct_common__fct_transactions"],"nodes_with_ref_location":[["model.dbt_core.fct_common__fct_transactions",{"line":1,"col":78,"index":77,"file":"generic_tests\\not_null_fct_common__fct_transactions_transaction_revenue.sql","expanded":null}]]},"refs":[{"name":"fct_common__fct_transactions"}],"sources":[],"raw_code":"","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"51fecda2376f57325f40cefca734366d5308044a50fba8001a178721a9aa30fb"},"contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"error_if":"!= 0","fail_calc":"count(*)","group":"data_foundation","schema":"dbt_test__audit","warn_if":"!= 0","quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"attached_node":"model.dbt_core.fct_common__fct_transactions"},"test.dbt_core.not_null_stg_accounts_db__accounts__loaded_at.5934b3acc7":{"resource_type":"test","unique_id":"test.dbt_core.not_null_stg_accounts_db__accounts__loaded_at.5934b3acc7","database":"_dev_analytics","schema":"dbt_test__audit__astaus","name":"not_null_stg_accounts_db__accounts__loaded_at","package_name":"dbt_core","fqn":["dbt_core","staging","accounts_db","not_null_stg_accounts_db__accounts__loaded_at"],"path":"generic_tests\\not_null_stg_accounts_db__accounts__loaded_at.sql","original_file_path":"target\\generic_tests\\not_null_stg_accounts_db__accounts__loaded_at.sql","patch_path":"models\\staging\\accounts_db\\stg_accounts_db__accounts.yml","alias":"will_be_updated_below","columns":{},"depends_on":{"macros":[],"nodes":["model.dbt_core.stg_accounts_db__accounts"],"nodes_with_ref_location":[["model.dbt_core.stg_accounts_db__accounts",{"line":1,"col":69,"index":68,"file":"generic_tests\\not_null_stg_accounts_db__accounts__loaded_at.sql","expanded":null}]]},"refs":[{"name":"stg_accounts_db__accounts"}],"sources":[],"raw_code":"","unrendered_config":{},"metrics":[],"checksum":{"name":"SHA256","checksum":"6bcbc89387f91e4674a948f4d1a555931df7ad7d464c2cfae1747f931c9a37a4"},"contract":{"alias_types":false,"enforced":false},"config":{"enabled":true,"error_if":"!= 0","fail_calc":"count(*)","group":"data_foundation","schema":"dbt_test__audit","warn_if":"!= 0","quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"attached_node":"model.dbt_core.stg_accounts_db__accounts"}},"parent_map":{},"saved_queries":{},"selectors":{},"semantic_models":{},"sources":{"source.dbt_core.accounts_db.accounts":{"unique_id":"source.dbt_core.accounts_db.accounts","database":"raw","schema":"accounts_db","name":"accounts","package_name":"dbt_core","fqn":["dbt_core","staging","accounts_db","accounts_db","accounts"],"path":"models\\staging\\accounts_db\\_sources.yml","original_file_path":"models\\staging\\accounts_db\\_sources.yml","patch_path":"models\\staging\\accounts_db\\_sources.yml","relation_name":"raw.accounts_db.accounts","identifier":"accounts","source_name":"accounts_db","columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"quoting":{"database":false,"identifier":false,"schema":false},"source_description":"","unrendered_config":{},"loader":"","loaded_at_field":"","loaded_at_query":"","resource_type":"source"},"source.dbt_core.adobe_experience.app_hits":{"unique_id":"source.dbt_core.adobe_experience.app_hits","database":"raw","schema":"adobe_experience","name":"app_hits","package_name":"dbt_core","fqn":["dbt_core","staging","adobe_experience","adobe_experience","app_hits"],"path":"models\\staging\\adobe_experience\\_sources.yml","original_file_path":"models\\staging\\adobe_experience\\_sources.yml","patch_path":"models\\staging\\adobe_experience\\_sources.yml","relation_name":"raw.adobe_experience.app_hits","identifier":"app_hits","source_name":"adobe_experience","columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"quoting":{"database":false,"identifier":false,"schema":false},"source_description":"","unrendered_config":{},"loader":"","loaded_at_field":"","loaded_at_query":"","resource_type":"source"},"source.dbt_core.adobe_experience.web_hits":{"unique_id":"source.dbt_core.adobe_experience.web_hits","database":"raw","schema":"adobe_experience","name":"web_hits","package_name":"dbt_core","fqn":["dbt_core","staging","adobe_experience","adobe_experience","web_hits"],"path":"models\\staging\\adobe_experience\\_sources.yml","original_file_path":"models\\staging\\adobe_experience\\_sources.yml","patch_path":"models\\staging\\adobe_experience\\_sources.yml","relation_name":"raw.adobe_experience.web_hits","identifier":"web_hits","source_name":"adobe_experience","columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"quoting":{"database":false,"identifier":false,"schema":false},"source_description":"","unrendered_config":{},"loader":"","loaded_at_field":"","loaded_at_query":"","resource_type":"source"},"source.dbt_core.entity_resolution.individual_party_keys":{"unique_id":"source.dbt_core.entity_resolution.individual_party_keys","database":"raw","schema":"entity_resolution","name":"individual_party_keys","package_name":"dbt_core","fqn":["dbt_core","staging","entity_resolution","entity_resolution","individual_party_keys"],"path":"models\\staging\\entity_resolution\\_sources.yml","original_file_path":"models\\staging\\entity_resolution\\_sources.yml","patch_path":"models\\staging\\entity_resolution\\_sources.yml","relation_name":"raw.entity_resolution.individual_party_keys","identifier":"individual_party_keys","source_name":"entity_resolution","columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"quoting":{"database":false,"identifier":false,"schema":false},"source_description":"","unrendered_config":{},"loader":"","loaded_at_field":"","loaded_at_query":"","resource_type":"source"},"source.dbt_core.exchange_rate.cad":{"unique_id":"source.dbt_core.exchange_rate.cad","database":"raw","schema":"exchange_rate","name":"cad","package_name":"dbt_core","fqn":["dbt_core","staging","exchange_rate","exchange_rate","cad"],"path":"models\\staging\\exchange_rate\\_sources.yml","original_file_path":"models\\staging\\exchange_rate\\_sources.yml","patch_path":"models\\staging\\exchange_rate\\_sources.yml","relation_name":"raw.exchange_rate.cad","identifier":"cad","source_name":"exchange_rate","columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"quoting":{"database":false,"identifier":false,"schema":false},"source_description":"","unrendered_config":{},"loader":"","loaded_at_field":"","loaded_at_query":"","resource_type":"source"},"source.dbt_core.exchange_rate.usd":{"unique_id":"source.dbt_core.exchange_rate.usd","database":"raw","schema":"exchange_rate","name":"usd","package_name":"dbt_core","fqn":["dbt_core","staging","exchange_rate","exchange_rate","usd"],"path":"models\\staging\\exchange_rate\\_sources.yml","original_file_path":"models\\staging\\exchange_rate\\_sources.yml","patch_path":"models\\staging\\exchange_rate\\_sources.yml","relation_name":"raw.exchange_rate.usd","identifier":"usd","source_name":"exchange_rate","columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"quoting":{"database":false,"identifier":false,"schema":false},"source_description":"","unrendered_config":{},"loader":"","loaded_at_field":"","loaded_at_query":"","resource_type":"source"},"source.dbt_core.facebook_ads.campaigns":{"unique_id":"source.dbt_core.facebook_ads.campaigns","database":"raw","schema":"facebook_ads","name":"campaigns","package_name":"dbt_core","fqn":["dbt_core","staging","facebook_ads","facebook_ads","campaigns"],"path":"models\\staging\\facebook_ads\\_sources.yml","original_file_path":"models\\staging\\facebook_ads\\_sources.yml","patch_path":"models\\staging\\facebook_ads\\_sources.yml","relation_name":"raw.facebook_ads.campaigns","identifier":"campaigns","source_name":"facebook_ads","columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"quoting":{"database":false,"identifier":false,"schema":false},"source_description":"","unrendered_config":{},"loader":"","loaded_at_field":"","loaded_at_query":"","resource_type":"source"},"source.dbt_core.google_ads.campaigns":{"unique_id":"source.dbt_core.google_ads.campaigns","database":"raw","schema":"google_ads","name":"campaigns","package_name":"dbt_core","fqn":["dbt_core","staging","google_ads","google_ads","campaigns"],"path":"models\\staging\\google_ads\\_sources.yml","original_file_path":"models\\staging\\google_ads\\_sources.yml","patch_path":"models\\staging\\google_ads\\_sources.yml","relation_name":"raw.google_ads.campaigns","identifier":"campaigns","source_name":"google_ads","columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"quoting":{"database":false,"identifier":false,"schema":false},"source_description":"","unrendered_config":{},"loader":"","loaded_at_field":"","loaded_at_query":"","resource_type":"source"},"source.dbt_core.google_ads.campaigns__criteria":{"unique_id":"source.dbt_core.google_ads.campaigns__criteria","database":"raw","schema":"google_ads","name":"campaigns__criteria","package_name":"dbt_core","fqn":["dbt_core","staging","google_ads","google_ads","campaigns__criteria"],"path":"models\\staging\\google_ads\\_sources.yml","original_file_path":"models\\staging\\google_ads\\_sources.yml","patch_path":"models\\staging\\google_ads\\_sources.yml","relation_name":"raw.google_ads.campaigns__criteria","identifier":"campaigns__criteria","source_name":"google_ads","columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"quoting":{"database":false,"identifier":false,"schema":false},"source_description":"","unrendered_config":{},"loader":"","loaded_at_field":"","loaded_at_query":"","resource_type":"source"},"source.dbt_core.google_ads.criteria":{"unique_id":"source.dbt_core.google_ads.criteria","database":"raw","schema":"google_ads","name":"criteria","package_name":"dbt_core","fqn":["dbt_core","staging","google_ads","google_ads","criteria"],"path":"models\\staging\\google_ads\\_sources.yml","original_file_path":"models\\staging\\google_ads\\_sources.yml","patch_path":"models\\staging\\google_ads\\_sources.yml","relation_name":"raw.google_ads.criteria","identifier":"criteria","source_name":"google_ads","columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"quoting":{"database":false,"identifier":false,"schema":false},"source_description":"","unrendered_config":{},"loader":"","loaded_at_field":"","loaded_at_query":"","resource_type":"source"},"source.dbt_core.google_ads.dlt_loads":{"unique_id":"source.dbt_core.google_ads.dlt_loads","database":"raw","schema":"google_ads","name":"dlt_loads","package_name":"dbt_core","fqn":["dbt_core","staging","google_ads","google_ads","dlt_loads"],"path":"models\\staging\\google_ads\\_sources.yml","original_file_path":"models\\staging\\google_ads\\_sources.yml","patch_path":"models\\staging\\google_ads\\_sources.yml","relation_name":"raw.google_ads.dlt_loads","identifier":"dlt_loads","source_name":"google_ads","columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"quoting":{"database":false,"identifier":false,"schema":false},"source_description":"","unrendered_config":{},"loader":"","loaded_at_field":"","loaded_at_query":"","resource_type":"source"},"source.dbt_core.inventory_db.products":{"unique_id":"source.dbt_core.inventory_db.products","database":"raw","schema":"inventory_db","name":"products","package_name":"dbt_core","fqn":["dbt_core","staging","inventory_db","inventory_db","products"],"path":"models\\staging\\inventory_db\\_sources.yml","original_file_path":"models\\staging\\inventory_db\\_sources.yml","patch_path":"models\\staging\\inventory_db\\_sources.yml","relation_name":"raw.inventory_db.products","identifier":"products","source_name":"inventory_db","columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"quoting":{"database":false,"identifier":false,"schema":false},"source_description":"","unrendered_config":{},"loader":"","loaded_at_field":"","loaded_at_query":"","resource_type":"source"},"source.dbt_core.transaction_db.transactions":{"unique_id":"source.dbt_core.transaction_db.transactions","database":"raw","schema":"transaction_db","name":"transactions","package_name":"dbt_core","fqn":["dbt_core","staging","transaction_db","transaction_db","transactions"],"path":"models\\staging\\transaction_db\\_sources.yml","original_file_path":"models\\staging\\transaction_db\\_sources.yml","patch_path":"models\\staging\\transaction_db\\_sources.yml","relation_name":"raw.transaction_db.transactions","identifier":"transactions","source_name":"transaction_db","columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false,"snowflake_ignore_case":false}},"quoting":{"database":false,"identifier":false,"schema":false},"source_description":"","unrendered_config":{},"loader":"","loaded_at_field":"","loaded_at_query":"","resource_type":"source"}},"unit_tests":{}}