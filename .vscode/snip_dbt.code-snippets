{
    "dbt_sources_scaffold":{
        "prefix": "dbt_sources_scaffold",
        "scope": "jinja-yaml,yaml",
        "description": "description",
        "body": [
            "version: 2",
            "",
            "sources:",
            "- name: ${1:source_name}",
            "  database: \"{{ '_'~target.name~'_' if target.name != 'prod'-}} raw\"",
            "  schema: \"${2:$1} {{- '__'~target.schema if not target.name in ['prod', 'qa']}}\"",
            "  tables:",
            "  - name: ${3:table_name}",
            ""
        ]
    },
    "dbt_staged_scaffold": {
        "scope": "jinja-sql,sql,snowflake-sql",
        "prefix": "dbt_staged_scaffold",
        "description": "description",
        "body": [
            "{{",
            "  config(",
            "    materialized = \"view\",",
            "    )",
            "-}}",
            "",
            "with ${1:${TM_FILENAME_BASE/(?:.*__)(.*)/${1:/lcase}/g}} as (",
            "    select * from {{ source(\"${2:${TM_FILENAME_BASE/(?:[^_]*_)(.*)(?:__.*)/${1:/lcase}/g}}\", \"$1\") }}",
            "),",
            "",
            "renamed as (",
            "    select",
            "        {# rename columns here #}",
            "        ${3:*}",
            "    from $1",
            ")",
            "",
            "select * from renamed",
            ""
        ]
    },
    "dbt_snapshot_scaffold":{
        "prefix": "dbt_snapshot_scaffold",
        "scope": "jinja-yaml,yaml",
        "description": "description",
        "body": [
            "version: 2",
            "",
            "snapshots:",
            "- name: snp_${1:schema_name}__${2:table_name}_snapshot",
            "  relation: source('$1', '$2')",
            "  config:",
            "    database: \"{{ '_'~target.name~'_' if target.name != 'prod'-}} snapshot\"",
            "    schema: \"$1 {{- '__'~target.schema if not target.name in ['prod', 'qa']}}\"",
            "    alias: $2_snapshot",
            "    unique_key: [${3:id}]",
            "    strategy: timestamp",
            "    updated_at: ${4:updated_at}",
            "    dbt_valid_to_current: \"to_date('9999-12-31')\"",
            "    snapshot_meta_column_names:",
            "      dbt_valid_from: _scd_start",
            "      dbt_valid_to: _scd_end",
            "      dbt_scd_id: _scd_id",
            "      dbt_updated_at: _scd_updated_at",
            "      dbt_is_deleted: _scd_is_deleted",
            ""
        ]
    },
    "automation_condition_config_sql":{
        "scope": "jinja-sql,sql,snowflake-sql",
        "prefix": "automation_condition_config",
        "description": "description",
        "body":[
            "meta = {",
            "    \"dagster\": {",
            "        \"automation_condition\": \"${1|on_cron,on_schedule,lazy,eager|}\",",
            "        \"automation_condition_config\": {\"cron_schedule\":\"${2|@daily,@hourly,@weekly,@monthly, 0 2 * * *|}\", \"cron_timezone\":\"${3|utc,pst|}\"},",
            "        \"freshness_check\": {\"lower_bound_delta_seconds\": ${4|129600,5400|}}",
            "    }",
            "  }"
        ]
    },
    "dbt_with_source_cte":{
        "scope": "jinja-sql,sql,snowflake-sql",
        "prefix": "dbt_with_source_cte",
        "description": "description",
        "body": [
            "with ${1:table} as (",
            "    select * from {{ source(\"${2:schema}\", \"$1\") }}",
            ")"
        ]
    },
    "dbt_source_cte":{
        "scope": "jinja-sql,sql,snowflake-sql",
        "prefix": "dbt_source_cte",
        "description": "description",
        "body": [
            "${1:table} as (",
            "    select * from {{ source(\"${2:schema}\", \"$1\") }}",
            ")"
        ]
    },
    "dbt_with_ref_cte":{
        "scope": "jinja-sql,sql,snowflake-sql",
        "prefix": "dbt_with_ref_cte",
        "description": "description",
        "body": [
            "with ${1:alias} as (",
            "    select * from {{ ref(${2:model}) }}",
            ")"
        ]
    },
    "dbt_ref_cte":{
        "scope": "jinja-sql,sql,snowflake-sql",
        "prefix": "dbt_ref_cte",
        "description": "description",
        "body": [
            "${1:alias} as (",
            "    select * from {{ ref(${2:model}) }}",
            ")"
        ]
    },
    "dbt_incremental_config": {
        "scope": "jinja-sql,sql,snowflake-sql",
        "prefix": "dbt_incremental_config",
        "description": "description",
        "body": [
            "{{-",
            "  config(",
            "    materialized = \"incremental\",",
            "    unique_key = \"${1:unique_key}\",",
            "    incremental_strategy = \"delete+insert\"",
            "    )",
            "-}}",
        ]
    },
    "dbt_is_incremental": {
        "scope": "jinja-sql,sql,snowflake-sql",
        "prefix": "dbt_is_incremental",
        "description": "description",
        "body": [
            "{% if is_incremental() -%}",
            "    where ${1:_loaded_at} >= coalesce((select max(${2:$1}) from {{ this }}), \"1900-01-01\")",
            "{%- endif %}"
        ]
    },
    "dbt_partition_config": {
        "scope": "jinja-sql,sql,snowflake-sql",
        "prefix": "dbt_partition",
        "description": "description",
        "body": [
            "\"partition\": \"${1|hourly,daily,weekly,monthly|}\",",
            "\"partition_start_date\": \"${2:$CURRENT_YEAR}-${3:$CURRENT_MONTH}-${4:$CURRENT_DATE}\",",
            "\"freshness_check\": {\"deadline_cron\": \"${5|0,*,0,1,2,3,4,5,6,7,8,9|} ${6|2,*,0,1,2,3,4,5,6,7,8,9|} ${7|*,0,1,2,3,4,5,6,7,8,9|} ${8|*,0,1,2,3,4,5,6,7,8,9|} ${9|*,0,1,2,3,4,5,6,7,8,9|}\"}",
        ]
    },
    "dbt_partition_is_incremental": {
        "scope": "jinja-sql,sql,snowflake-sql",
        "prefix": "dbt_partition_is_incremental",
        "description": "description",
        "body": [
            "{% if is_incremental() -%}",
            "     where 1=1",
            "        and ${1:date_time} >= '{{ var(\"min_date\", \"1900-01-01\") }}'",
            "        and $1 <= '{{ var(\"max_date\", \"9999-12-31\") }}'",
            "{%- endif %}"
        ]
    },
}
    